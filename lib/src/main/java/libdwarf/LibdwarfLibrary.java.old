package libdwarf;
import com.ochafik.lang.jnaerator.runtime.LibraryExtractor;
import com.ochafik.lang.jnaerator.runtime.MangledFunctionMapper;
import com.ochafik.lang.jnaerator.runtime.globals.GlobalStruct;
import com.sun.jna.Callback;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.LongByReference;
import com.sun.jna.ptr.PointerByReference;
import com.sun.jna.ptr.ShortByReference;
import java.nio.ByteBuffer;
import java.nio.IntBuffer;
import java.nio.LongBuffer;
import java.nio.ShortBuffer;
/**
 * JNA Wrapper for library <b>libdwarf</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface LibdwarfLibrary extends Library {
	public static final String JNA_LIBRARY_NAME = LibraryExtractor.getLibraryPath("libdwarf", true, LibdwarfLibrary.class);
	public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(LibdwarfLibrary.JNA_LIBRARY_NAME, MangledFunctionMapper.DEFAULT_OPTIONS);
	public static final LibdwarfLibrary INSTANCE = (LibdwarfLibrary)Native.loadLibrary(LibdwarfLibrary.JNA_LIBRARY_NAME, LibdwarfLibrary.class, MangledFunctionMapper.DEFAULT_OPTIONS);
	/**
	 * First appears in DWARF3, and only ranges entries exist.<br>
	 * The dwr_addr1/addr2 data is either an offset (DW_RANGES_ENTRY)<br>
	 * or an address (dwr_addr2 in DW_RANGES_ADDRESS_SELECTION) or<br>
	 * both are zero (DW_RANGES_END).<br>
	 * For DWARF5 each table starts with a header<br>
	 * followed by range list entries defined<br>
	 * as here.<br>
	 * <i>native declaration : line 234</i><br>
	 * enum values
	 */
	public static interface Dwarf_Ranges_Entry_Type {
		/** <i>native declaration : line 234</i> */
		public static final int DW_RANGES_ENTRY = 0;
		/** <i>native declaration : line 235</i> */
		public static final int DW_RANGES_ADDRESS_SELECTION = 1;
		/** <i>native declaration : line 236</i> */
		public static final int DW_RANGES_END = 2;
	};
	/**
	 * For DW_DLC_SYMBOLIC_RELOCATIONS output to caller<br>
	 * v2, adding drd_length: some relocations are 4 and<br>
	 * some 8 bytes (pointers are 8, section offsets 4) in<br>
	 * some dwarf environments. (MIPS relocations are all one<br>
	 * size in any given ABI.) Changing drd_type to an unsigned char<br>
	 * to keep struct size down.<br>
	 * <i>native declaration : line 509</i><br>
	 * enum values
	 */
	public static interface Dwarf_Rel_Type {
		/**
		 * Should not get to caller<br>
		 * <i>native declaration : line 510</i>
		 */
		public static final int dwarf_drt_none = 0;
		/**
		 * Simple normal relocation.<br>
		 * <i>native declaration : line 511</i>
		 */
		public static final int dwarf_drt_data_reloc = 1;
		/**
		 * Special reloc, exceptions.<br>
		 * <i>native declaration : line 512</i>
		 */
		public static final int dwarf_drt_segment_rel = 2;
		/**
		 * dwarf_drt_first_of_length_pair  and drt_second<br>
		 * are for for the  .word end - begin case.<br>
		 * <i>native declaration : line 515</i>
		 */
		public static final int dwarf_drt_first_of_length_pair = 3;
		/** <i>native declaration : line 516</i> */
		public static final int dwarf_drt_second_of_length_pair = 4;
	};
	/** enum values */
	public static interface Dwarf_Endianness {
		/** <i>native declaration : line 655</i> */
		public static final int DW_OBJECT_MSB = 0;
		/** <i>native declaration : line 656</i> */
		public static final int DW_OBJECT_LSB = 1;
	};
	/**
	 * The dwarf specification separates FORMs into<br>
	 * different classes.  To do the seperation properly<br>
	 * requires 4 pieces of data as of DWARF4 (thus the<br>
	 * function arguments listed here).<br>
	 * The DWARF4 specification class definition suffices to<br>
	 * describe all DWARF versions.<br>
	 * See section 7.5.4, Attribute Encodings.<br>
	 * A return of DW_FORM_CLASS_UNKNOWN means we could not properly figure<br>
	 * out what form-class it is.<br>
	 * DW_FORM_CLASS_FRAMEPTR is MIPS/IRIX only, and refers<br>
	 * to the DW_AT_MIPS_fde attribute (a reference to the<br>
	 * .debug_frame section).<br>
	 * DWARF5:<br>
	 * DW_FORM_CLASS_LOCLISTSPTR  is like DW_FORM_CLASS_LOCLIST<br>
	 * except that LOCLISTSPTR is aways a section offset,<br>
	 * never an index, and LOCLISTSPTR is only referenced<br>
	 * by DW_AT_loclists_base.<br>
	 * Note DW_FORM_CLASS_LOCLISTSPTR spelling to distinguish<br>
	 * from DW_FORM_CLASS_LOCLISTPTR.<br>
	 * DWARF5:<br>
	 * DW_FORM_CLASS_RNGLISTSPTR  is like DW_FORM_CLASS_RNGLIST<br>
	 * except that RNGLISTSPTR is aways a section offset,<br>
	 * never an index. DW_FORM_CLASS_RNGLISTSPTR is only<br>
	 * referenced by DW_AT_rnglists_base.<br>
	 * <i>native declaration : line 1498</i><br>
	 * enum values
	 */
	public static interface Dwarf_Form_Class {
		/** <i>native declaration : line 1499</i> */
		public static final int DW_FORM_CLASS_UNKNOWN = 0;
		/** <i>native declaration : line 1499</i> */
		public static final int DW_FORM_CLASS_ADDRESS = 1;
		/** <i>native declaration : line 1500</i> */
		public static final int DW_FORM_CLASS_BLOCK = 2;
		/** <i>native declaration : line 1500</i> */
		public static final int DW_FORM_CLASS_CONSTANT = 3;
		/** <i>native declaration : line 1501</i> */
		public static final int DW_FORM_CLASS_EXPRLOC = 4;
		/** <i>native declaration : line 1501</i> */
		public static final int DW_FORM_CLASS_FLAG = 5;
		/** <i>native declaration : line 1502</i> */
		public static final int DW_FORM_CLASS_LINEPTR = 6;
		/**
		 * DWARF2,3,4 only<br>
		 * <i>native declaration : line 1503</i>
		 */
		public static final int DW_FORM_CLASS_LOCLISTPTR = 7;
		/**
		 * DWARF2,3,4 only<br>
		 * <i>native declaration : line 1504</i>
		 */
		public static final int DW_FORM_CLASS_MACPTR = 8;
		/**
		 * DWARF2,3,4 only<br>
		 * <i>native declaration : line 1505</i>
		 */
		public static final int DW_FORM_CLASS_RANGELISTPTR = 9;
		/** <i>native declaration : line 1506</i> */
		public static final int DW_FORM_CLASS_REFERENCE = 10;
		/** <i>native declaration : line 1507</i> */
		public static final int DW_FORM_CLASS_STRING = 11;
		/**
		 * MIPS/IRIX DWARF2 only<br>
		 * <i>native declaration : line 1508</i>
		 */
		public static final int DW_FORM_CLASS_FRAMEPTR = 12;
		/**
		 * DWARF5<br>
		 * <i>native declaration : line 1509</i>
		 */
		public static final int DW_FORM_CLASS_MACROPTR = 13;
		/**
		 * DWARF5<br>
		 * <i>native declaration : line 1510</i>
		 */
		public static final int DW_FORM_CLASS_ADDRPTR = 14;
		/**
		 * DWARF5<br>
		 * <i>native declaration : line 1511</i>
		 */
		public static final int DW_FORM_CLASS_LOCLIST = 15;
		/**
		 * DWARF5<br>
		 * <i>native declaration : line 1512</i>
		 */
		public static final int DW_FORM_CLASS_LOCLISTSPTR = 16;
		/**
		 * DWARF5<br>
		 * <i>native declaration : line 1513</i>
		 */
		public static final int DW_FORM_CLASS_RNGLIST = 17;
		/**
		 * DWARF5<br>
		 * <i>native declaration : line 1514</i>
		 */
		public static final int DW_FORM_CLASS_RNGLISTSPTR = 18;
		/**
		 * DWARF5<br>
		 * <i>native declaration : line 1515</i>
		 */
		public static final int DW_FORM_CLASS_STROFFSETSPTR = 19;
	};
	public static final int DW_DLA_FRAME_OP = (int)0x13;
	public static final int DW_DLS_NOSLIDE = (int)0;
	public static final int DW_DLE_UNIT_TYPE_NOT_HANDLED = (int)386;
	public static final int DW_DLE_PARENT_EXISTS = (int)80;
	public static final int DW_DLE_DWP_MISSING_DWO_ID = (int)292;
	public static final int DW_DLE_COMPRESSED_EMPTY_SECTION = (int)347;
	public static final int DW_DLE_FISSION_INDEX_WRONG = (int)282;
	public static final int DW_DLE_CU_UT_TYPE_ERROR = (int)285;
	public static final int DW_DLE_ELF_SECTION_ERROR = (int)446;
	public static final int DW_DLE_AUGMENTATION_STRING_OFF_END = (int)362;
	public static final int DW_DLE_FDE_ALLOC = (int)73;
	public static final int DW_GROUPNUMBER_DWO = (int)2;
	public static final int DW_DLE_BAD_STRING_FORM = (int)350;
	public static final int DW_DLE_CIE_INSTR_EXEC_ERROR = (int)98;
	public static final int DW_DLE_DEBUG_FRAME_LENGTH_BAD = (int)89;
	public static final int DW_DLE_DWARF_INIT_DBG_NULL = (int)465;
	public static final int DW_DLE_ELF_FLAGS_NOT_AVAILABLE = (int)328;
	public static final int DW_DLE_ELF_BEGIN_ERROR = (int)27;
	public static final int DW_DLE_GROUP_COUNT_ERROR = (int)389;
	public static final int DW_DLE_STRING_OFFSET_BAD = (int)53;
	public static final int DW_DLE_GLOBAL_CONTEXT_NULL = (int)126;
	public static final int DW_DLE_DF_FRAME_DECODING_ERROR = (int)193;
	public static final int DW_DLE_DEBUG_VARNAMES_VERSION_ERROR = (int)166;
	public static final int DW_DLE_LINE_PROLOG_LENGTH_BAD = (int)55;
	public static final int DW_DLE_STRING_HASHTAB_IDENTITY_ERROR = (int)385;
	public static final int DW_DLE_UNKNOWN_FORM = (int)321;
	public static final int DW_DLE_DEBUG_FUNCNAMES_NULL = (int)153;
	public static final int DW_DLE_VERSION_STAMP_ERROR = (int)48;
	public static final int DW_DLE_CIE_RET_ADDR_REG_ERROR = (int)91;
	public static final int DW_DLE_AT_FIXUP_NULL = (int)242;
	public static final int DW_DLE_ABBREV_ALLOC = (int)86;
	public static final int DW_DLE_FSTAT_ERROR = (int)24;
	public static final int DW_DLE_DEBUG_LINE_DUPLICATE = (int)37;
	public static final int DW_DLE_MIXING_SPLIT_DWARF_VERSIONS = (int)448;
	public static final int DW_DLE_FDE_PTR_NULL = (int)100;
	public static final int DW_DLE_NO_FILE_NAME = (int)140;
	public static final int DW_DLE_STR_OFFSETS_NO_MAGIC = (int)404;
	public static final int DW_DLE_FRAME_AUGMENTATION_UNKNOWN = (int)195;
	public static final int DW_DLE_XU_HASH_ROW_ERROR = (int)271;
	public static final int DW_DLE_ELF_SECTION_GROUP_ERROR = (int)441;
	public static final int DW_DLE_DEBUG_LINE_LENGTH_BAD = (int)54;
	public static final int DW_DLA_ATTR = (int)0x0a;
	public static final int DW_DLE_DEBUG_WEAKNAMES_LENGTH_BAD = (int)173;
	public static final int DW_DLE_VMM = (int)1;
	public static final int DW_DLE_SEEK_ERROR = (int)418;
	public static final int DW_GROUPNUMBER_BASE = (int)1;
	public static final int DW_DLC_ELF_OFFSET_SIZE_64 = (int)0x00020000;
	public static final int DW_DLE_DEBUG_FORM_HANDLING_INCOMPLETE = (int)251;
	public static final int DW_DLE_ID = (int)6;
	public static final int DW_DLE_NEXT_DIE_PAST_END = (int)252;
	public static final int DW_DLE_FNR = (int)13;
	public static final int DW_DLE_INFO_HEADER_ERROR = (int)334;
	public static final int DW_DLE_FORM_STRING_BAD_STRING = (int)361;
	public static final int DW_DLE_IA = (int)9;
	public static final int DW_DLE_FNO = (int)12;
	public static final int DW_DLE_DEBUG_VARNAMES_DUPLICATE = (int)164;
	public static final int DW_DLE_ZLIB_UNCOMPRESS_ERROR = (int)368;
	public static final int DW_DLE_ELF_RELOC_SECTION_ERROR = (int)466;
	public static final int DW_DLE_ZLIB_DATA_ERROR = (int)317;
	public static final int DW_DLE_FPGM_ALLOC = (int)67;
	public static final int DW_DLE_DEBUGINFO_ERROR = (int)84;
	public static final int DW_DLA_LINEBUF = (int)0x10;
	public static final int DW_DLE_DWARF_ABBREV_NULL = (int)110;
	public static final int DW_DLE_EOS = (int)20;
	public static final int DW_DLE_DEBUG_TYPES_ONLY_DWARF4 = (int)238;
	public static final int DW_DLE_MACRO_OFFSET_BAD = (int)318;
	public static final int DW_DLE_SIGNATURE_SECTION_NUMBER_WRONG = (int)287;
	public static final int DW_DLE_FISSION_SECNUM_ERR = (int)295;
	public static final int DW_DLE_XU_TYPE_ARG_ERROR = (int)268;
	public static final int DW_DLE_DEBUGSTR_ERROR = (int)351;
	public static final int DW_DLE_PE_OFFSET_BAD = (int)427;
	public static final int DW_DLE_DEBUG_FUNCNAMES_DUPLICATE = (int)152;
	public static final int DW_DLA_LOC_BLOCK = (int)0x16;
	public static final int DW_DLE_ELF_VERSION_BAD = (int)422;
	public static final int DW_DLE_XU_NAME_COL_ERROR = (int)270;
	public static final int DW_DLE_DEBUG_RANGES_OFFSET_BAD = (int)206;
	public static final int DW_DLE_ARANGE_NULL = (int)139;
	public static final int DW_FTYPE_CUSTOM_ELF = (int)5;
	public static final int DW_DLE_ATTR_OUTSIDE_SECTION = (int)281;
	public static final int DW_DLE_DEBUG_FRAME_NULL = (int)108;
	public static final int DW_DLE_FILE_OFFSET_BAD = (int)417;
	public static final int DW_DLE_RNGLISTS_ERROR = (int)468;
	public static final int DW_DLE_MACINFO_STRING_NULL = (int)177;
	public static final int DW_DLA_MACRO_CONTEXT = (int)0x3c;
	public static final int DW_DLE_REGNO_OVFL = (int)74;
	public static final int DW_DLE_CIE_ALLOC = (int)72;
	public static final int DW_DLE_NO_TIED_ADDR_AVAILABLE = (int)301;
	public static final int DW_DLE_CIE_INSTR_PTR_ERROR = (int)339;
	public static final int DW_DLE_DUP_ATTR_ON_DIE = (int)409;
	public static final int DW_DLE_NO_ELF64_SUPPORT = (int)219;
	public static final int DW_DLE_CIE_OFFS_ALLOC = (int)75;
	public static final int DW_DLE_DUPLICATE_TU_INDEX = (int)267;
	public static final int DW_DLE_SIG_TYPE_WRONG_STRING = (int)289;
	public static final int DW_DLE_DEBUG_STR_DUPLICATE = (int)45;
	public static final int DW_DLE_DBG_NULL = (int)81;
	public static final int DW_DLE_SECTION_DUPLICATION = (int)247;
	public static final int DW_DLE_ADDR_ALLOC = (int)130;
	public static final int DW_DLE_ABBREV_OFF_END = (int)360;
	public static final int DW_LKIND_unknown = (int)99;
	public static final int DW_DLE_NE = (int)0;
	public static final int DW_DLE_DIE_NO_CU_CONTEXT = (int)104;
	public static final int DW_DLE_BAD_MACRO_HEADER_POINTER = (int)322;
	public static final int DW_DLE_FILE_UNAVAILABLE = (int)411;
	public static final int DW_DLE_STR_OFFSETS_EXTRA_BYTES = (int)408;
	public static final int DW_DLE_DEBUG_FUNCNAMES_LENGTH_BAD = (int)155;
	public static final int DW_DLE_DEBUG_NAMES_ENTRYPOOL_OFFSET = (int)380;
	public static final int DW_DLE_LINE_TABLE_LINENO_ERROR = (int)430;
	public static final int DW_DLE_SECTION_NAME_BIG = (int)410;
	public static final int DW_DLE_HEX_STRING_ERROR = (int)460;
	public static final int DWARF_DRD_BUFFER_VERSION = (int)2;
	public static final int DW_DLE_DEBUG_NAMES_ABBREV_OVERFLOW = (int)376;
	public static final int DW_DLA_STR_OFFSETS = (int)0x40;
	public static final int DW_DLE_DISCR_ARRAY_ERROR = (int)353;
	public static final int DW_DLA_ARANGE = (int)0x11;
	public static final int DW_DLE_RET_OP_LIST_NULL = (int)101;
	public static final int DW_DLE_DEBUG_LINE_NULL = (int)38;
	public static final int DW_DLE_DEBUG_INFO_NULL = (int)32;
	public static final int DW_DLE_DEBUG_WEAKNAMES_VERSION_ERROR = (int)172;
	public static final int DW_DLV_NO_ENTRY = (int)-1;
	public static final int DW_DLE_MACRO_OPCODE_BAD = (int)319;
	public static final int DW_DLE_LEB_IMPROPER = (int)329;
	public static final int DW_DLE_DEBUG_PUBTYPES_VERSION_ERROR = (int)198;
	public static final int DW_DLE_DEBUG_STR_OFFSET_BAD = (int)121;
	public static final int DW_DLE_ABBREV_OFFSET_ERROR = (int)49;
	public static final int DW_DLE_VAR_CONTEXT_NULL = (int)169;
	public static final int DW_DLE_DECIMAL_STRING_ERROR = (int)461;
	public static final int DW_DLE_NESTED_FORM_INDIRECT_ERROR = (int)255;
	public static final int DW_DLE_DEBUG_MACRO_MAX_BAD = (int)183;
	public static final int DW_DLE_DUPLICATE_GDB_INDEX = (int)260;
	public static final int DW_DLE_ELF_STRING_SECTION_ERROR = (int)447;
	public static final int DW_DLE_NDS = (int)4;
	public static final int DW_DLE_LINE_OFFSET_BAD = (int)120;
	public static final int DW_DLE_DEBUG_PUBTYPES_DUPLICATE = (int)199;
	public static final int DW_DLE_FRAME_REGISTER_COUNT_MISMATCH = (int)202;
	public static final int DW_DLE_DEBUG_STR_OFFSETS_DUPLICATE = (int)246;
	public static final int DW_DLE_LLE_CODE_UNKNOWN = (int)310;
	public static final int DW_DLE_NOLL = (int)18;
	public static final int DW_DLE_LINK_LOOP = (int)203;
	public static final int DW_DLE_GROUP_MAP_DUPLICATE = (int)388;
	public static final int DW_DLE_GNU_PUBTYPES_ERROR = (int)473;
	public static final int DW_DLE_ELF_GETEHDR_ERROR = (int)28;
	public static final int DW_DLE_DEBUG_FRAME_LENGTH_NOT_MULTIPLE = (int)227;
	public static final int DW_DLE_DEBUG_NAMES_HEADER_ERROR = (int)372;
	public static final int DW_DLE_DEBUG_NAMES_AUG_STRING_ERROR = (int)373;
	public static final int DW_DLE_LNCT_FORM_CODE_NOT_HANDLED = (int)383;
	public static final int DW_DLE_NO_SUCH_SIGNATURE_FOUND = (int)286;
	public static final int DW_DLA_LIST = (int)0x0f;
	public static final int DW_DLE_SYMTAB_SECTION_LENGTH_ODD = (int)231;
	public static final int DW_DLE_XU_IMPOSSIBLE_ERROR = (int)269;
	public static final int DW_DLE_MAF = (int)8;
	public static final int DW_DLE_INTERNAL_NULL_POINTER = (int)436;
	public static final String DW_PR_DUx = (String)"llx";
	public static final int DW_DLE_SEEK_OFF_END = (int)444;
	public static final String DW_PR_DUu = (String)"llu";
	public static final int DW_DLE_LINE_NUMBER_HEADER_ERROR = (int)235;
	public static final int DW_DLE_NEXT_DIE_PTR_NULL = (int)106;
	public static final int DW_DLE_DEBUG_NAMES_NULL_POINTER = (int)378;
	public static final int DW_DLE_CU_ADDRESS_SIZE_BAD = (int)142;
	public static final int DW_DLE_GDB_INDEX_CUVEC_ERROR = (int)265;
	public static final int DW_DLE_DEBUG_SUP_STRING_ERROR = (int)476;
	public static final int DW_DLE_MAP = (int)2;
	public static final int DW_LKIND_expression = (int)0;
	public static final int DW_DLE_SEGMENT_SIZE_BAD = (int)135;
	public static final int DW_DLE_DEBUG_TYPENAMES_DUPLICATE = (int)158;
	public static final int DW_DLE_POINTER_SECTION_UNKNOWN = (int)344;
	public static final int DW_DLE_CORRUPT_GNU_DEBUGID_STRING = (int)459;
	public static final int DW_DLE_MACRO_OP_UNHANDLED = (int)324;
	public static final int DW_DLE_ELF_STRPTR_ERROR = (int)30;
	public static final int DW_DLE_NO_STREAM_RELOC_SUPPORT = (int)433;
	public static final int DW_DLE_DBG_NO_CU_CONTEXT = (int)103;
	public static final int DW_DLE_EXPR_LENGTH_BAD = (int)146;
	public static final int DW_DLA_BLOCK = (int)0x06;
	public static final int DW_DLE_FILE_TOO_SMALL = (int)423;
	public static final int DW_DLE_DEBUG_ABBREV_DUPLICATE = (int)33;
	public static final int DW_DLE_ATTR_DBG_NULL = (int)117;
	public static final int DW_DLE_DEBUG_TYPEOFFSET_BAD = (int)239;
	public static final int DW_DLE_BAD_LINE_TABLE_OPERATION = (int)304;
	public static final int DW_DLE_FRAME_INSTR_EXEC_ERROR = (int)99;
	public static final int DW_DLE_FILE_ENTRY_ALLOC = (int)65;
	public static final int DW_DLC_RDWR = (int)2;
	public static final int DW_DLE_MDE = (int)10;
	public static final int DW_DLE_ELF_CLASS_BAD = (int)420;
	public static final int DW_DLE_FWA = (int)14;
	public static final int DW_DLE_MACRO_STRING_BAD = (int)366;
	public static final int DW_DLE_ATTR_NULL = (int)111;
	public static final int DW_DLE_DIRECTORY_FORMAT_COUNT_VS_DIRECTORIES_MISMATCH = (int)346;
	public static final int DW_DLC_OFFSET64 = (int)0x10000000;
	public static final int DW_DLE_NO_TIED_FILE_AVAILABLE = (int)308;
	public static final int DW_DLE_FORM_CORRUPT = (int)450;
	public static final int DW_DLE_STR_OFFSETS_ARRAY_SIZE = (int)405;
	public static final int DW_DLA_RNGLISTS_HEAD = (int)0x36;
	public static final int DW_DLE_MACINFO_STRING_BAD = (int)367;
	public static final int DW_DLE_DEBUG_MACRO_MALLOC_SPACE = (int)185;
	public static final int DW_DLE_FUNC_CONTEXT_NULL = (int)157;
	public static final int DW_DLE_MAKE_CU_CONTEXT_FAIL = (int)132;
	public static final int DW_DLA_STRING = (int)0x01;
	public static final int DW_DLE_ELF_GETSHDR_ERROR = (int)29;
	public static final int DW_DLE_HIGHPC_WRONG_FORM = (int)397;
	public static final int DW_DLE_LAST = (int)478;
	public static final int DW_DLE_RELOC_SECTION_SYMBOL_INDEX_BAD = (int)232;
	public static final int DW_ENDIAN_LITTLE = (int)2;
	public static final int DW_DLE_NO_COMP_DIR = (int)141;
	public static final int DW_DLE_RELOC_SECTION_MALLOC_FAIL = (int)218;
	public static final int DW_DLE_NULL_ARGS_DWARF_ADD_PATH = (int)464;
	public static final int DW_DLE_MACINFO_MALLOC_FAIL = (int)180;
	public static final int DW_DLE_LNCT_MD5_WRONG_FORM = (int)400;
	public static final String DW_PR_DSx = (String)"llx";
	public static final int DW_DLE_ATTR_FORM_NOT_STR_INDEX = (int)259;
	public static final String DW_PR_DSd = (String)"lld";
	public static final int DW_DLE_DEBUG_SYMTAB_ERR = (int)209;
	public static final int DW_DLE_NO_CIE_FOR_FDE = (int)150;
	public static final int DW_DLE_DEBUGLINE_ERROR = (int)82;
	public static final int DW_DLE_FISSION_ADDITION_ERROR = (int)341;
	public static final int DW_DLA_TYPENAME = (int)0x19;
	public static final int DW_DLE_DIE_ABBREV_BAD = (int)113;
	public static final int DW_DLE_DEBUG_ADDR_DUPLICATE = (int)249;
	public static final int DW_DLE_DEBUG_PUBNAMES_DUPLICATE = (int)43;
	public static final int DW_DLA_CIE = (int)0x14;
	public static final int DW_DLE_DEFINE_FILE_STRING_BAD = (int)365;
	public static final int DW_DLE_LOWPC_WRONG_CLASS = (int)396;
	public static final int DW_DLE_GLOBAL_NULL = (int)125;
	public static final int DW_DLE_DF_NEW_LOC_LESS_OLD_LOC = (int)190;
	public static final int DW_DLE_ELF_STRING_SECTION_MISSING = (int)443;
	public static final int DW_DLE_CU_UT_TYPE_VALUE = (int)454;
	public static final int DW_DLE_LEE = (int)3;
	public static final int DW_DLE_DIE_ALLOC = (int)79;
	public static final int DW_DLA_DNAMES_HEAD = (int)0x3f;
	public static final int DW_DLS_FORWARD = (int)1;
	public static final int DW_DLV_OK = (int)0;
	public static final int DW_DLE_INCDIR_ALLOC = (int)68;
	public static final int DW_DLE_WEAK_CONTEXT_NULL = (int)175;
	public static final int DW_DLE_LINE_CONTEXT_INDEX_WRONG = (int)306;
	public static final int DW_DLE_BAD_MACRO_INDEX = (int)323;
	public static final int DW_DLE_READ_LITTLEENDIAN_ERROR = (int)331;
	public static final int DW_DLA_GNU_INDEX_HEAD = (int)0x35;
	public static final int DW_ENDIAN_UNKNOWN = (int)0;
	public static final int DW_DLA_LOCDESC = (int)0x03;
	public static final String DW_CIE_AUGMENTER_STRING_V0 = (String)"z";
	public static final int DW_DLE_GROUPNUMBER_ERROR = (int)370;
	public static final int DW_DLE_SIBLING_LIST_IMPROPER = (int)355;
	public static final int DW_DLE_WRONG_TAG = (int)78;
	public static final int DW_DLS_BACKWARD = (int)-1;
	public static final int DW_DLE_DEBUG_MACRO_DUPLICATE = (int)296;
	public static final int DW_DLE_PRO_INIT_EXTRAS_ERR = (int)463;
	public static final int DW_DLE_DEBUG_ARANGES_DUPLICATE = (int)35;
	public static final int DW_DLE_IMPROPER_DWO_ID = (int)369;
	public static final int DW_DLE_NO_SIGNATURE_TO_LOOKUP = (int)300;
	public static final int DW_DLA_DIE = (int)0x08;
	public static final int DW_DLE_DEBUG_MACRO_LENGTH_BAD = (int)182;
	public static final int DW_LKIND_loclist = (int)1;
	public static final int DW_DLE_BAD_TYPE_SIZE = (int)425;
	public static final int DW_DLE_STRING_ALLOC = (int)69;
	public static final int DW_DLE_MISSING_REQUIRED_CU_OFFSET_HASH = (int)291;
	public static final int DW_DLE_INCL_DIR_NUM_BAD = (int)60;
	public static final int DW_DLE_DUPLICATE_GNU_DEBUG_PUBTYPES = (int)475;
	public static final int DW_DLC_ELF_OFFSET_SIZE_32 = (int)0x00400000;
	public static final int DW_DLE_DEBUG_RANGES_MISSING_END = (int)207;
	public static final int DW_DLE_BAD_REF_SIG8_FORM = (int)223;
	public static final int DW_DLE_ARANGE_OFFSET_BAD = (int)134;
	public static final int DW_DLE_DEBUG_WEAKNAMES_NULL = (int)171;
	public static final String DW_PR_XZEROS = (String)"08";
	public static final int DW_DLE_LINE_HEADER_LENGTH_BOTCH = (int)384;
	public static final int DW_DLE_INPUT_ATTR_BAD = (int)143;
	public static final int DW_DLE_BAD_ABINAME = (int)244;
	public static final int DW_DLE_DEBUG_NAMES_PAD_NON_ZERO = (int)374;
	public static final int DW_DLE_NOT_REF_FORM = (int)226;
	public static final int DW_DLE_VAR_NULL = (int)168;
	public static final int DW_DLE_GROUP_MAP_ALLOC = (int)387;
	public static final int DW_DLE_DEBUG_FUNCNAMES_VERSION_ERROR = (int)154;
	public static final int DW_DLE_DEBUG_PUBNAMES_NULL = (int)44;
	public static final int DW_DLE_DEBUG_TYPENAMES_NULL = (int)159;
	public static final int DW_DLE_OFFSET_BAD = (int)131;
	public static final int DW_DLE_DEBUG_STRTAB_ERR = (int)210;
	public static final int DW_FRAME_CFA_COL3 = (int)1436;
	public static final int DW_DLE_AT_FIXUP_DUP = (int)243;
	public static final int DW_DLC_OFFSET32 = (int)0x00010000;
	public static final int DW_DLE_DEBUG_TYPES_NULL = (int)236;
	public static final int DW_DLE_ATTR_EXPRLOC_FORM_BAD = (int)224;
	public static final int DW_DLE_REL_ALLOC = (int)133;
	public static final int DW_DLE_RELOC_SECTION_MISSING_INDEX = (int)215;
	public static final int DW_DLE_ERRONEOUS_XU_INDEX_SECTION = (int)345;
	public static final int DW_DLE_RELOC_SECTION_RELOC_TARGET_SIZE_UNKNOWN = (int)233;
	public static final int DW_DLE_RELOCS_ERROR = (int)280;
	public static final int DW_DLE_DUPLICATE_GNU_DEBUG_PUBNAMES = (int)474;
	public static final int DW_DLE_NLS = (int)5;
	public static final int DW_DLE_ABBREV_DECODE_ERROR = (int)109;
	public static final int DW_DLE_MACINFO_STRING_EMPTY = (int)178;
	public static final int DW_DLE_DEBUG_MACRO_INCONSISTENT = (int)186;
	public static final int DW_DLE_NEXT_DIE_LOW_ERROR = (int)284;
	public static final int DW_FISSION_SECT_COUNT = (int)12;
	public static final int DW_DLA_DSC_HEAD = (int)0x3e;
	public static final int DW_DLE_DEBUG_RNGLISTS_DUPLICATE = (int)359;
	public static final int DW_DLE_ELF_SECTION_COUNT_MISMATCH = (int)442;
	public static final int DW_DLE_FUNC_NULL = (int)156;
	public static final int DW_DLE_NO_TAG_FOR_DIE = (int)395;
	public static final int DW_DLE_ILLOGICAL_TSEARCH = (int)349;
	public static final int DW_DLE_DEBUGSTR_UNEXPECTED_REL = (int)352;
	public static final int DW_DLE_FORM_SEC_OFFSET_LENGTH_BAD = (int)225;
	public static final int DW_DLE_GDBINDEX_STRING_ERROR = (int)471;
	public static final int DW_DLV_ERROR = (int)1;
	public static final int DW_DLE_PUBNAMES_LENGTH_BAD = (int)124;
	public static final int DW_DLE_DEBUG_FRAME_POSSIBLE_ADDRESS_BOTCH = (int)229;
	public static final int DW_DLE_LINE_CONTEXT_BOTCH = (int)305;
	public static final int DW_DLE_DEBUG_LINE_STR_DUPLICATE = (int)298;
	public static final int DW_DLE_SECTION_ERROR = (int)248;
	public static final int DW_DLE_FRAME_CIE_DECODE_ERROR = (int)200;
	public static final int DW_DLE_DF_MAKE_INSTR_NO_INIT = (int)189;
	public static final int DW_DLE_TYPENAMES_ERROR = (int)277;
	public static final int DW_DLE_DEBUG_MACRO_INTERNAL_ERR = (int)184;
	public static final int DW_DLE_STR_OFFSETS_NULL_DBG = (int)403;
	public static final int DW_DLE_GROUP_LOAD_ERROR = (int)391;
	public static final int DW_DLE_ATTR_FORM_OFFSET_BAD = (int)119;
	public static final int DW_DLE_DEBUG_ABBREV_NULL = (int)34;
	public static final int DW_DLE_INTERFACE_NOT_SUPPORTED = (int)313;
	public static final int DW_DLE_ORPHAN_FDE = (int)221;
	public static final int DW_DLE_DEBUG_WEAKNAMES_DUPLICATE = (int)170;
	public static final int DW_DLE_XU_HASH_INDEX_ERROR = (int)272;
	public static final int DW_DLC_READ = (int)0;
	public static final int DW_DLE_DIR_INDEX_BAD = (int)127;
	public static final int DW_DLE_DEBUG_LOC_SECTION_SHORT = (int)194;
	public static final int DW_DLE_WRONG_ADDRESS = (int)76;
	public static final int DW_DLE_EOLL = (int)17;
	public static final int DW_DLE_ATTR_NO_CU_CONTEXT = (int)115;
	public static final int DW_DLE_LOCLISTS_ERROR = (int)469;
	public static final int DW_DLE_ARANGE_ERROR = (int)274;
	public static final int DW_DLE_OPEN_FAIL = (int)414;
	public static final int DW_DLE_CIE_DBG_NULL = (int)95;
	public static final int DW_DLC_IRIX_OFFSET64 = (int)0x00200000;
	public static final int DW_DLE_ELF_SECTION_LINK_ERROR = (int)440;
	public static final int DW_FTYPE_ARCHIVE = (int)4;
	public static final int DW_DLE_CU_DIE_NO_ABBREV_LIST = (int)256;
	public static final int DW_DLE_DWP_SIGNATURE_MISMATCH = (int)453;
	public static final int DW_DLE_PRO_INIT_EXTRAS_UNKNOWN = (int)462;
	public static final int DW_DLC_TARGET_LITTLEENDIAN = (int)0x00100000;
	public static final int DW_DLE_DUPLICATE_INST_BLOCK = (int)222;
	public static final int DW_DLC_TARGET_BIGENDIAN = (int)0x08000000;
	public static final int DW_DLE_NOB = (int)15;
	public static final int DW_DLE_LOC_EXPR_BAD = (int)128;
	public static final int DW_DLE_DF_POP_EMPTY_STACK = (int)191;
	public static final int DW_DLE_ARANGES_NULL = (int)138;
	public static final int DW_DLE_GDB_INDEX_COUNT_ADDR_ERROR = (int)263;
	public static final int DW_DLE_INTEGER_TOO_SMALL = (int)439;
	public static final int DW_DLA_ADDR = (int)0x1c;
	public static final int DW_DLE_DEBUG_NAMES_UNHANDLED_FORM = (int)381;
	public static final int DW_DLE_RELOC_SECTION_LENGTH_ODD = (int)216;
	public static final int DW_DLA_RANGES = (int)0x1d;
	public static final int DW_DLE_ELF_GETIDENT_ERROR = (int)148;
	public static final int DW_DLE_WEAKNAMES_ERROR = (int)279;
	public static final int DW_DLA_LINE = (int)0x09;
	public static final int DW_DLE_BADOFF = (int)19;
	public static final int DW_DLE_BAD_REF_FORM = (int)118;
	public static final int DW_DLE_LEB_OUT_ERROR = (int)354;
	public static final int DW_DLA_GDBINDEX = (int)0x37;
	public static final int DW_DLE_AUG_DATA_LENGTH_BAD = (int)393;
	public static final int DW_DLE_FORM_BLOCK_LENGTH_ERROR = (int)337;
	public static final int DW_DLE_MLE = (int)11;
	public static final int DW_DLE_MISSING_ELF64_SUPPORT = (int)220;
	public static final int DW_DLE_BAD_EXPR_OPCODE = (int)145;
	public static final int DW_DLE_DEBUG_FRAME_DUPLICATE = (int)107;
	public static final int DW_DLE_DEBUG_VARNAMES_NULL = (int)165;
	public static final int DW_EXPR_OFFSET = (int)0;
	public static final int DW_DLE_ELF_ENDIAN_BAD = (int)421;
	public static final int DW_DLE_RETURN_EMPTY_PUBNAMES_ERROR = (int)434;
	public static final int DW_DLE_WEAK_NULL = (int)174;
	public static final int DW_DLE_MISSING_REQUIRED_TU_OFFSET_HASH = (int)290;
	public static final int DW_DLE_ATTR_CORRUPT = (int)451;
	public static final int DW_DLE_MOF = (int)16;
	public static final int DW_DLE_LINE_TABLE_BAD = (int)357;
	public static final int DW_DLE_LOC_BAD_TERMINATION = (int)230;
	public static final int DW_DLE_DWP_SIBLING_ERROR = (int)293;
	public static final int DW_DLE_LINE_STRP_OFFSET_BAD = (int)326;
	public static final int DW_DLE_GNU_PUBNAMES_ERROR = (int)472;
	public static final int DW_DLE_LINE_FILE_NUM_BAD = (int)61;
	public static final int DW_DLE_LOCEXPR_OFF_SECTION_END = (int)343;
	public static final int DW_DLE_ATTR_FORM_NOT_DATA8 = (int)288;
	public static final int DW_DLE_LINE_HEADER_CORRUPT = (int)401;
	public static final int DW_DLE_STRING_PTR_NULL = (int)122;
	public static final int DW_DLE_STRING_OFF_END_PUBNAMES_LIKE = (int)363;
	public static final int DW_DLE_LOCLIST_INDEX_ERROR = (int)312;
	public static final int DW_DLE_NO_CALLBACK_FUNC = (int)63;
	public static final int DW_DLE_GDB_INDEX_INDEX_ERROR = (int)264;
	public static final int DW_DLE_DEBUG_NAMES_DUPLICATE = (int)297;
	public static final int DW_DLE_ERRONEOUS_GDB_INDEX_SECTION = (int)261;
	public static final int DW_DLE_USER_DECLARED_ERROR = (int)467;
	public static final int DW_DLE_LINE_CONTEXT_NULL = (int)102;
	public static final int DW_DLE_DUPLICATE_GNU_DEBUGLINK = (int)455;
	public static final int DW_DLE_PUBNAMES_ERROR = (int)275;
	public static final int DW_DLE_SIZE_WRAPAROUND = (int)348;
	public static final int DW_DLA_TYPE = (int)0x0b;
	public static final int DW_DLE_DEBUGFRAME_ERROR = (int)83;
	public static final int DW_DLE_ATTR_FORM_SIZE_BAD = (int)116;
	public static final int DW_DLE_DEBUG_FISSION_INCOMPLETE = (int)294;
	public static final int DW_DLC_STREAM_RELOCATIONS = (int)0x02000000;
	public static final int DW_DLE_DEBUG_NAMES_OFF_END = (int)375;
	public static final int DW_DLE_EXPR_NULL = (int)144;
	public static final int DW_DLE_DBG_ALLOC = (int)23;
	public static final int DW_DLE_ARANGE_DECODE_ERROR = (int)137;
	public static final int DW_DLE_CU_TYPE_MISSING = (int)309;
	public static final int DW_DLE_DEBUGPUBTYPES_ERROR = (int)241;
	public static final int DW_DLE_DEBUG_INFO_DUPLICATE = (int)31;
	public static final int DW_DLE_CORRUPT_NOTE_GNU_DEBUGID = (int)457;
	public static final int DW_DLA_FRAME_BLOCK = (int)0x17;
	public static final int DW_DLE_LNCT_CODE_UNKNOWN = (int)382;
	public static final int DW_DLE_LOCLIST_OFFSET_BAD = (int)356;
	public static final int DW_DLE_FSTAT_MODE_ERROR = (int)25;
	public static final int DW_DLE_CIE_NULL = (int)94;
	public static final int DW_DLE_DF_REG_NUM_TOO_HIGH = (int)188;
	public static final int DW_DLE_STR_OFFSETS_NULLARGUMENT = (int)402;
	public static final int DW_DLE_IMAGE_FILE_UNKNOWN_TYPE = (int)429;
	public static final int DW_DLA_LOC_BLOCK_C = (int)0x39;
	public static final int DW_DLE_DEBUG_LOC_NULL = (int)40;
	public static final int DW_DLE_ZLIB_SECTION_SHORT = (int)338;
	public static final int DW_DLE_FILE_WRONG_TYPE = (int)412;
	public static final int DW_FTYPE_ELF = (int)1;
	public static final int DW_HARMLESS_ERROR_CIRCULAR_LIST_DEFAULT_SIZE = (int)4;
	public static final int DW_FTYPE_PE = (int)3;
	public static final int DW_DLE_DEBUG_ARANGES_NULL = (int)36;
	public static final int DW_DLA_GLOBAL = (int)0x0d;
	public static final int DW_DLE_CU_LENGTH_ERROR = (int)47;
	public static final int DW_DLE_DEBUG_TYPENAMES_VERSION_ERROR = (int)160;
	public static final int DW_DLE_PRODUCER_CODE_NOT_AVAILABLE = (int)431;
	public static final int DW_DLE_READ_ERROR = (int)419;
	public static final int DW_DLE_LINE_STRING_BAD = (int)364;
	public static final int DW_DLE_REF_SIG8_NOT_HANDLED = (int)228;
	public static final int DW_DLE_ZDEBUG_REQUIRES_ZLIB = (int)314;
	public static final int DW_DLC_WRITE = (int)1;
	public static final int DW_DLE_PE_SIZE_SMALL = (int)426;
	public static final int DW_DLE_LINE_NUM_OPERANDS_BAD = (int)56;
	public static final int DW_DLE_FUNCNAMES_ERROR = (int)276;
	public static final int DW_DLE_STRING_NOT_TERMINATED = (int)303;
	public static final int DW_DLA_WEAK = (int)0x1b;
	public static final int DW_DLE_PC_NOT_IN_FDE_RANGE = (int)97;
	public static final int DW_DLA_FDE = (int)0x15;
	public static final int DW_DLE_MACRO_PAST_END = (int)325;
	public static final int DW_DLE_MULTIPLE_RELOC_IN_EXPR = (int)147;
	public static final int DW_DLA_LOC = (int)0x02;
	public static final int DW_DLA_LOCDESC_C = (int)0x3a;
	public static final int DW_DLE_DEBUG_MACINFO_NULL = (int)42;
	public static final int DW_DLE_STR_OFFSETS_VERSION_WRONG = (int)406;
	public static final int DW_DLE_GROUP_INTERNAL_ERROR = (int)390;
	public static final int DW_DLE_ATTR_ALLOC = (int)85;
	public static final int DW_DLE_ARANGE_LENGTH_BAD = (int)136;
	public static final int DW_DLE_READ_OFF_END = (int)445;
	public static final int DW_DLE_TYPE_CONTEXT_NULL = (int)163;
	public static final int DW_DLE_SYMTAB_SECTION_ENTRYSIZE_ZERO = (int)234;
	public static final int DW_DLE_DEBUG_CU_UNAVAILABLE_FOR_FORM = (int)250;
	public static final int DW_DLE_RELOC_SECTION_MISMATCH = (int)214;
	public static final int DW_DLE_SIBLING_OFFSET_WRONG = (int)413;
	public static final int DW_DLE_TAG_CORRUPT = (int)449;
	public static final int DW_DLE_MACINFO_INTERNAL_ERROR_SPACE = (int)179;
	public static final int DW_DLE_ATTR_FORM_NOT_ADDR_INDEX = (int)258;
	public static final int DW_DLE_GNU_OPCODE_ERROR = (int)240;
	public static final int DW_DLE_DEBUG_RANGES_DUPLICATE = (int)205;
	public static final int DW_DLA_DEBUG = (int)0x07;
	public static final int DW_DLC_SIZE_64 = (int)0x40000000;
	public static final int DW_DLE_BADBITC = (int)22;
	public static final int DW_DLE_DEBUG_TYPES_DUPLICATE = (int)237;
	public static final int DW_FRAME_SAME_VAL = (int)1035;
	public static final int DW_DLE_STRING_FORM_IMPROPER = (int)327;
	public static final int DW_DLE_STR_OFFSETS_BASE_WRONG_FORM = (int)398;
	public static final int DW_DLE_LOCATION_ERROR = (int)478;
	public static final int DW_DLE_NO_TIED_SIG_AVAILABLE = (int)302;
	public static final int DW_DLE_DEBUG_TYPENAMES_LENGTH_BAD = (int)161;
	public static final int DW_DLE_DEBUG_LOC_DUPLICATE = (int)39;
	public static final int DW_DLA_ABBREV = (int)0x12;
	public static final int DW_DLE_DEBUG_STR_NULL = (int)46;
	public static final int DW_DLE_PUBNAMES_VERSION_ERROR = (int)123;
	public static final int DW_DLE_SECT_ALLOC = (int)64;
	public static final int DW_DLE_DIE_LOC_EXPR_BAD = (int)129;
	public static final int DW_DLA_FUNC = (int)0x18;
	public static final int DW_DLE_BYTEOFF_ERR = (int)71;
	public static final int DW_DLE_RELOC_MISMATCH_INDEX = (int)211;
	public static final int DW_DLA_VAR = (int)0x1a;
	public static final int DW_DLE_DEBUG_PUBTYPES_LENGTH_BAD = (int)197;
	public static final int DW_DLE_NO_AT_MIPS_FDE = (int)149;
	public static final long DW_DLX_EH_OFFSET_UNAVAILABLE = (long)(-2L);
	public static final int DW_DLE_LOCLIST_INTERFACE_ERROR = (int)311;
	public static final int DW_HARMLESS_ERROR_MSG_STRING_SIZE = (int)300;
	public static final int DW_DLE_PATH_SIZE_TOO_SMALL = (int)424;
	public static final int DW_DLE_SECTION_INDEX_BAD = (int)438;
	public static final int DW_DLE_DIE_ABBREV_LIST_NULL = (int)151;
	public static final int DW_DLE_ADDRESS_SIZE_ZERO = (int)371;
	public static final int DW_REG_TABLE_SIZE = (int)66;
	public static final int DW_DLE_DIE_NULL = (int)52;
	public static final int DW_EXPR_VAL_EXPRESSION = (int)3;
	public static final int DW_DLE_ZDEBUG_INPUT_FORMAT_ODD = (int)315;
	public static final int DW_DLE_ABBREV_MISSING = (int)394;
	public static final int DW_DLE_VARNAMES_ERROR = (int)278;
	public static final int DW_FTYPE_MACH_O = (int)2;
	public static final int DW_DLE_MACH_O_SEGOFFSET_BAD = (int)416;
	public static final int DW_DLE_DEBUG_SUP_DUPLICATE = (int)299;
	public static final int DW_DLE_CHUNK_ALLOC = (int)70;
	public static final int DW_DLE_TYPE_NULL = (int)162;
	public static final int DW_DLA_XU_INDEX = (int)0x38;
	public static final int DW_DLE_LINE_OFFSET_WRONG_FORM = (int)336;
	public static final int DW_DLE_DEBUG_RANGES_OUT_OF_MEM = (int)208;
	public static final int DW_DLE_ATRUNC = (int)21;
	public static final int DW_DLE_ADDRESS_SIZE_ERROR = (int)50;
	public static final int DW_FRAME_UNDEFINED_VAL = (int)1034;
	public static final int DW_DLC_SYMBOLIC_RELOCATIONS = (int)0x04000000;
	public static final int DW_DLE_MACRO_OPCODE_FORM_BAD = (int)320;
	public static final int DW_LKIND_loclists = (int)5;
	public static final int DW_DLE_LINE_EXT_OPCODE_BAD = (int)58;
	public static final long DW_DLX_NO_EH_OFFSET = (long)(-1L);
	public static final int DW_DLA_ERROR = (int)0x0e;
	public static final int DW_DLC_SIZE_32 = (int)0x20000000;
	public static final int DW_DLE_LINE_ALLOC = (int)66;
	public static final int DW_DLE_READ_BIGENDIAN_ERROR = (int)332;
	public static final int DW_DLE_SECTION_STRING_OFFSET_BAD = (int)437;
	public static final int DW_DLE_DF_ALLOC_FAIL = (int)192;
	public static final int DW_DLE_ZLIB_BUF_ERROR = (int)316;
	public static final int DW_DLE_FDE_NULL = (int)92;
	public static final int DW_DLE_FIRST_DIE_NOT_CU = (int)105;
	public static final int DW_LKIND_GNU_exp_list = (int)2;
	public static final int DW_DLE_DEBUG_LINE_RANGE_ZERO = (int)330;
	public static final int DW_DLE_DEBUG_MACINFO_DUPLICATE = (int)41;
	public static final int DW_DLE_FISSION_VERSION_ERROR = (int)283;
	public static final int DW_DLE_ATTR_FORM_BAD = (int)114;
	public static final int DW_DLE_RELOC_INVALID = (int)333;
	public static final int DW_DLE_IOF = (int)7;
	public static final int DW_DLE_DUPLICATE_CU_INDEX = (int)266;
	public static final int DW_DLE_RELOC_MISMATCH_STRTAB_INDEX = (int)213;
	public static final int DW_DLE_STRP_OFFSET_BAD = (int)204;
	public static final int DW_DLE_PE_STRING_TOO_LONG = (int)428;
	public static final int DW_DLE_DEBUG_LOClISTS_DUPLICATE = (int)358;
	public static final int DW_DLE_RELOC_SECTION_PTR_NULL = (int)217;
	public static final int DW_DLE_CORRUPT_GNU_DEBUGID_SIZE = (int)458;
	public static final int DW_DLE_GROUP_LOAD_READ_ERROR = (int)392;
	public static final int DW_DLC_POINTER32 = (int)0x20000000;
	public static final int DW_DLE_STR_OFFSETS_ARRAY_INDEX_WRONG = (int)407;
	public static final int DW_FRAME_REG_INITIAL_VALUE = (int)1035;
	public static final int DW_DLE_DEBUG_INFO_PTR_NULL = (int)51;
	public static final int DW_DLE_LO_USER = (int)0x10000;
	public static final int DW_DLE_DF_NO_CIE_AUGMENTATION = (int)187;
	public static final int DW_DLE_DATA16_OUTSIDE_SECTION = (int)399;
	public static final int DW_DLE_MISSING_NEEDED_DEBUG_ADDR_SECTION = (int)257;
	public static final int DW_DLE_SECTION_SIZE_OR_OFFSET_LARGE = (int)470;
	public static final int DW_DLE_FRAME_TABLE_COL_BAD = (int)96;
	public static final int DW_FTYPE_UNKNOWN = (int)0;
	public static final int DW_EXPR_VAL_OFFSET = (int)1;
	public static final int DW_DLA_ELLIST = (int)0x04;
	public static final int DW_DLA_BOUNDS = (int)0x05;
	public static final int DW_DLA_SUBSCR = (int)0x0c;
	public static final int DW_DLE_FDE_DBG_NULL = (int)93;
	public static final int DW_DLE_SECTION_SIZE_ERROR = (int)435;
	public static final int DW_DLE_DIE_BAD = (int)112;
	public static final int DW_DLE_DEBUGMACINFO_ERROR = (int)181;
	public static final int DW_GROUPNUMBER_ANY = (int)0;
	public static final int DW_DLE_ARANGES_HEADER_ERROR = (int)335;
	public static final int DW_DLE_NEXT_DIE_WRONG_FORM = (int)253;
	public static final int DW_DLE_RELOC_MISMATCH_RELOC_INDEX = (int)212;
	public static final int DW_DLC_POINTER64 = (int)0x40000000;
	public static final int DW_DLE_ALLOC_FAIL = (int)62;
	public static final int DW_DLE_FRAME_VERSION_BAD = (int)90;
	public static final int DW_DLE_DEBUG_NAMES_BAD_INDEX_ARG = (int)379;
	public static final int DW_DLE_LINE_SET_ADDR_ERROR = (int)57;
	public static final int DW_DLE_ABBREV_ATTR_DUPLICATION = (int)452;
	public static final int DW_DLE_INIT_ACCESS_WRONG = (int)26;
	public static final int DW_DLE_DEBUG_SUP_ERROR = (int)477;
	public static final int DW_DLE_OFFSET_SIZE = (int)415;
	public static final int DW_DLE_NEXT_DIE_NO_ABBREV_LIST = (int)254;
	public static final int DW_ENDIAN_BIG = (int)1;
	public static final int DW_DLE_LOCDESC_COUNT_WRONG = (int)176;
	public static final int DW_DLE_DEBUG_VARNAMES_LENGTH_BAD = (int)167;
	public static final int DW_DLE_DEBUG_NAMES_ABBREV_CORRUPTION = (int)377;
	public static final int DW_DLE_TOO_MANY_DEBUG = (int)245;
	public static final int DW_DLA_LOC_HEAD_C = (int)0x3b;
	public static final int DW_DLE_ELF_SECT_ERR = (int)88;
	public static final int DW_EXPR_EXPRESSION = (int)2;
	public static final int DW_DLE_PUBTYPE_CONTEXT = (int)196;
	public static final int DW_DLE_GDB_INDEX_COUNT_ERROR = (int)262;
	public static final int DW_DLE_NO_ELF_SUPPORT = (int)432;
	public static final int DW_DLE_DWARF_LINE_NULL = (int)59;
	public static final int DW_DLE_EXTRA_NEIGHBORS = (int)77;
	public static final int DW_DLE_CORRUPT_GNU_DEBUGLINK = (int)456;
	public static final int DW_DLE_NO_TIED_STRING_AVAILABLE = (int)307;
	public static final int DW_DLE_OFFSET_UFLW = (int)87;
	public static final int DW_DLC_OFFSET_SIZE_64 = (int)0x10000000;
	public static final int DW_DLE_FDE_INSTR_PTR_ERROR = (int)340;
	public static final int DW_DLE_HEADER_LEN_BIGGER_THAN_SECSIZE = (int)342;
	public static final int DW_DLE_FRAME_REGISTER_UNREPRESENTABLE = (int)201;
	public static final int DW_DLE_FAILSAFE_ERRVAL = (int)273;

	// constants from dwarf.h
	public static final int DW_TAG_array_type = (int)0x01;
	public static final int DW_TAG_class_type = (int)0x02;
	public static final int DW_TAG_entry_point = (int)0x03;
	public static final int DW_TAG_enumeration_type = (int)0x04;
	public static final int DW_TAG_formal_parameter = (int)0x05;
	public static final int DW_TAG_imported_declaration = (int)0x08;
	public static final int DW_TAG_label = (int)0x0a;
	public static final int DW_TAG_lexical_block = (int)0x0b;
	public static final int DW_TAG_member = (int)0x0d;
	public static final int DW_TAG_pointer_type = (int)0x0f;
	public static final int DW_TAG_reference_type = (int)0x10;
	public static final int DW_TAG_compile_unit = (int)0x11;
	public static final int DW_TAG_string_type = (int)0x12;
	public static final int DW_TAG_structure_type = (int)0x13;
	public static final int DW_TAG_subroutine_type = (int)0x15;
	public static final int DW_TAG_typedef = (int)0x16;
	public static final int DW_TAG_union_type = (int)0x17;
	public static final int DW_TAG_unspecified_parameters = (int)0x18;
	public static final int DW_TAG_variant = (int)0x19;
	public static final int DW_TAG_common_block = (int)0x1a;
	public static final int DW_TAG_common_inclusion = (int)0x1b;
	public static final int DW_TAG_inheritance = (int)0x1c;
	public static final int DW_TAG_inlined_subroutine = (int)0x1d;
	public static final int DW_TAG_module = (int)0x1e;
	public static final int DW_TAG_ptr_to_member_type = (int)0x1f;
	public static final int DW_TAG_set_type = (int)0x20;
	public static final int DW_TAG_subrange_type = (int)0x21;
	public static final int DW_TAG_with_stmt = (int)0x22;
	public static final int DW_TAG_access_declaration = (int)0x23;
	public static final int DW_TAG_base_type = (int)0x24;
	public static final int DW_TAG_catch_block = (int)0x25;
	public static final int DW_TAG_const_type = (int)0x26;
	public static final int DW_TAG_constant = (int)0x27;
	public static final int DW_TAG_enumerator = (int)0x28;
	public static final int DW_TAG_file_type = (int)0x29;
	public static final int DW_TAG_friend = (int)0x2a;
	public static final int DW_TAG_namelist = (int)0x2b;
	public static final int DW_TAG_namelist_item = (int)0x2c;
	public static final int DW_TAG_namelist_items = (int)0x2c;
	public static final int DW_TAG_packed_type = (int)0x2d;
	public static final int DW_TAG_subprogram = (int)0x2e;
	public static final int DW_TAG_template_type_parameter = (int)0x2f;
	public static final int DW_TAG_template_type_param = (int)0x2f;
	public static final int DW_TAG_template_value_parameter = (int)0x30;
	public static final int DW_TAG_template_value_param = (int)0x30;
	public static final int DW_TAG_thrown_type = (int)0x31;
	public static final int DW_TAG_try_block = (int)0x32;
	public static final int DW_TAG_variant_part = (int)0x33;
	public static final int DW_TAG_variable = (int)0x34;
	public static final int DW_TAG_volatile_type = (int)0x35;
	public static final int DW_TAG_dwarf_procedure = (int)0x36;
	public static final int DW_TAG_restrict_type = (int)0x37;
	public static final int DW_TAG_interface_type = (int)0x38;
	public static final int DW_TAG_namespace = (int)0x39;
	public static final int DW_TAG_imported_module = (int)0x3a;
	public static final int DW_TAG_unspecified_type = (int)0x3b;
	public static final int DW_TAG_partial_unit = (int)0x3c;
	public static final int DW_TAG_imported_unit = (int)0x3d;
	public static final int DW_TAG_mutable_type = (int)0x3e;
	public static final int DW_TAG_condition = (int)0x3f;
	public static final int DW_TAG_shared_type = (int)0x40;
	public static final int DW_TAG_type_unit = (int)0x41;
	public static final int DW_TAG_rvalue_reference_type = (int)0x42;
	public static final int DW_TAG_template_alias = (int)0x43;
	public static final int DW_TAG_coarray_type = (int)0x44;
	public static final int DW_TAG_generic_subrange = (int)0x45;
	public static final int DW_TAG_dynamic_type = (int)0x46;
	public static final int DW_TAG_atomic_type = (int)0x47;
	public static final int DW_TAG_call_site = (int)0x48;
	public static final int DW_TAG_call_site_parameter = (int)0x49;
	public static final int DW_TAG_skeleton_unit = (int)0x4a;
	public static final int DW_TAG_immutable_type = (int)0x4b;
	public static final int DW_TAG_lo_user = (int)0x4080;
	public static final int DW_TAG_MIPS_loop = (int)0x4081;
	public static final int DW_TAG_HP_array_descriptor = (int)0x4090;
	public static final int DW_TAG_format_label = (int)0x4101;
	public static final int DW_TAG_function_template = (int)0x4102;
	public static final int DW_TAG_class_template = (int)0x4103;
	public static final int DW_TAG_GNU_BINCL = (int)0x4104;
	public static final int DW_TAG_GNU_EINCL = (int)0x4105;
	public static final int DW_TAG_GNU_template_template_parameter = (int)0x4106;
	public static final int DW_TAG_GNU_template_template_param = (int)0x4106;
	public static final int DW_TAG_GNU_template_parameter_pack = (int)0x4107;
	public static final int DW_TAG_GNU_formal_parameter_pack = (int)0x4108;
	public static final int DW_TAG_GNU_call_site = (int)0x4109;
	public static final int DW_TAG_GNU_call_site_parameter = (int)0x410a;
	public static final int DW_TAG_ALTIUM_circ_type = (int)0x5101;
	public static final int DW_TAG_ALTIUM_mwa_circ_type = (int)0x5102;
	public static final int DW_TAG_ALTIUM_rev_carry_type = (int)0x5103;
	public static final int DW_TAG_ALTIUM_rom = (int)0x5111;
	public static final int DW_TAG_upc_shared_type = (int)0x8765;
	public static final int DW_TAG_upc_strict_type = (int)0x8766;
	public static final int DW_TAG_upc_relaxed_type = (int)0x8767;
	public static final int DW_TAG_PGI_kanji_type = (int)0xa000;
	public static final int DW_TAG_PGI_interface_block = (int)0xa020;
	public static final int DW_TAG_SUN_function_template = (int)0x4201;
	public static final int DW_TAG_SUN_class_template = (int)0x4202;
	public static final int DW_TAG_SUN_struct_template = (int)0x4203;
	public static final int DW_TAG_SUN_union_template = (int)0x4204;
	public static final int DW_TAG_SUN_indirect_inheritance = (int)0x4205;
	public static final int DW_TAG_SUN_codeflags = (int)0x4206;
	public static final int DW_TAG_SUN_memop_info = (int)0x4207;
	public static final int DW_TAG_SUN_omp_child_func = (int)0x4208;
	public static final int DW_TAG_SUN_rtti_descriptor = (int)0x4209;
	public static final int DW_TAG_SUN_dtor_info = (int)0x420a;
	public static final int DW_TAG_SUN_dtor = (int)0x420b;
	public static final int DW_TAG_SUN_f90_interface = (int)0x420c;
	public static final int DW_TAG_SUN_fortran_vax_structure = (int)0x420d;
	public static final int DW_TAG_SUN_hi = (int)0x42ff;
	public static final int DW_TAG_hi_user = (int)0xffff;
	public static final int DW_children_no = (int)0;
	public static final int DW_children_yes = (int)1;
	public static final int DW_FORM_addr = (int)0x01;
	public static final int DW_FORM_block2 = (int)0x03;
	public static final int DW_FORM_block4 = (int)0x04;
	public static final int DW_FORM_data2 = (int)0x05;
	public static final int DW_FORM_data4 = (int)0x06;
	public static final int DW_FORM_data8 = (int)0x07;
	public static final int DW_FORM_string = (int)0x08;
	public static final int DW_FORM_block = (int)0x09;
	public static final int DW_FORM_block1 = (int)0x0a;
	public static final int DW_FORM_data1 = (int)0x0b;
	public static final int DW_FORM_flag = (int)0x0c;
	public static final int DW_FORM_sdata = (int)0x0d;
	public static final int DW_FORM_strp = (int)0x0e;
	public static final int DW_FORM_udata = (int)0x0f;
	public static final int DW_FORM_ref_addr = (int)0x10;
	public static final int DW_FORM_ref1 = (int)0x11;
	public static final int DW_FORM_ref2 = (int)0x12;
	public static final int DW_FORM_ref4 = (int)0x13;
	public static final int DW_FORM_ref8 = (int)0x14;
	public static final int DW_FORM_ref_udata = (int)0x15;
	public static final int DW_FORM_indirect = (int)0x16;
	public static final int DW_FORM_sec_offset = (int)0x17;
	public static final int DW_FORM_exprloc = (int)0x18;
	public static final int DW_FORM_flag_present = (int)0x19;
	public static final int DW_FORM_strx = (int)0x1a;
	public static final int DW_FORM_addrx = (int)0x1b;
	public static final int DW_FORM_ref_sup4 = (int)0x1c;
	public static final int DW_FORM_strp_sup = (int)0x1d;
	public static final int DW_FORM_data16 = (int)0x1e;
	public static final int DW_FORM_line_strp = (int)0x1f;
	public static final int DW_FORM_ref_sig8 = (int)0x20;
	public static final int DW_FORM_implicit_const = (int)0x21;
	public static final int DW_FORM_loclistx = (int)0x22;
	public static final int DW_FORM_rnglistx = (int)0x23;
	public static final int DW_FORM_ref_sup8 = (int)0x24;
	public static final int DW_FORM_strx1 = (int)0x25;
	public static final int DW_FORM_strx2 = (int)0x26;
	public static final int DW_FORM_strx3 = (int)0x27;
	public static final int DW_FORM_strx4 = (int)0x28;
	public static final int DW_FORM_addrx1 = (int)0x29;
	public static final int DW_FORM_addrx2 = (int)0x2a;
	public static final int DW_FORM_addrx3 = (int)0x2b;
	public static final int DW_FORM_addrx4 = (int)0x2c;
	public static final int DW_FORM_GNU_addr_index = (int)0x1f01;
	public static final int DW_FORM_GNU_str_index = (int)0x1f02;
	public static final int DW_FORM_GNU_ref_alt = (int)0x1f20;
	public static final int DW_FORM_GNU_strp_alt = (int)0x1f21;
	public static final int DW_AT_sibling = (int)0x01;
	public static final int DW_AT_location = (int)0x02;
	public static final int DW_AT_name = (int)0x03;
	public static final int DW_AT_ordering = (int)0x09;
	public static final int DW_AT_subscr_data = (int)0x0a;
	public static final int DW_AT_byte_size = (int)0x0b;
	public static final int DW_AT_bit_offset = (int)0x0c;
	public static final int DW_AT_bit_size = (int)0x0d;
	public static final int DW_AT_element_list = (int)0x0f;
	public static final int DW_AT_stmt_list = (int)0x10;
	public static final int DW_AT_low_pc = (int)0x11;
	public static final int DW_AT_high_pc = (int)0x12;
	public static final int DW_AT_language = (int)0x13;
	public static final int DW_AT_member = (int)0x14;
	public static final int DW_AT_discr = (int)0x15;
	public static final int DW_AT_discr_value = (int)0x16;
	public static final int DW_AT_visibility = (int)0x17;
	public static final int DW_AT_import = (int)0x18;
	public static final int DW_AT_string_length = (int)0x19;
	public static final int DW_AT_common_reference = (int)0x1a;
	public static final int DW_AT_comp_dir = (int)0x1b;
	public static final int DW_AT_const_value = (int)0x1c;
	public static final int DW_AT_containing_type = (int)0x1d;
	public static final int DW_AT_default_value = (int)0x1e;
	public static final int DW_AT_inline = (int)0x20;
	public static final int DW_AT_is_optional = (int)0x21;
	public static final int DW_AT_lower_bound = (int)0x22;
	public static final int DW_AT_producer = (int)0x25;
	public static final int DW_AT_prototyped = (int)0x27;
	public static final int DW_AT_return_addr = (int)0x2a;
	public static final int DW_AT_start_scope = (int)0x2c;
	public static final int DW_AT_bit_stride = (int)0x2e;
	public static final int DW_AT_stride_size = (int)0x2e;
	public static final int DW_AT_upper_bound = (int)0x2f;
	public static final int DW_AT_abstract_origin = (int)0x31;
	public static final int DW_AT_accessibility = (int)0x32;
	public static final int DW_AT_address_class = (int)0x33;
	public static final int DW_AT_artificial = (int)0x34;
	public static final int DW_AT_base_types = (int)0x35;
	public static final int DW_AT_calling_convention = (int)0x36;
	public static final int DW_AT_count = (int)0x37;
	public static final int DW_AT_data_member_location = (int)0x38;
	public static final int DW_AT_decl_column = (int)0x39;
	public static final int DW_AT_decl_file = (int)0x3a;
	public static final int DW_AT_decl_line = (int)0x3b;
	public static final int DW_AT_declaration = (int)0x3c;
	public static final int DW_AT_discr_list = (int)0x3d;
	public static final int DW_AT_encoding = (int)0x3e;
	public static final int DW_AT_external = (int)0x3f;
	public static final int DW_AT_frame_base = (int)0x40;
	public static final int DW_AT_friend = (int)0x41;
	public static final int DW_AT_identifier_case = (int)0x42;
	public static final int DW_AT_macro_info = (int)0x43;
	public static final int DW_AT_namelist_item = (int)0x44;
	public static final int DW_AT_priority = (int)0x45;
	public static final int DW_AT_segment = (int)0x46;
	public static final int DW_AT_specification = (int)0x47;
	public static final int DW_AT_static_link = (int)0x48;
	public static final int DW_AT_type = (int)0x49;
	public static final int DW_AT_use_location = (int)0x4a;
	public static final int DW_AT_variable_parameter = (int)0x4b;
	public static final int DW_AT_virtuality = (int)0x4c;
	public static final int DW_AT_vtable_elem_location = (int)0x4d;
	public static final int DW_AT_allocated = (int)0x4e;
	public static final int DW_AT_associated = (int)0x4f;
	public static final int DW_AT_data_location = (int)0x50;
	public static final int DW_AT_byte_stride = (int)0x51;
	public static final int DW_AT_stride = (int)0x51;
	public static final int DW_AT_entry_pc = (int)0x52;
	public static final int DW_AT_use_UTF8 = (int)0x53;
	public static final int DW_AT_extension = (int)0x54;
	public static final int DW_AT_ranges = (int)0x55;
	public static final int DW_AT_trampoline = (int)0x56;
	public static final int DW_AT_call_column = (int)0x57;
	public static final int DW_AT_call_file = (int)0x58;
	public static final int DW_AT_call_line = (int)0x59;
	public static final int DW_AT_description = (int)0x5a;
	public static final int DW_AT_binary_scale = (int)0x5b;
	public static final int DW_AT_decimal_scale = (int)0x5c;
	public static final int DW_AT_small = (int)0x5d;
	public static final int DW_AT_decimal_sign = (int)0x5e;
	public static final int DW_AT_digit_count = (int)0x5f;
	public static final int DW_AT_picture_string = (int)0x60;
	public static final int DW_AT_mutable = (int)0x61;
	public static final int DW_AT_threads_scaled = (int)0x62;
	public static final int DW_AT_explicit = (int)0x63;
	public static final int DW_AT_object_pointer = (int)0x64;
	public static final int DW_AT_endianity = (int)0x65;
	public static final int DW_AT_elemental = (int)0x66;
	public static final int DW_AT_pure = (int)0x67;
	public static final int DW_AT_recursive = (int)0x68;
	public static final int DW_AT_signature = (int)0x69;
	public static final int DW_AT_main_subprogram = (int)0x6a;
	public static final int DW_AT_data_bit_offset = (int)0x6b;
	public static final int DW_AT_const_expr = (int)0x6c;
	public static final int DW_AT_enum_class = (int)0x6d;
	public static final int DW_AT_linkage_name = (int)0x6e;
	public static final int DW_AT_string_length_bit_size = (int)0x6f;
	public static final int DW_AT_string_length_byte_size = (int)0x70;
	public static final int DW_AT_rank = (int)0x71;
	public static final int DW_AT_str_offsets_base = (int)0x72;
	public static final int DW_AT_addr_base = (int)0x73;
	public static final int DW_AT_rnglists_base = (int)0x74;
	public static final int DW_AT_dwo_id = (int)0x75;
	public static final int DW_AT_dwo_name = (int)0x76;
	public static final int DW_AT_reference = (int)0x77;
	public static final int DW_AT_rvalue_reference = (int)0x78;
	public static final int DW_AT_macros = (int)0x79;
	public static final int DW_AT_call_all_calls = (int)0x7a;
	public static final int DW_AT_call_all_source_calls = (int)0x7b;
	public static final int DW_AT_call_all_tail_calls = (int)0x7c;
	public static final int DW_AT_call_return_pc = (int)0x7d;
	public static final int DW_AT_call_value = (int)0x7e;
	public static final int DW_AT_call_origin = (int)0x7f;
	public static final int DW_AT_call_parameter = (int)0x80;
	public static final int DW_AT_call_pc = (int)0x81;
	public static final int DW_AT_call_tail_call = (int)0x82;
	public static final int DW_AT_call_target = (int)0x83;
	public static final int DW_AT_call_target_clobbered = (int)0x84;
	public static final int DW_AT_call_data_location = (int)0x85;
	public static final int DW_AT_call_data_value = (int)0x86;
	public static final int DW_AT_noreturn = (int)0x87;
	public static final int DW_AT_alignment = (int)0x88;
	public static final int DW_AT_export_symbols = (int)0x89;
	public static final int DW_AT_deleted = (int)0x8a;
	public static final int DW_AT_defaulted = (int)0x8b;
	public static final int DW_AT_loclists_base = (int)0x8c;
	public static final int DW_AT_HP_block_index = (int)0x2000;
	public static final int DW_AT_lo_user = (int)0x2000;
	public static final int DW_AT_MIPS_fde = (int)0x2001;
	public static final int DW_AT_MIPS_loop_begin = (int)0x2002;
	public static final int DW_AT_MIPS_tail_loop_begin = (int)0x2003;
	public static final int DW_AT_MIPS_epilog_begin = (int)0x2004;
	public static final int DW_AT_MIPS_loop_unroll_factor = (int)0x2005;
	public static final int DW_AT_MIPS_software_pipeline_depth = (int)0x2006;
	public static final int DW_AT_MIPS_linkage_name = (int)0x2007;
	public static final int DW_AT_MIPS_stride = (int)0x2008;
	public static final int DW_AT_MIPS_abstract_name = (int)0x2009;
	public static final int DW_AT_MIPS_clone_origin = (int)0x200a;
	public static final int DW_AT_MIPS_has_inlines = (int)0x200b;
	public static final int DW_AT_MIPS_stride_byte = (int)0x200c;
	public static final int DW_AT_MIPS_stride_elem = (int)0x200d;
	public static final int DW_AT_MIPS_ptr_dopetype = (int)0x200e;
	public static final int DW_AT_MIPS_allocatable_dopetype = (int)0x200f;
	public static final int DW_AT_MIPS_assumed_shape_dopetype = (int)0x2010;
	public static final int DW_AT_MIPS_assumed_size = (int)0x2011;
	public static final int DW_AT_HP_unmodifiable = (int)0x2001;
	public static final int DW_AT_HP_actuals_stmt_list = (int)0x2010;
	public static final int DW_AT_HP_proc_per_section = (int)0x2011;
	public static final int DW_AT_HP_raw_data_ptr = (int)0x2012;
	public static final int DW_AT_HP_pass_by_reference = (int)0x2013;
	public static final int DW_AT_HP_opt_level = (int)0x2014;
	public static final int DW_AT_HP_prof_version_id = (int)0x2015;
	public static final int DW_AT_HP_opt_flags = (int)0x2016;
	public static final int DW_AT_HP_cold_region_low_pc = (int)0x2017;
	public static final int DW_AT_HP_cold_region_high_pc = (int)0x2018;
	public static final int DW_AT_HP_all_variables_modifiable = (int)0x2019;
	public static final int DW_AT_HP_linkage_name = (int)0x201a;
	public static final int DW_AT_HP_prof_flags = (int)0x201b;
	public static final int DW_AT_CPQ_discontig_ranges = (int)0x2001;
	public static final int DW_AT_CPQ_semantic_events = (int)0x2002;
	public static final int DW_AT_CPQ_split_lifetimes_var = (int)0x2003;
	public static final int DW_AT_CPQ_split_lifetimes_rtn = (int)0x2004;
	public static final int DW_AT_CPQ_prologue_length = (int)0x2005;
	public static final int DW_AT_INTEL_other_endian = (int)0x2026;
	public static final int DW_AT_sf_names = (int)0x2101;
	public static final int DW_AT_src_info = (int)0x2102;
	public static final int DW_AT_mac_info = (int)0x2103;
	public static final int DW_AT_src_coords = (int)0x2104;
	public static final int DW_AT_body_begin = (int)0x2105;
	public static final int DW_AT_body_end = (int)0x2106;
	public static final int DW_AT_GNU_vector = (int)0x2107;
	public static final int DW_AT_GNU_guarded_by = (int)0x2108;
	public static final int DW_AT_GNU_pt_guarded_by = (int)0x2109;
	public static final int DW_AT_GNU_guarded = (int)0x210a;
	public static final int DW_AT_GNU_pt_guarded = (int)0x210b;
	public static final int DW_AT_GNU_locks_excluded = (int)0x210c;
	public static final int DW_AT_GNU_exclusive_locks_required = (int)0x210d;
	public static final int DW_AT_GNU_shared_locks_required = (int)0x210e;
	public static final int DW_AT_GNU_odr_signature = (int)0x210f;
	public static final int DW_AT_GNU_template_name = (int)0x2110;
	public static final int DW_AT_GNU_call_site_value = (int)0x2111;
	public static final int DW_AT_GNU_call_site_data_value = (int)0x2112;
	public static final int DW_AT_GNU_call_site_target = (int)0x2113;
	public static final int DW_AT_GNU_call_site_target_clobbered = (int)0x2114;
	public static final int DW_AT_GNU_tail_call = (int)0x2115;
	public static final int DW_AT_GNU_all_tail_call_sites = (int)0x2116;
	public static final int DW_AT_GNU_all_call_sites = (int)0x2117;
	public static final int DW_AT_GNU_all_source_call_sites = (int)0x2118;
	public static final int DW_AT_GNU_macros = (int)0x2119;
	public static final int DW_AT_GNU_deleted = (int)0x211a;
	public static final int DW_AT_GNU_dwo_name = (int)0x2130;
	public static final int DW_AT_GNU_dwo_id = (int)0x2131;
	public static final int DW_AT_GNU_ranges_base = (int)0x2132;
	public static final int DW_AT_GNU_addr_base = (int)0x2133;
	public static final int DW_AT_GNU_pubnames = (int)0x2134;
	public static final int DW_AT_GNU_pubtypes = (int)0x2135;
	public static final int DW_AT_GNU_discriminator = (int)0x2136;
	public static final int DW_AT_GNU_locviews = (int)0x2137;
	public static final int DW_AT_GNU_entry_view = (int)0x2138;
	public static final int DW_AT_GNU_numerator = (int)0x2303;
	public static final int DW_AT_GNU_denominator = (int)0x2304;
	public static final int DW_AT_GNU_bias = (int)0x2305;
	public static final int DW_AT_ALTIUM_loclist = (int)0x2300;
	public static final int DW_AT_SUN_template = (int)0x2201;
	public static final int DW_AT_VMS_rtnbeg_pd_address = (int)0x2201;
	public static final int DW_AT_SUN_alignment = (int)0x2202;
	public static final int DW_AT_SUN_vtable = (int)0x2203;
	public static final int DW_AT_SUN_count_guarantee = (int)0x2204;
	public static final int DW_AT_SUN_command_line = (int)0x2205;
	public static final int DW_AT_SUN_vbase = (int)0x2206;
	public static final int DW_AT_SUN_compile_options = (int)0x2207;
	public static final int DW_AT_SUN_language = (int)0x2208;
	public static final int DW_AT_SUN_browser_file = (int)0x2209;
	public static final int DW_AT_SUN_vtable_abi = (int)0x2210;
	public static final int DW_AT_SUN_func_offsets = (int)0x2211;
	public static final int DW_AT_SUN_cf_kind = (int)0x2212;
	public static final int DW_AT_SUN_vtable_index = (int)0x2213;
	public static final int DW_AT_SUN_omp_tpriv_addr = (int)0x2214;
	public static final int DW_AT_SUN_omp_child_func = (int)0x2215;
	public static final int DW_AT_SUN_func_offset = (int)0x2216;
	public static final int DW_AT_SUN_memop_type_ref = (int)0x2217;
	public static final int DW_AT_SUN_profile_id = (int)0x2218;
	public static final int DW_AT_SUN_memop_signature = (int)0x2219;
	public static final int DW_AT_SUN_obj_dir = (int)0x2220;
	public static final int DW_AT_SUN_obj_file = (int)0x2221;
	public static final int DW_AT_SUN_original_name = (int)0x2222;
	public static final int DW_AT_SUN_hwcprof_signature = (int)0x2223;
	public static final int DW_AT_SUN_amd64_parmdump = (int)0x2224;
	public static final int DW_AT_SUN_part_link_name = (int)0x2225;
	public static final int DW_AT_SUN_link_name = (int)0x2226;
	public static final int DW_AT_SUN_pass_with_const = (int)0x2227;
	public static final int DW_AT_SUN_return_with_const = (int)0x2228;
	public static final int DW_AT_SUN_import_by_name = (int)0x2229;
	public static final int DW_AT_SUN_f90_pointer = (int)0x222a;
	public static final int DW_AT_SUN_pass_by_ref = (int)0x222b;
	public static final int DW_AT_SUN_f90_allocatable = (int)0x222c;
	public static final int DW_AT_SUN_f90_assumed_shape_array = (int)0x222d;
	public static final int DW_AT_SUN_c_vla = (int)0x222e;
	public static final int DW_AT_SUN_return_value_ptr = (int)0x2230;
	public static final int DW_AT_SUN_dtor_start = (int)0x2231;
	public static final int DW_AT_SUN_dtor_length = (int)0x2232;
	public static final int DW_AT_SUN_dtor_state_initial = (int)0x2233;
	public static final int DW_AT_SUN_dtor_state_final = (int)0x2234;
	public static final int DW_AT_SUN_dtor_state_deltas = (int)0x2235;
	public static final int DW_AT_SUN_import_by_lname = (int)0x2236;
	public static final int DW_AT_SUN_f90_use_only = (int)0x2237;
	public static final int DW_AT_SUN_namelist_spec = (int)0x2238;
	public static final int DW_AT_SUN_is_omp_child_func = (int)0x2239;
	public static final int DW_AT_SUN_fortran_main_alias = (int)0x223a;
	public static final int DW_AT_SUN_fortran_based = (int)0x223b;
	public static final int DW_AT_use_GNAT_descriptive_type = (int)0x2301;
	public static final int DW_AT_GNAT_descriptive_type = (int)0x2302;
	public static final int DW_AT_go_kind = (int)0x2900;
	public static final int DW_AT_go_key = (int)0x2901;
	public static final int DW_AT_go_elem = (int)0x2902;
	public static final int DW_AT_go_embedded_field = (int)0x2903;
	public static final int DW_AT_go_runtime_type = (int)0x2904;
	public static final int DW_AT_upc_threads_scaled = (int)0x3210;
	public static final int DW_AT_PGI_lbase = (int)0x3a00;
	public static final int DW_AT_PGI_soffset = (int)0x3a01;
	public static final int DW_AT_PGI_lstride = (int)0x3a02;
	public static final int DW_AT_APPLE_optimized = (int)0x3fe1;
	public static final int DW_AT_APPLE_flags = (int)0x3fe2;
	public static final int DW_AT_APPLE_isa = (int)0x3fe3;
	public static final int DW_AT_APPLE_block = (int)0x3fe4;
	public static final int DW_AT_APPLE_major_runtime_vers = (int)0x3fe5;
	public static final int DW_AT_APPLE_runtime_class = (int)0x3fe6;
	public static final int DW_AT_APPLE_omit_frame_ptr = (int)0x3fe7;
	public static final int DW_AT_hi_user = (int)0x3fff;
	public static final int DW_OP_addr = (int)0x03;
	public static final int DW_OP_deref = (int)0x06;
	public static final int DW_OP_const1u = (int)0x08;
	public static final int DW_OP_const1s = (int)0x09;
	public static final int DW_OP_const2u = (int)0x0a;
	public static final int DW_OP_const2s = (int)0x0b;
	public static final int DW_OP_const4u = (int)0x0c;
	public static final int DW_OP_const4s = (int)0x0d;
	public static final int DW_OP_const8u = (int)0x0e;
	public static final int DW_OP_const8s = (int)0x0f;
	public static final int DW_OP_constu = (int)0x10;
	public static final int DW_OP_consts = (int)0x11;
	public static final int DW_OP_dup = (int)0x12;
	public static final int DW_OP_drop = (int)0x13;
	public static final int DW_OP_over = (int)0x14;
	public static final int DW_OP_pick = (int)0x15;
	public static final int DW_OP_swap = (int)0x16;
	public static final int DW_OP_rot = (int)0x17;
	public static final int DW_OP_xderef = (int)0x18;
	public static final int DW_OP_abs = (int)0x19;
	public static final int DW_OP_and = (int)0x1a;
	public static final int DW_OP_div = (int)0x1b;
	public static final int DW_OP_minus = (int)0x1c;
	public static final int DW_OP_mod = (int)0x1d;
	public static final int DW_OP_mul = (int)0x1e;
	public static final int DW_OP_neg = (int)0x1f;
	public static final int DW_OP_not = (int)0x20;
	public static final int DW_OP_or = (int)0x21;
	public static final int DW_OP_plus = (int)0x22;
	public static final int DW_OP_plus_uconst = (int)0x23;
	public static final int DW_OP_shl = (int)0x24;
	public static final int DW_OP_shr = (int)0x25;
	public static final int DW_OP_shra = (int)0x26;
	public static final int DW_OP_xor = (int)0x27;
	public static final int DW_OP_bra = (int)0x28;
	public static final int DW_OP_eq = (int)0x29;
	public static final int DW_OP_ge = (int)0x2a;
	public static final int DW_OP_gt = (int)0x2b;
	public static final int DW_OP_le = (int)0x2c;
	public static final int DW_OP_lt = (int)0x2d;
	public static final int DW_OP_ne = (int)0x2e;
	public static final int DW_OP_skip = (int)0x2f;
	public static final int DW_OP_lit0 = (int)0x30;
	public static final int DW_OP_lit1 = (int)0x31;
	public static final int DW_OP_lit2 = (int)0x32;
	public static final int DW_OP_lit3 = (int)0x33;
	public static final int DW_OP_lit4 = (int)0x34;
	public static final int DW_OP_lit5 = (int)0x35;
	public static final int DW_OP_lit6 = (int)0x36;
	public static final int DW_OP_lit7 = (int)0x37;
	public static final int DW_OP_lit8 = (int)0x38;
	public static final int DW_OP_lit9 = (int)0x39;
	public static final int DW_OP_lit10 = (int)0x3a;
	public static final int DW_OP_lit11 = (int)0x3b;
	public static final int DW_OP_lit12 = (int)0x3c;
	public static final int DW_OP_lit13 = (int)0x3d;
	public static final int DW_OP_lit14 = (int)0x3e;
	public static final int DW_OP_lit15 = (int)0x3f;
	public static final int DW_OP_lit16 = (int)0x40;
	public static final int DW_OP_lit17 = (int)0x41;
	public static final int DW_OP_lit18 = (int)0x42;
	public static final int DW_OP_lit19 = (int)0x43;
	public static final int DW_OP_lit20 = (int)0x44;
	public static final int DW_OP_lit21 = (int)0x45;
	public static final int DW_OP_lit22 = (int)0x46;
	public static final int DW_OP_lit23 = (int)0x47;
	public static final int DW_OP_lit24 = (int)0x48;
	public static final int DW_OP_lit25 = (int)0x49;
	public static final int DW_OP_lit26 = (int)0x4a;
	public static final int DW_OP_lit27 = (int)0x4b;
	public static final int DW_OP_lit28 = (int)0x4c;
	public static final int DW_OP_lit29 = (int)0x4d;
	public static final int DW_OP_lit30 = (int)0x4e;
	public static final int DW_OP_lit31 = (int)0x4f;
	public static final int DW_OP_reg0 = (int)0x50;
	public static final int DW_OP_reg1 = (int)0x51;
	public static final int DW_OP_reg2 = (int)0x52;
	public static final int DW_OP_reg3 = (int)0x53;
	public static final int DW_OP_reg4 = (int)0x54;
	public static final int DW_OP_reg5 = (int)0x55;
	public static final int DW_OP_reg6 = (int)0x56;
	public static final int DW_OP_reg7 = (int)0x57;
	public static final int DW_OP_reg8 = (int)0x58;
	public static final int DW_OP_reg9 = (int)0x59;
	public static final int DW_OP_reg10 = (int)0x5a;
	public static final int DW_OP_reg11 = (int)0x5b;
	public static final int DW_OP_reg12 = (int)0x5c;
	public static final int DW_OP_reg13 = (int)0x5d;
	public static final int DW_OP_reg14 = (int)0x5e;
	public static final int DW_OP_reg15 = (int)0x5f;
	public static final int DW_OP_reg16 = (int)0x60;
	public static final int DW_OP_reg17 = (int)0x61;
	public static final int DW_OP_reg18 = (int)0x62;
	public static final int DW_OP_reg19 = (int)0x63;
	public static final int DW_OP_reg20 = (int)0x64;
	public static final int DW_OP_reg21 = (int)0x65;
	public static final int DW_OP_reg22 = (int)0x66;
	public static final int DW_OP_reg23 = (int)0x67;
	public static final int DW_OP_reg24 = (int)0x68;
	public static final int DW_OP_reg25 = (int)0x69;
	public static final int DW_OP_reg26 = (int)0x6a;
	public static final int DW_OP_reg27 = (int)0x6b;
	public static final int DW_OP_reg28 = (int)0x6c;
	public static final int DW_OP_reg29 = (int)0x6d;
	public static final int DW_OP_reg30 = (int)0x6e;
	public static final int DW_OP_reg31 = (int)0x6f;
	public static final int DW_OP_breg0 = (int)0x70;
	public static final int DW_OP_breg1 = (int)0x71;
	public static final int DW_OP_breg2 = (int)0x72;
	public static final int DW_OP_breg3 = (int)0x73;
	public static final int DW_OP_breg4 = (int)0x74;
	public static final int DW_OP_breg5 = (int)0x75;
	public static final int DW_OP_breg6 = (int)0x76;
	public static final int DW_OP_breg7 = (int)0x77;
	public static final int DW_OP_breg8 = (int)0x78;
	public static final int DW_OP_breg9 = (int)0x79;
	public static final int DW_OP_breg10 = (int)0x7a;
	public static final int DW_OP_breg11 = (int)0x7b;
	public static final int DW_OP_breg12 = (int)0x7c;
	public static final int DW_OP_breg13 = (int)0x7d;
	public static final int DW_OP_breg14 = (int)0x7e;
	public static final int DW_OP_breg15 = (int)0x7f;
	public static final int DW_OP_breg16 = (int)0x80;
	public static final int DW_OP_breg17 = (int)0x81;
	public static final int DW_OP_breg18 = (int)0x82;
	public static final int DW_OP_breg19 = (int)0x83;
	public static final int DW_OP_breg20 = (int)0x84;
	public static final int DW_OP_breg21 = (int)0x85;
	public static final int DW_OP_breg22 = (int)0x86;
	public static final int DW_OP_breg23 = (int)0x87;
	public static final int DW_OP_breg24 = (int)0x88;
	public static final int DW_OP_breg25 = (int)0x89;
	public static final int DW_OP_breg26 = (int)0x8a;
	public static final int DW_OP_breg27 = (int)0x8b;
	public static final int DW_OP_breg28 = (int)0x8c;
	public static final int DW_OP_breg29 = (int)0x8d;
	public static final int DW_OP_breg30 = (int)0x8e;
	public static final int DW_OP_breg31 = (int)0x8f;
	public static final int DW_OP_regx = (int)0x90;
	public static final int DW_OP_fbreg = (int)0x91;
	public static final int DW_OP_bregx = (int)0x92;
	public static final int DW_OP_piece = (int)0x93;
	public static final int DW_OP_deref_size = (int)0x94;
	public static final int DW_OP_xderef_size = (int)0x95;
	public static final int DW_OP_nop = (int)0x96;
	public static final int DW_OP_push_object_address = (int)0x97;
	public static final int DW_OP_call2 = (int)0x98;
	public static final int DW_OP_call4 = (int)0x99;
	public static final int DW_OP_call_ref = (int)0x9a;
	public static final int DW_OP_form_tls_address = (int)0x9b;
	public static final int DW_OP_call_frame_cfa = (int)0x9c;
	public static final int DW_OP_bit_piece = (int)0x9d;
	public static final int DW_OP_implicit_value = (int)0x9e;
	public static final int DW_OP_stack_value = (int)0x9f;
	public static final int DW_OP_implicit_pointer = (int)0xa0;
	public static final int DW_OP_addrx = (int)0xa1;
	public static final int DW_OP_constx = (int)0xa2;
	public static final int DW_OP_entry_value = (int)0xa3;
	public static final int DW_OP_const_type = (int)0xa4;
	public static final int DW_OP_regval_type = (int)0xa5;
	public static final int DW_OP_deref_type = (int)0xa6;
	public static final int DW_OP_xderef_type = (int)0xa7;
	public static final int DW_OP_convert = (int)0xa8;
	public static final int DW_OP_reinterpret = (int)0xa9;
	public static final int DW_OP_GNU_push_tls_address = (int)0xe0;
	public static final int DW_OP_lo_user = (int)0xe0;
	public static final int DW_OP_GNU_uninit = (int)0xf0;
	public static final int DW_OP_GNU_encoded_addr = (int)0xf1;
	public static final int DW_OP_GNU_implicit_pointer = (int)0xf2;
	public static final int DW_OP_GNU_entry_value = (int)0xf3;
	public static final int DW_OP_GNU_const_type = (int)0xf4;
	public static final int DW_OP_GNU_regval_type = (int)0xf5;
	public static final int DW_OP_GNU_deref_type = (int)0xf6;
	public static final int DW_OP_GNU_convert = (int)0xf7;
	public static final int DW_OP_GNU_reinterpret = (int)0xf9;
	public static final int DW_OP_GNU_parameter_ref = (int)0xfa;
	public static final int DW_OP_GNU_addr_index = (int)0xfb;
	public static final int DW_OP_GNU_const_index = (int)0xfc;
	public static final int DW_OP_GNU_variable_value = (int)0xfd;
	public static final int DW_OP_HP_unknown = (int)0xe0;
	public static final int DW_OP_HP_is_value = (int)0xe1;
	public static final int DW_OP_HP_fltconst4 = (int)0xe2;
	public static final int DW_OP_HP_fltconst8 = (int)0xe3;
	public static final int DW_OP_HP_mod_range = (int)0xe4;
	public static final int DW_OP_HP_unmod_range = (int)0xe5;
	public static final int DW_OP_HP_tls = (int)0xe6;
	public static final int DW_OP_INTEL_bit_piece = (int)0xe8;
	public static final int DW_OP_APPLE_uninit = (int)0xf0;
	public static final int DW_OP_PGI_omp_thread_num = (int)0xf8;
	public static final int DW_OP_hi_user = (int)0xff;
	public static final int DW_ATE_address = (int)0x01;
	public static final int DW_ATE_boolean = (int)0x02;
	public static final int DW_ATE_complex_float = (int)0x03;
	public static final int DW_ATE_float = (int)0x04;
	public static final int DW_ATE_signed = (int)0x05;
	public static final int DW_ATE_signed_char = (int)0x06;
	public static final int DW_ATE_unsigned = (int)0x07;
	public static final int DW_ATE_unsigned_char = (int)0x08;
	public static final int DW_ATE_imaginary_float = (int)0x09;
	public static final int DW_ATE_packed_decimal = (int)0x0a;
	public static final int DW_ATE_numeric_string = (int)0x0b;
	public static final int DW_ATE_edited = (int)0x0c;
	public static final int DW_ATE_signed_fixed = (int)0x0d;
	public static final int DW_ATE_unsigned_fixed = (int)0x0e;
	public static final int DW_ATE_decimal_float = (int)0x0f;
	public static final int DW_ATE_UTF = (int)0x10;
	public static final int DW_ATE_UCS = (int)0x11;
	public static final int DW_ATE_ASCII = (int)0x12;
	public static final int DW_ATE_ALTIUM_fract = (int)0x80;
	public static final int DW_ATE_lo_user = (int)0x80;
	public static final int DW_ATE_ALTIUM_accum = (int)0x81;
	public static final int DW_ATE_HP_float80 = (int)0x80;
	public static final int DW_ATE_HP_complex_float80 = (int)0x81;
	public static final int DW_ATE_HP_float128 = (int)0x82;
	public static final int DW_ATE_HP_complex_float128 = (int)0x83;
	public static final int DW_ATE_HP_floathpintel = (int)0x84;
	public static final int DW_ATE_HP_imaginary_float80 = (int)0x85;
	public static final int DW_ATE_HP_imaginary_float128 = (int)0x86;
	public static final int DW_ATE_SUN_interval_float = (int)0x91;
	public static final int DW_ATE_SUN_imaginary_float = (int)0x92;
	public static final int DW_ATE_hi_user = (int)0xff;
	public static final int DW_DEFAULTED_no = (int)0x0;
	public static final int DW_DEFAULTED_in_class = (int)0x1;
	public static final int DW_DEFAULTED_out_of_class = (int)0x2;
	public static final int DW_IDX_compile_unit = (int)0x1;
	public static final int DW_IDX_type_unit = (int)0x2;
	public static final int DW_IDX_die_offset = (int)0x3;
	public static final int DW_IDX_parent = (int)0x4;
	public static final int DW_IDX_type_hash = (int)0x5;
	public static final int DW_IDX_lo_user = (int)0x2000;
	public static final int DW_IDX_hi_user = (int)0x0fff;
	public static final int DW_LLEX_end_of_list_entry = (int)0x0;
	public static final int DW_LLEX_base_address_selection_entry = (int)0x01;
	public static final int DW_LLEX_start_end_entry = (int)0x02;
	public static final int DW_LLEX_start_length_entry = (int)0x03;
	public static final int DW_LLEX_offset_pair_entry = (int)0x04;
	public static final int DW_LLE_end_of_list = (int)0x0;
	public static final int DW_LLE_base_addressx = (int)0x01;
	public static final int DW_LLE_startx_endx = (int)0x02;
	public static final int DW_LLE_startx_length = (int)0x03;
	public static final int DW_LLE_offset_pair = (int)0x04;
	public static final int DW_LLE_default_location = (int)0x05;
	public static final int DW_LLE_base_address = (int)0x06;
	public static final int DW_LLE_start_end = (int)0x07;
	public static final int DW_LLE_start_length = (int)0x08;
	public static final int DW_RLE_end_of_list = (int)0x00;
	public static final int DW_RLE_base_addressx = (int)0x01;
	public static final int DW_RLE_startx_endx = (int)0x02;
	public static final int DW_RLE_startx_length = (int)0x03;
	public static final int DW_RLE_offset_pair = (int)0x04;
	public static final int DW_RLE_base_address = (int)0x05;
	public static final int DW_RLE_start_end = (int)0x06;
	public static final int DW_RLE_start_length = (int)0x07;
	public static final int DW_GNUIVIS_global = (int)0;
	public static final int DW_GNUIVIS_static = (int)1;
	public static final int DW_GNUIKIND_none = (int)0;
	public static final int DW_GNUIKIND_type = (int)1;
	public static final int DW_GNUIKIND_variable = (int)2;
	public static final int DW_GNUIKIND_function = (int)3;
	public static final int DW_GNUIKIND_other = (int)4;
	public static final int DW_UT_compile = (int)0x01;
	public static final int DW_UT_type = (int)0x02;
	public static final int DW_UT_partial = (int)0x03;
	public static final int DW_UT_skeleton = (int)0x04;
	public static final int DW_UT_split_compile = (int)0x05;
	public static final int DW_UT_split_type = (int)0x06;
	public static final int DW_UT_lo_user = (int)0x80;
	public static final int DW_UT_hi_user = (int)0xff;
	public static final int DW_SECT_INFO = (int)1;
	public static final int DW_SECT_TYPES = (int)2;
	public static final int DW_SECT_ABBREV = (int)3;
	public static final int DW_SECT_LINE = (int)4;
	public static final int DW_SECT_LOCLISTS = (int)5;
	public static final int DW_SECT_STR_OFFSETS = (int)6;
	public static final int DW_SECT_MACRO = (int)7;
	public static final int DW_SECT_RNGLISTS = (int)8;
	public static final int DW_DS_unsigned = (int)0x01;
	public static final int DW_DS_leading_overpunch = (int)0x02;
	public static final int DW_DS_trailing_overpunch = (int)0x03;
	public static final int DW_DS_leading_separate = (int)0x04;
	public static final int DW_DS_trailing_separate = (int)0x05;
	public static final int DW_END_default = (int)0x00;
	public static final int DW_END_big = (int)0x01;
	public static final int DW_END_little = (int)0x02;
	public static final int DW_END_lo_user = (int)0x40;
	public static final int DW_END_hi_user = (int)0xff;
	public static final int DW_ATCF_lo_user = (int)0x40;
	public static final int DW_ATCF_SUN_mop_bitfield = (int)0x41;
	public static final int DW_ATCF_SUN_mop_spill = (int)0x42;
	public static final int DW_ATCF_SUN_mop_scopy = (int)0x43;
	public static final int DW_ATCF_SUN_func_start = (int)0x44;
	public static final int DW_ATCF_SUN_end_ctors = (int)0x45;
	public static final int DW_ATCF_SUN_branch_target = (int)0x46;
	public static final int DW_ATCF_SUN_mop_stack_probe = (int)0x47;
	public static final int DW_ATCF_SUN_func_epilog = (int)0x48;
	public static final int DW_ATCF_hi_user = (int)0xff;
	public static final int DW_ACCESS_public = (int)0x01;
	public static final int DW_ACCESS_protected = (int)0x02;
	public static final int DW_ACCESS_private = (int)0x03;
	public static final int DW_VIS_local = (int)0x01;
	public static final int DW_VIS_exported = (int)0x02;
	public static final int DW_VIS_qualified = (int)0x03;
	public static final int DW_VIRTUALITY_none = (int)0x00;
	public static final int DW_VIRTUALITY_virtual = (int)0x01;
	public static final int DW_VIRTUALITY_pure_virtual = (int)0x02;
	public static final int DW_LANG_C89 = (int)0x0001;
	public static final int DW_LANG_C = (int)0x0002;
	public static final int DW_LANG_Ada83 = (int)0x0003;
	public static final int DW_LANG_C_plus_plus = (int)0x0004;
	public static final int DW_LANG_Cobol74 = (int)0x0005;
	public static final int DW_LANG_Cobol85 = (int)0x0006;
	public static final int DW_LANG_Fortran77 = (int)0x0007;
	public static final int DW_LANG_Fortran90 = (int)0x0008;
	public static final int DW_LANG_Pascal83 = (int)0x0009;
	public static final int DW_LANG_Modula2 = (int)0x000a;
	public static final int DW_LANG_Java = (int)0x000b;
	public static final int DW_LANG_C99 = (int)0x000c;
	public static final int DW_LANG_Ada95 = (int)0x000d;
	public static final int DW_LANG_Fortran95 = (int)0x000e;
	public static final int DW_LANG_PLI = (int)0x000f;
	public static final int DW_LANG_ObjC = (int)0x0010;
	public static final int DW_LANG_ObjC_plus_plus = (int)0x0011;
	public static final int DW_LANG_UPC = (int)0x0012;
	public static final int DW_LANG_D = (int)0x0013;
	public static final int DW_LANG_Python = (int)0x0014;
	public static final int DW_LANG_OpenCL = (int)0x0015;
	public static final int DW_LANG_Go = (int)0x0016;
	public static final int DW_LANG_Modula3 = (int)0x0017;
	public static final int DW_LANG_Haskel = (int)0x0018;
	public static final int DW_LANG_C_plus_plus_03 = (int)0x0019;
	public static final int DW_LANG_C_plus_plus_11 = (int)0x001a;
	public static final int DW_LANG_OCaml = (int)0x001b;
	public static final int DW_LANG_Rust = (int)0x001c;
	public static final int DW_LANG_C11 = (int)0x001d;
	public static final int DW_LANG_Swift = (int)0x001e;
	public static final int DW_LANG_Julia = (int)0x001f;
	public static final int DW_LANG_Dylan = (int)0x0020;
	public static final int DW_LANG_C_plus_plus_14 = (int)0x0021;
	public static final int DW_LANG_Fortran03 = (int)0x0022;
	public static final int DW_LANG_Fortran08 = (int)0x0023;
	public static final int DW_LANG_RenderScript = (int)0x0024;
	public static final int DW_LANG_BLISS = (int)0x0025;
	public static final int DW_LANG_lo_user = (int)0x8000;
	public static final int DW_LANG_Mips_Assembler = (int)0x8001;
	public static final int DW_LANG_Upc = (int)0x8765;
	public static final int DW_LANG_ALTIUM_Assembler = (int)0x9101;
	public static final int DW_LANG_SUN_Assembler = (int)0x9001;
	public static final int DW_LANG_hi_user = (int)0xffff;
	public static final int DW_ID_case_sensitive = (int)0x00;
	public static final int DW_ID_up_case = (int)0x01;
	public static final int DW_ID_down_case = (int)0x02;
	public static final int DW_ID_case_insensitive = (int)0x03;
	public static final int DW_CC_normal = (int)0x01;
	public static final int DW_CC_program = (int)0x02;
	public static final int DW_CC_nocall = (int)0x03;
	public static final int DW_CC_pass_by_reference = (int)0x04;
	public static final int DW_CC_pass_by_value = (int)0x05;
	public static final int DW_CC_lo_user = (int)0x40;
	public static final int DW_CC_GNU_renesas_sh = (int)0x40;
	public static final int DW_CC_GNU_borland_fastcall_i386 = (int)0x41;
	public static final int DW_CC_ALTIUM_interrupt = (int)0x65;
	public static final int DW_CC_ALTIUM_near_system_stack = (int)0x66;
	public static final int DW_CC_ALTIUM_near_user_stack = (int)0x67;
	public static final int DW_CC_ALTIUM_huge_user_stack = (int)0x68;
	public static final int DW_CC_hi_user = (int)0xff;
	public static final int DW_INL_not_inlined = (int)0x00;
	public static final int DW_INL_inlined = (int)0x01;
	public static final int DW_INL_declared_not_inlined = (int)0x02;
	public static final int DW_INL_declared_inlined = (int)0x03;
	public static final int DW_ORD_row_major = (int)0x00;
	public static final int DW_ORD_col_major = (int)0x01;
	public static final int DW_DSC_label = (int)0x00;
	public static final int DW_DSC_range = (int)0x01;
	public static final int DW_LNCT_path = (int)0x1;
	public static final int DW_LNCT_directory_index = (int)0x2;
	public static final int DW_LNCT_timestamp = (int)0x3;
	public static final int DW_LNCT_size = (int)0x4;
	public static final int DW_LNCT_MD5 = (int)0x5;
	public static final int DW_LNCT_GNU_subprogram_name = (int)0x6;
	public static final int DW_LNCT_GNU_decl_file = (int)0x7;
	public static final int DW_LNCT_GNU_decl_line = (int)0x8;
	public static final int DW_LNCT_lo_user = (int)0x2000;
	public static final int DW_LNCT_hi_user = (int)0x3fff;
	public static final int DW_LNS_copy = (int)0x01;
	public static final int DW_LNS_advance_pc = (int)0x02;
	public static final int DW_LNS_advance_line = (int)0x03;
	public static final int DW_LNS_set_file = (int)0x04;
	public static final int DW_LNS_set_column = (int)0x05;
	public static final int DW_LNS_negate_stmt = (int)0x06;
	public static final int DW_LNS_set_basic_block = (int)0x07;
	public static final int DW_LNS_const_add_pc = (int)0x08;
	public static final int DW_LNS_fixed_advance_pc = (int)0x09;
	public static final int DW_LNS_set_prologue_end = (int)0x0a;
	public static final int DW_LNS_set_epilogue_begin = (int)0x0b;
	public static final int DW_LNS_set_isa = (int)0x0c;
	public static final int DW_LNS_set_address_from_logical = (int)0x0d;
	public static final int DW_LNS_set_subprogram = (int)0x0d;
	public static final int DW_LNS_inlined_call = (int)0x0e;
	public static final int DW_LNS_pop_context = (int)0x0f;
	public static final int DW_LNE_end_sequence = (int)0x01;
	public static final int DW_LNE_set_address = (int)0x02;
	public static final int DW_LNE_define_file = (int)0x03;
	public static final int DW_LNE_set_discriminator = (int)0x04;
	public static final int DW_LNE_HP_negate_is_UV_update = (int)0x11;
	public static final int DW_LNE_HP_push_context = (int)0x12;
	public static final int DW_LNE_HP_pop_context = (int)0x13;
	public static final int DW_LNE_HP_set_file_line_column = (int)0x14;
	public static final int DW_LNE_HP_set_routine_name = (int)0x15;
	public static final int DW_LNE_HP_set_sequence = (int)0x16;
	public static final int DW_LNE_HP_negate_post_semantics = (int)0x17;
	public static final int DW_LNE_HP_negate_function_exit = (int)0x18;
	public static final int DW_LNE_HP_negate_front_end_logical = (int)0x19;
	public static final int DW_LNE_HP_define_proc = (int)0x20;
	public static final int DW_LNE_HP_source_file_correlation = (int)0x80;
	public static final int DW_LNE_lo_user = (int)0x80;
	public static final int DW_LNE_hi_user = (int)0xff;
	public static final int DW_ISA_UNKNOWN = (int)0;
	public static final int DW_ISA_ARM_thumb = (int)1;
	public static final int DW_ISA_ARM_arm = (int)2;
	public static final int DW_MACRO_define = (int)0x01;
	public static final int DW_MACRO_undef = (int)0x02;
	public static final int DW_MACRO_start_file = (int)0x03;
	public static final int DW_MACRO_end_file = (int)0x04;
	public static final int DW_MACRO_define_strp = (int)0x05;
	public static final int DW_MACRO_undef_strp = (int)0x06;
	public static final int DW_MACRO_import = (int)0x07;
	public static final int DW_MACRO_define_sup = (int)0x08;
	public static final int DW_MACRO_undef_sup = (int)0x09;
	public static final int DW_MACRO_import_sup = (int)0x0a;
	public static final int DW_MACRO_define_strx = (int)0x0b;
	public static final int DW_MACRO_undef_strx = (int)0x0c;
	public static final int DW_MACRO_lo_user = (int)0xe0;
	public static final int DW_MACRO_hi_user = (int)0xff;
	public static final int DW_MACINFO_define = (int)0x01;
	public static final int DW_MACINFO_undef = (int)0x02;
	public static final int DW_MACINFO_start_file = (int)0x03;
	public static final int DW_MACINFO_end_file = (int)0x04;
	public static final int DW_MACINFO_vendor_ext = (int)0xff;
	public static final int DW_CFA_advance_loc = (int)0x40;
	public static final int DW_CFA_offset = (int)0x80;
	public static final int DW_CFA_restore = (int)0xc0;
	public static final int DW_CFA_extended = (int)0;
	public static final int DW_CFA_nop = (int)0x00;
	public static final int DW_CFA_set_loc = (int)0x01;
	public static final int DW_CFA_advance_loc1 = (int)0x02;
	public static final int DW_CFA_advance_loc2 = (int)0x03;
	public static final int DW_CFA_advance_loc4 = (int)0x04;
	public static final int DW_CFA_offset_extended = (int)0x05;
	public static final int DW_CFA_restore_extended = (int)0x06;
	public static final int DW_CFA_undefined = (int)0x07;
	public static final int DW_CFA_same_value = (int)0x08;
	public static final int DW_CFA_register = (int)0x09;
	public static final int DW_CFA_remember_state = (int)0x0a;
	public static final int DW_CFA_restore_state = (int)0x0b;
	public static final int DW_CFA_def_cfa = (int)0x0c;
	public static final int DW_CFA_def_cfa_register = (int)0x0d;
	public static final int DW_CFA_def_cfa_offset = (int)0x0e;
	public static final int DW_CFA_def_cfa_expression = (int)0x0f;
	public static final int DW_CFA_expression = (int)0x10;
	public static final int DW_CFA_offset_extended_sf = (int)0x11;
	public static final int DW_CFA_def_cfa_sf = (int)0x12;
	public static final int DW_CFA_def_cfa_offset_sf = (int)0x13;
	public static final int DW_CFA_val_offset = (int)0x14;
	public static final int DW_CFA_val_offset_sf = (int)0x15;
	public static final int DW_CFA_val_expression = (int)0x16;
	public static final int DW_CFA_lo_user = (int)0x1c;
	public static final int DW_CFA_low_user = (int)0x1c;
	public static final int DW_CFA_MIPS_advance_loc8 = (int)0x1d;
	public static final int DW_CFA_GNU_window_save = (int)0x2d;
	public static final int DW_CFA_GNU_args_size = (int)0x2e;
	public static final int DW_CFA_GNU_negative_offset_extended = (int)0x2f;
	public static final int DW_CFA_METAWARE_info = (int)0x34;
	public static final int DW_CFA_high_user = (int)0x3f;
	public static final int DW_EH_PE_absptr = (int)0x00;
	public static final int DW_EH_PE_uleb128 = (int)0x01;
	public static final int DW_EH_PE_udata2 = (int)0x02;
	public static final int DW_EH_PE_udata4 = (int)0x03;
	public static final int DW_EH_PE_udata8 = (int)0x04;
	public static final int DW_EH_PE_sleb128 = (int)0x09;
	public static final int DW_EH_PE_sdata2 = (int)0x0A;
	public static final int DW_EH_PE_sdata4 = (int)0x0B;
	public static final int DW_EH_PE_sdata8 = (int)0x0C;
	public static final int DW_EH_PE_pcrel = (int)0x10;
	public static final int DW_EH_PE_textrel = (int)0x20;
	public static final int DW_EH_PE_datarel = (int)0x30;
	public static final int DW_EH_PE_funcrel = (int)0x40;
	public static final int DW_EH_PE_aligned = (int)0x50;
	public static final int DW_EH_PE_omit = (int)0xff;
	public static final int DW_FRAME_CFA_COL = (int)0;
	public static final int DW_FRAME_REG1 = (int)1;
	public static final int DW_FRAME_REG2 = (int)2;
	public static final int DW_FRAME_REG3 = (int)3;
	public static final int DW_FRAME_REG4 = (int)4;
	public static final int DW_FRAME_REG5 = (int)5;
	public static final int DW_FRAME_REG6 = (int)6;
	public static final int DW_FRAME_REG7 = (int)7;
	public static final int DW_FRAME_REG8 = (int)8;
	public static final int DW_FRAME_REG9 = (int)9;
	public static final int DW_FRAME_REG10 = (int)10;
	public static final int DW_FRAME_REG11 = (int)11;
	public static final int DW_FRAME_REG12 = (int)12;
	public static final int DW_FRAME_REG13 = (int)13;
	public static final int DW_FRAME_REG14 = (int)14;
	public static final int DW_FRAME_REG15 = (int)15;
	public static final int DW_FRAME_REG16 = (int)16;
	public static final int DW_FRAME_REG17 = (int)17;
	public static final int DW_FRAME_REG18 = (int)18;
	public static final int DW_FRAME_REG19 = (int)19;
	public static final int DW_FRAME_REG20 = (int)20;
	public static final int DW_FRAME_REG21 = (int)21;
	public static final int DW_FRAME_REG22 = (int)22;
	public static final int DW_FRAME_REG23 = (int)23;
	public static final int DW_FRAME_REG24 = (int)24;
	public static final int DW_FRAME_REG25 = (int)25;
	public static final int DW_FRAME_REG26 = (int)26;
	public static final int DW_FRAME_REG27 = (int)27;
	public static final int DW_FRAME_REG28 = (int)28;
	public static final int DW_FRAME_REG29 = (int)29;
	public static final int DW_FRAME_REG30 = (int)30;
	public static final int DW_FRAME_REG31 = (int)31;
	public static final int DW_FRAME_FREG0 = (int)32;
	public static final int DW_FRAME_FREG1 = (int)33;
	public static final int DW_FRAME_FREG2 = (int)34;
	public static final int DW_FRAME_FREG3 = (int)35;
	public static final int DW_FRAME_FREG4 = (int)36;
	public static final int DW_FRAME_FREG5 = (int)37;
	public static final int DW_FRAME_FREG6 = (int)38;
	public static final int DW_FRAME_FREG7 = (int)39;
	public static final int DW_FRAME_FREG8 = (int)40;
	public static final int DW_FRAME_FREG9 = (int)41;
	public static final int DW_FRAME_FREG10 = (int)42;
	public static final int DW_FRAME_FREG11 = (int)43;
	public static final int DW_FRAME_FREG12 = (int)44;
	public static final int DW_FRAME_FREG13 = (int)45;
	public static final int DW_FRAME_FREG14 = (int)46;
	public static final int DW_FRAME_FREG15 = (int)47;
	public static final int DW_FRAME_FREG16 = (int)48;
	public static final int DW_FRAME_FREG17 = (int)49;
	public static final int DW_FRAME_FREG18 = (int)50;
	public static final int DW_FRAME_FREG19 = (int)51;
	public static final int DW_FRAME_FREG20 = (int)52;
	public static final int DW_FRAME_FREG21 = (int)53;
	public static final int DW_FRAME_FREG22 = (int)54;
	public static final int DW_FRAME_FREG23 = (int)55;
	public static final int DW_FRAME_FREG24 = (int)56;
	public static final int DW_FRAME_FREG25 = (int)57;
	public static final int DW_FRAME_FREG26 = (int)58;
	public static final int DW_FRAME_FREG27 = (int)59;
	public static final int DW_FRAME_FREG28 = (int)60;
	public static final int DW_FRAME_FREG29 = (int)61;
	public static final int DW_FRAME_FREG30 = (int)62;
	public static final int DW_FRAME_FREG31 = (int)63;
	public static final int DW_FRAME_FREG32 = (int)64;
	public static final int DW_FRAME_FREG33 = (int)65;
	public static final int DW_FRAME_FREG34 = (int)66;
	public static final int DW_FRAME_FREG35 = (int)67;
	public static final int DW_FRAME_FREG36 = (int)68;
	public static final int DW_FRAME_FREG37 = (int)69;
	public static final int DW_FRAME_FREG38 = (int)70;
	public static final int DW_FRAME_FREG39 = (int)71;
	public static final int DW_FRAME_FREG40 = (int)72;
	public static final int DW_FRAME_FREG41 = (int)73;
	public static final int DW_FRAME_FREG42 = (int)74;
	public static final int DW_FRAME_FREG43 = (int)75;
	public static final int DW_FRAME_FREG44 = (int)76;
	public static final int DW_FRAME_FREG45 = (int)77;
	public static final int DW_FRAME_FREG46 = (int)78;
	public static final int DW_FRAME_FREG47 = (int)79;
	public static final int DW_FRAME_FREG48 = (int)80;
	public static final int DW_FRAME_FREG49 = (int)81;
	public static final int DW_FRAME_FREG50 = (int)82;
	public static final int DW_FRAME_FREG51 = (int)83;
	public static final int DW_FRAME_FREG52 = (int)84;
	public static final int DW_FRAME_FREG53 = (int)85;
	public static final int DW_FRAME_FREG54 = (int)86;
	public static final int DW_FRAME_FREG55 = (int)87;
	public static final int DW_FRAME_FREG56 = (int)88;
	public static final int DW_FRAME_FREG57 = (int)89;
	public static final int DW_FRAME_FREG58 = (int)90;
	public static final int DW_FRAME_FREG59 = (int)91;
	public static final int DW_FRAME_FREG60 = (int)92;
	public static final int DW_FRAME_FREG61 = (int)93;
	public static final int DW_FRAME_FREG62 = (int)94;
	public static final int DW_FRAME_FREG63 = (int)95;
	public static final int DW_FRAME_FREG64 = (int)96;
	public static final int DW_FRAME_FREG65 = (int)97;
	public static final int DW_FRAME_FREG66 = (int)98;
	public static final int DW_FRAME_FREG67 = (int)99;
	public static final int DW_FRAME_FREG68 = (int)100;
	public static final int DW_FRAME_FREG69 = (int)101;
	public static final int DW_FRAME_FREG70 = (int)102;
	public static final int DW_FRAME_FREG71 = (int)103;
	public static final int DW_FRAME_FREG72 = (int)104;
	public static final int DW_FRAME_FREG73 = (int)105;
	public static final int DW_FRAME_FREG74 = (int)106;
	public static final int DW_FRAME_FREG75 = (int)107;
	public static final int DW_FRAME_FREG76 = (int)108;
	public static final int DW_FRAME_HIGHEST_NORMAL_REGISTER = (int)188;
	public static final int DW_FRAME_LAST_REG_NUM = (int)(DW_FRAME_HIGHEST_NORMAL_REGISTER + 3);
	public static final int DW_FRAME_RA_COL = (int)(DW_FRAME_HIGHEST_NORMAL_REGISTER + 1);
	public static final int DW_FRAME_STATIC_LINK = (int)(DW_FRAME_HIGHEST_NORMAL_REGISTER + 2);
	public static final int DW_CHILDREN_no = (int)0x00;
	public static final int DW_CHILDREN_yes = (int)0x01;
	public static final int DW_ADDR_none = (int)0;

	public static final long DW_DLV_NOCOUNT = -1;


	public interface Dwarf_Handler extends Callback {
		/** @param Dwarf_Error1 errarg */
		void apply(Pointer Dwarf_Error1, Pointer Dwarf_Ptr1);
	};
	public interface dwarf_printf_callback_function_type extends Callback {
		/** @param voidPtr1 linecontent */
		void apply(Pointer voidPtr1, Pointer charPtr1);
	};
	public interface Dwarf_Callback_Func extends Callback {
		int apply(Pointer charPtr1, int int1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, long Dwarf_Unsigned3, long Dwarf_Unsigned4, LongByReference Dwarf_UnsignedPtr1, Pointer voidPtr1, IntByReference intPtr1);
	};
	public interface dwarf_get_endian_copy_function_callback extends Callback {
		/**
		 * @param voidPtr1 src<br>
		 * @param voidPtr2 srclen
		 */
		void apply(Pointer voidPtr1, Pointer voidPtr2, NativeLong u1);
	};
	/**
	 * Use for DW_EPXR_STANDARD., DW_EXPR_VAL_OFFSET.<br>
	 * Returns DW_DLV_OK if the value is available.<br>
	 * If DW_DLV_OK returns the regnum and offset thru the pointers<br>
	 * (which the consumer must use appropriately).<br>
	 * Original signature : <code>int dwarf_frame_get_reg_register(Dwarf_Regtable_Entry3_s*, Dwarf_Small*, Dwarf_Half*, Dwarf_Signed*)</code><br>
	 * <i>native declaration : line 488</i><br>
	 * @deprecated use the safer methods {@link #dwarf_frame_get_reg_register(libdwarf.Dwarf_Regtable_Entry3_s, java.nio.ByteBuffer, java.nio.ShortBuffer, java.nio.LongBuffer)} and {@link #dwarf_frame_get_reg_register(libdwarf.Dwarf_Regtable_Entry3_s, com.sun.jna.Pointer, com.sun.jna.ptr.ShortByReference, com.sun.jna.ptr.LongByReference)} instead
	 */
	@Deprecated 
	int dwarf_frame_get_reg_register(Dwarf_Regtable_Entry3_s reg_in, Pointer offset_relevant, ShortByReference regnum_out, LongByReference offset_out);
	/**
	 * Use for DW_EPXR_STANDARD., DW_EXPR_VAL_OFFSET.<br>
	 * Returns DW_DLV_OK if the value is available.<br>
	 * If DW_DLV_OK returns the regnum and offset thru the pointers<br>
	 * (which the consumer must use appropriately).<br>
	 * Original signature : <code>int dwarf_frame_get_reg_register(Dwarf_Regtable_Entry3_s*, Dwarf_Small*, Dwarf_Half*, Dwarf_Signed*)</code><br>
	 * <i>native declaration : line 488</i>
	 */
	int dwarf_frame_get_reg_register(Dwarf_Regtable_Entry3_s reg_in, ByteBuffer offset_relevant, ShortBuffer regnum_out, LongBuffer offset_out);
	/**
	 * Use for DW_EXPR_EXPRESSION, DW_EXPR_VAL_EXPRESSION.<br>
	 * Returns DW_DLV_OK if the value is available.<br>
	 * The caller must pass in the address of a valid<br>
	 * Dwarf_Block (the caller need not initialize it).<br>
	 * Original signature : <code>int dwarf_frame_get_reg_expression(Dwarf_Regtable_Entry3_s*, Dwarf_Block*)</code><br>
	 * <i>native declaration : line 498</i>
	 */
	int dwarf_frame_get_reg_expression(Dwarf_Regtable_Entry3_s reg_in, Dwarf_Block block_out);
	/**
	 * Initialization based on path. This is new October 2018.<br>
	 * The path actually used is copied to true_path_out<br>
	 * and in the case of MacOS dSYM may not match path.<br>
	 * So consider the value put in true_path_out the<br>
	 * actual file name. reserved1,2,3 should all be passed<br>
	 * as zero.<br>
	 * path<br>
	 * Original signature : <code>int dwarf_init_path(const char*, char*, unsigned int, Dwarf_Unsigned, unsigned int, Dwarf_Handler, Dwarf_Ptr, Dwarf_Debug*, const char*, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1532</i><br>
	 * @deprecated use the safer methods {@link #dwarf_init_path(java.lang.String, java.nio.ByteBuffer, int, long, int, libdwarf.LibdwarfLibrary.Dwarf_Handler, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, java.lang.String, long, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_init_path(com.sun.jna.Pointer, com.sun.jna.Pointer, int, long, int, libdwarf.LibdwarfLibrary.Dwarf_Handler, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, long, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_init_path(Pointer charPtr1, Pointer charPtr2, int int1, long Dwarf_Unsigned1, int int2, LibdwarfLibrary.Dwarf_Handler Dwarf_Handler1, Pointer Dwarf_Ptr1, Pointer Dwarf_DebugPtr1, Pointer charPtr3, long Dwarf_Unsigned2, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Initialization based on path. This is new October 2018.<br>
	 * The path actually used is copied to true_path_out<br>
	 * and in the case of MacOS dSYM may not match path.<br>
	 * So consider the value put in true_path_out the<br>
	 * actual file name. reserved1,2,3 should all be passed<br>
	 * as zero.<br>
	 * path<br>
	 * Original signature : <code>int dwarf_init_path(const char*, char*, unsigned int, Dwarf_Unsigned, unsigned int, Dwarf_Handler, Dwarf_Ptr, Dwarf_Debug*, const char*, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1532</i>
	 */
	int dwarf_init_path(String charPtr1, ByteBuffer charPtr2, int int1, long Dwarf_Unsigned1, int int2, LibdwarfLibrary.Dwarf_Handler Dwarf_Handler1, Pointer Dwarf_Ptr1, PointerByReference Dwarf_DebugPtr1, String charPtr3, long Dwarf_Unsigned2, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Initialization based on path. This is new October 2018.<br>
	 * The path actually used is copied to true_path_out<br>
	 * and in the case of MacOS dSYM may not match path.<br>
	 * So consider the value put in true_path_out the<br>
	 * actual file name. reserved1,2,3 should all be passed<br>
	 * as zero.<br>
	 * path<br>
	 * Original signature : <code>int dwarf_init_path(const char*, char*, unsigned int, Dwarf_Unsigned, unsigned int, Dwarf_Handler, Dwarf_Ptr, Dwarf_Debug*, const char*, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1532</i>
	 */
	int dwarf_init_path(Pointer charPtr1, Pointer charPtr2, int int1, long Dwarf_Unsigned1, int int2, LibdwarfLibrary.Dwarf_Handler Dwarf_Handler1, Pointer Dwarf_Ptr1, PointerByReference Dwarf_DebugPtr1, Pointer charPtr3, long Dwarf_Unsigned2, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New March 2017<br>
	 * fd<br>
	 * Original signature : <code>int dwarf_init_b(int, Dwarf_Unsigned, unsigned int, Dwarf_Handler, Dwarf_Ptr, Dwarf_Debug*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1547</i><br>
	 * @deprecated use the safer method {@link #dwarf_init_b(int, long, int, libdwarf.LibdwarfLibrary.Dwarf_Handler, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_init_b(int int1, long Dwarf_Unsigned1, int int2, LibdwarfLibrary.Dwarf_Handler Dwarf_Handler1, Pointer Dwarf_Ptr1, Pointer Dwarf_DebugPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * New March 2017<br>
	 * fd<br>
	 * Original signature : <code>int dwarf_init_b(int, Dwarf_Unsigned, unsigned int, Dwarf_Handler, Dwarf_Ptr, Dwarf_Debug*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1547</i>
	 */
	int dwarf_init_b(int int1, long Dwarf_Unsigned1, int int2, LibdwarfLibrary.Dwarf_Handler Dwarf_Handler1, Pointer Dwarf_Ptr1, PointerByReference Dwarf_DebugPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * fd<br>
	 * Original signature : <code>int dwarf_init(int, Dwarf_Unsigned, Dwarf_Handler, Dwarf_Ptr, Dwarf_Debug*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1555</i><br>
	 * @deprecated use the safer method {@link #dwarf_init(int, long, libdwarf.LibdwarfLibrary.Dwarf_Handler, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_init(int int1, long Dwarf_Unsigned1, LibdwarfLibrary.Dwarf_Handler Dwarf_Handler1, Pointer Dwarf_Ptr1, Pointer Dwarf_DebugPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * fd<br>
	 * Original signature : <code>int dwarf_init(int, Dwarf_Unsigned, Dwarf_Handler, Dwarf_Ptr, Dwarf_Debug*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1555</i>
	 */
	int dwarf_init(int int1, long Dwarf_Unsigned1, LibdwarfLibrary.Dwarf_Handler Dwarf_Handler1, Pointer Dwarf_Ptr1, PointerByReference Dwarf_DebugPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New March 2017<br>
	 * elf<br>
	 * Original signature : <code>int dwarf_elf_init_b(dwarf_elf_handle, Dwarf_Unsigned, unsigned int, Dwarf_Handler, Dwarf_Ptr, Dwarf_Debug*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1567</i><br>
	 * @deprecated use the safer methods {@link #dwarf_elf_init_b(libdwarf.LibdwarfLibrary.dwarf_elf_handle, long, int, libdwarf.LibdwarfLibrary.Dwarf_Handler, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_elf_init_b(com.sun.jna.Pointer, long, int, libdwarf.LibdwarfLibrary.Dwarf_Handler, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_elf_init_b(Pointer dwarf_elf_handle1, long Dwarf_Unsigned1, int int1, LibdwarfLibrary.Dwarf_Handler Dwarf_Handler1, Pointer Dwarf_Ptr1, Pointer Dwarf_DebugPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * New March 2017<br>
	 * elf<br>
	 * Original signature : <code>int dwarf_elf_init_b(dwarf_elf_handle, Dwarf_Unsigned, unsigned int, Dwarf_Handler, Dwarf_Ptr, Dwarf_Debug*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1567</i>
	 */
	int dwarf_elf_init_b(LibdwarfLibrary.dwarf_elf_handle dwarf_elf_handle1, long Dwarf_Unsigned1, int int1, LibdwarfLibrary.Dwarf_Handler Dwarf_Handler1, Pointer Dwarf_Ptr1, PointerByReference Dwarf_DebugPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New March 2017<br>
	 * elf<br>
	 * Original signature : <code>int dwarf_elf_init_b(dwarf_elf_handle, Dwarf_Unsigned, unsigned int, Dwarf_Handler, Dwarf_Ptr, Dwarf_Debug*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1567</i>
	 */
	int dwarf_elf_init_b(Pointer dwarf_elf_handle1, long Dwarf_Unsigned1, int int1, LibdwarfLibrary.Dwarf_Handler Dwarf_Handler1, Pointer Dwarf_Ptr1, PointerByReference Dwarf_DebugPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * elf<br>
	 * Original signature : <code>int dwarf_elf_init(dwarf_elf_handle, Dwarf_Unsigned, Dwarf_Handler, Dwarf_Ptr, Dwarf_Debug*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1574</i><br>
	 * @deprecated use the safer methods {@link #dwarf_elf_init(libdwarf.LibdwarfLibrary.dwarf_elf_handle, long, libdwarf.LibdwarfLibrary.Dwarf_Handler, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_elf_init(com.sun.jna.Pointer, long, libdwarf.LibdwarfLibrary.Dwarf_Handler, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_elf_init(Pointer dwarf_elf_handle1, long Dwarf_Unsigned1, LibdwarfLibrary.Dwarf_Handler Dwarf_Handler1, Pointer Dwarf_Ptr1, Pointer Dwarf_DebugPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * elf<br>
	 * Original signature : <code>int dwarf_elf_init(dwarf_elf_handle, Dwarf_Unsigned, Dwarf_Handler, Dwarf_Ptr, Dwarf_Debug*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1574</i>
	 */
	int dwarf_elf_init(LibdwarfLibrary.dwarf_elf_handle dwarf_elf_handle1, long Dwarf_Unsigned1, LibdwarfLibrary.Dwarf_Handler Dwarf_Handler1, Pointer Dwarf_Ptr1, PointerByReference Dwarf_DebugPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * elf<br>
	 * Original signature : <code>int dwarf_elf_init(dwarf_elf_handle, Dwarf_Unsigned, Dwarf_Handler, Dwarf_Ptr, Dwarf_Debug*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1574</i>
	 */
	int dwarf_elf_init(Pointer dwarf_elf_handle1, long Dwarf_Unsigned1, LibdwarfLibrary.Dwarf_Handler Dwarf_Handler1, Pointer Dwarf_Ptr1, PointerByReference Dwarf_DebugPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New September 2019.<br>
	 * When using dwarf_elf_init[_b]() we still want the file path<br>
	 * in the record. So we add it after the init phase.<br>
	 * Path is needed for buildid and debuglink to fully work.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_add_file_path(Dwarf_Debug, const char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1586</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_file_path(libdwarf.LibdwarfLibrary.Dwarf_Debug, java.lang.String, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_file_path(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_add_file_path(Pointer Dwarf_Debug1, Pointer charPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * New September 2019.<br>
	 * When using dwarf_elf_init[_b]() we still want the file path<br>
	 * in the record. So we add it after the init phase.<br>
	 * Path is needed for buildid and debuglink to fully work.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_add_file_path(Dwarf_Debug, const char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1586</i>
	 */
	int dwarf_add_file_path(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, String charPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New September 2019.<br>
	 * When using dwarf_elf_init[_b]() we still want the file path<br>
	 * in the record. So we add it after the init phase.<br>
	 * Path is needed for buildid and debuglink to fully work.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_add_file_path(Dwarf_Debug, const char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1586</i>
	 */
	int dwarf_add_file_path(Pointer Dwarf_Debug1, Pointer charPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Undocumented function for memory allocator.<br>
	 * dbg<br>
	 * Original signature : <code>void dwarf_print_memory_stats(Dwarf_Debug)</code><br>
	 * <i>native declaration : line 1591</i><br>
	 * @deprecated use the safer methods {@link #dwarf_print_memory_stats(libdwarf.LibdwarfLibrary.Dwarf_Debug)} and {@link #dwarf_print_memory_stats(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void dwarf_print_memory_stats(Pointer Dwarf_Debug1);
	/**
	 * Undocumented function for memory allocator.<br>
	 * dbg<br>
	 * Original signature : <code>void dwarf_print_memory_stats(Dwarf_Debug)</code><br>
	 * <i>native declaration : line 1591</i>
	 */
	void dwarf_print_memory_stats(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_elf(Dwarf_Debug, dwarf_elf_handle*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1593</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_elf(libdwarf.LibdwarfLibrary.Dwarf_Debug, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_elf(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_elf(Pointer Dwarf_Debug1, Pointer dwarf_elf_handlePtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_elf(Dwarf_Debug, dwarf_elf_handle*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1593</i>
	 */
	int dwarf_get_elf(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, PointerByReference dwarf_elf_handlePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_elf(Dwarf_Debug, dwarf_elf_handle*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1593</i>
	 */
	int dwarf_get_elf(Pointer Dwarf_Debug1, PointerByReference dwarf_elf_handlePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_finish(Dwarf_Debug, Dwarf_Error*)</code><br>
	 * @param Dwarf_Debug1 error<br>
	 * <i>native declaration : line 1597</i><br>
	 * @deprecated use the safer methods {@link #dwarf_finish(libdwarf.LibdwarfLibrary.Dwarf_Debug, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_finish(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_finish(Pointer Dwarf_Debug1, Pointer Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_finish(Dwarf_Debug, Dwarf_Error*)</code><br>
	 * @param Dwarf_Debug1 error<br>
	 * <i>native declaration : line 1597</i>
	 */
	int dwarf_finish(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_finish(Dwarf_Debug, Dwarf_Error*)</code><br>
	 * @param Dwarf_Debug1 error<br>
	 * <i>native declaration : line 1597</i>
	 */
	int dwarf_finish(Pointer Dwarf_Debug1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * NEW March 2017.<br>
	 * obj<br>
	 * Original signature : <code>int dwarf_object_init_b(Dwarf_Obj_Access_Interface*, Dwarf_Handler, Dwarf_Ptr, unsigned int, Dwarf_Debug*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1601</i><br>
	 * @deprecated use the safer method {@link #dwarf_object_init_b(libdwarf.Dwarf_Obj_Access_Interface_s, libdwarf.LibdwarfLibrary.Dwarf_Handler, com.sun.jna.Pointer, int, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_object_init_b(Dwarf_Obj_Access_Interface_s Dwarf_Obj_Access_InterfacePtr1, LibdwarfLibrary.Dwarf_Handler Dwarf_Handler1, Pointer Dwarf_Ptr1, int int1, Pointer Dwarf_DebugPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * NEW March 2017.<br>
	 * obj<br>
	 * Original signature : <code>int dwarf_object_init_b(Dwarf_Obj_Access_Interface*, Dwarf_Handler, Dwarf_Ptr, unsigned int, Dwarf_Debug*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1601</i>
	 */
	int dwarf_object_init_b(Dwarf_Obj_Access_Interface_s Dwarf_Obj_Access_InterfacePtr1, LibdwarfLibrary.Dwarf_Handler Dwarf_Handler1, Pointer Dwarf_Ptr1, int int1, PointerByReference Dwarf_DebugPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * obj<br>
	 * Original signature : <code>int dwarf_object_init(Dwarf_Obj_Access_Interface*, Dwarf_Handler, Dwarf_Ptr, Dwarf_Debug*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1608</i><br>
	 * @deprecated use the safer method {@link #dwarf_object_init(libdwarf.Dwarf_Obj_Access_Interface_s, libdwarf.LibdwarfLibrary.Dwarf_Handler, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_object_init(Dwarf_Obj_Access_Interface_s Dwarf_Obj_Access_InterfacePtr1, LibdwarfLibrary.Dwarf_Handler Dwarf_Handler1, Pointer Dwarf_Ptr1, Pointer Dwarf_DebugPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * obj<br>
	 * Original signature : <code>int dwarf_object_init(Dwarf_Obj_Access_Interface*, Dwarf_Handler, Dwarf_Ptr, Dwarf_Debug*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1608</i>
	 */
	int dwarf_object_init(Dwarf_Obj_Access_Interface_s Dwarf_Obj_Access_InterfacePtr1, LibdwarfLibrary.Dwarf_Handler Dwarf_Handler1, Pointer Dwarf_Ptr1, PointerByReference Dwarf_DebugPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * basedbg<br>
	 * Original signature : <code>int dwarf_set_tied_dbg(Dwarf_Debug, Dwarf_Debug, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1614</i><br>
	 * @deprecated use the safer methods {@link #dwarf_set_tied_dbg(libdwarf.LibdwarfLibrary.Dwarf_Debug, libdwarf.LibdwarfLibrary.Dwarf_Debug, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_set_tied_dbg(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_set_tied_dbg(Pointer Dwarf_Debug1, Pointer Dwarf_Debug2, Pointer Dwarf_ErrorPtr1);
	/**
	 * basedbg<br>
	 * Original signature : <code>int dwarf_set_tied_dbg(Dwarf_Debug, Dwarf_Debug, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1614</i>
	 */
	int dwarf_set_tied_dbg(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, LibdwarfLibrary.Dwarf_Debug Dwarf_Debug2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * basedbg<br>
	 * Original signature : <code>int dwarf_set_tied_dbg(Dwarf_Debug, Dwarf_Debug, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1614</i>
	 */
	int dwarf_set_tied_dbg(Pointer Dwarf_Debug1, Pointer Dwarf_Debug2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Likely not very useful.?<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_tied_dbg(Dwarf_Debug, Dwarf_Debug*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1619</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_tied_dbg(libdwarf.LibdwarfLibrary.Dwarf_Debug, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_tied_dbg(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_tied_dbg(Pointer Dwarf_Debug1, Pointer Dwarf_DebugPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Likely not very useful.?<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_tied_dbg(Dwarf_Debug, Dwarf_Debug*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1619</i>
	 */
	int dwarf_get_tied_dbg(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, PointerByReference Dwarf_DebugPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Likely not very useful.?<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_tied_dbg(Dwarf_Debug, Dwarf_Debug*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1619</i>
	 */
	int dwarf_get_tied_dbg(Pointer Dwarf_Debug1, PointerByReference Dwarf_DebugPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_object_finish(Dwarf_Debug, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1623</i><br>
	 * @deprecated use the safer methods {@link #dwarf_object_finish(libdwarf.LibdwarfLibrary.Dwarf_Debug, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_object_finish(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_object_finish(Pointer Dwarf_Debug1, Pointer Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_object_finish(Dwarf_Debug, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1623</i>
	 */
	int dwarf_object_finish(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_object_finish(Dwarf_Debug, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1623</i>
	 */
	int dwarf_object_finish(Pointer Dwarf_Debug1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Returns the version string. Example: "20190922"<br>
	 * which is in ISO date format.<br>
	 * Original signature : <code>char* dwarf_package_version()</code><br>
	 * <i>native declaration : line 1628</i>
	 */
	Pointer dwarf_package_version();
	/**
	 * Section name access.  Because sections might<br>
	 * now end with .dwo or be .zdebug  or might not.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_die_section_name(Dwarf_Debug, Dwarf_Bool, const char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1633</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_die_section_name(libdwarf.LibdwarfLibrary.Dwarf_Debug, int, java.lang.String[], com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_die_section_name(com.sun.jna.Pointer, int, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_die_section_name(Pointer Dwarf_Debug1, int Dwarf_Bool1, PointerByReference charPtrPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Section name access.  Because sections might<br>
	 * now end with .dwo or be .zdebug  or might not.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_die_section_name(Dwarf_Debug, Dwarf_Bool, const char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1633</i>
	 */
	int dwarf_get_die_section_name(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, int Dwarf_Bool1, String charPtrPtr1[], PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Section name access.  Because sections might<br>
	 * now end with .dwo or be .zdebug  or might not.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_die_section_name(Dwarf_Debug, Dwarf_Bool, const char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1633</i>
	 */
	int dwarf_get_die_section_name(Pointer Dwarf_Debug1, int Dwarf_Bool1, PointerByReference charPtrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * die<br>
	 * Original signature : <code>int dwarf_get_die_section_name_b(Dwarf_Die, const char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1638</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_die_section_name_b(libdwarf.LibdwarfLibrary.Dwarf_Die, java.lang.String[], com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_die_section_name_b(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_die_section_name_b(Pointer Dwarf_Die1, PointerByReference charPtrPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * die<br>
	 * Original signature : <code>int dwarf_get_die_section_name_b(Dwarf_Die, const char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1638</i>
	 */
	int dwarf_get_die_section_name_b(LibdwarfLibrary.Dwarf_Die Dwarf_Die1, String charPtrPtr1[], PointerByReference Dwarf_ErrorPtr1);
	/**
	 * die<br>
	 * Original signature : <code>int dwarf_get_die_section_name_b(Dwarf_Die, const char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1638</i>
	 */
	int dwarf_get_die_section_name_b(Pointer Dwarf_Die1, PointerByReference charPtrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_real_section_name(Dwarf_Debug, const char*, const char**, Dwarf_Small*, Dwarf_Small*, Dwarf_Small*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * @param Dwarf_SmallPtr1 .zdebug...<br>
	 * @param Dwarf_SmallPtr2 ZLIB string<br>
	 * @param Dwarf_SmallPtr3 SHF_COMPRESSED<br>
	 * <i>native declaration : line 1642</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_real_section_name(libdwarf.LibdwarfLibrary.Dwarf_Debug, java.lang.String, java.lang.String[], java.nio.ByteBuffer, java.nio.ByteBuffer, java.nio.ByteBuffer, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_real_section_name(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_real_section_name(Pointer Dwarf_Debug1, Pointer charPtr1, PointerByReference charPtrPtr1, Pointer Dwarf_SmallPtr1, Pointer Dwarf_SmallPtr2, Pointer Dwarf_SmallPtr3, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, Pointer Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_real_section_name(Dwarf_Debug, const char*, const char**, Dwarf_Small*, Dwarf_Small*, Dwarf_Small*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * @param Dwarf_SmallPtr1 .zdebug...<br>
	 * @param Dwarf_SmallPtr2 ZLIB string<br>
	 * @param Dwarf_SmallPtr3 SHF_COMPRESSED<br>
	 * <i>native declaration : line 1642</i>
	 */
	int dwarf_get_real_section_name(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, String charPtr1, String charPtrPtr1[], ByteBuffer Dwarf_SmallPtr1, ByteBuffer Dwarf_SmallPtr2, ByteBuffer Dwarf_SmallPtr3, LongBuffer Dwarf_UnsignedPtr1, LongBuffer Dwarf_UnsignedPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_real_section_name(Dwarf_Debug, const char*, const char**, Dwarf_Small*, Dwarf_Small*, Dwarf_Small*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * @param Dwarf_SmallPtr1 .zdebug...<br>
	 * @param Dwarf_SmallPtr2 ZLIB string<br>
	 * @param Dwarf_SmallPtr3 SHF_COMPRESSED<br>
	 * <i>native declaration : line 1642</i>
	 */
	int dwarf_get_real_section_name(Pointer Dwarf_Debug1, Pointer charPtr1, PointerByReference charPtrPtr1, Pointer Dwarf_SmallPtr1, Pointer Dwarf_SmallPtr2, Pointer Dwarf_SmallPtr3, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dwarf_next_cu_header_d traverses debug_types CU headers.<br>
	 * New in May, 2015.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_next_cu_header_d(Dwarf_Debug, Dwarf_Bool, Dwarf_Unsigned*, Dwarf_Half*, Dwarf_Off*, Dwarf_Half*, Dwarf_Half*, Dwarf_Half*, Dwarf_Sig8*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Half*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1657</i><br>
	 * @deprecated use the safer methods {@link #dwarf_next_cu_header_d(libdwarf.LibdwarfLibrary.Dwarf_Debug, int, java.nio.LongBuffer, java.nio.ShortBuffer, java.nio.LongBuffer, java.nio.ShortBuffer, java.nio.ShortBuffer, java.nio.ShortBuffer, libdwarf.Dwarf_Sig8_s, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.ShortBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_next_cu_header_d(com.sun.jna.Pointer, int, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.ShortByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.ShortByReference, com.sun.jna.ptr.ShortByReference, com.sun.jna.ptr.ShortByReference, libdwarf.Dwarf_Sig8_s, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.ShortByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_next_cu_header_d(Pointer Dwarf_Debug1, int Dwarf_Bool1, LongByReference Dwarf_UnsignedPtr1, ShortByReference Dwarf_HalfPtr1, LongByReference Dwarf_OffPtr1, ShortByReference Dwarf_HalfPtr2, ShortByReference Dwarf_HalfPtr3, ShortByReference Dwarf_HalfPtr4, Dwarf_Sig8_s Dwarf_Sig8Ptr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, ShortByReference Dwarf_HalfPtr5, Pointer Dwarf_ErrorPtr1);
	/**
	 * dwarf_next_cu_header_d traverses debug_types CU headers.<br>
	 * New in May, 2015.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_next_cu_header_d(Dwarf_Debug, Dwarf_Bool, Dwarf_Unsigned*, Dwarf_Half*, Dwarf_Off*, Dwarf_Half*, Dwarf_Half*, Dwarf_Half*, Dwarf_Sig8*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Half*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1657</i>
	 */
	int dwarf_next_cu_header_d(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, int Dwarf_Bool1, LongBuffer Dwarf_UnsignedPtr1, ShortBuffer Dwarf_HalfPtr1, LongBuffer Dwarf_OffPtr1, ShortBuffer Dwarf_HalfPtr2, ShortBuffer Dwarf_HalfPtr3, ShortBuffer Dwarf_HalfPtr4, Dwarf_Sig8_s Dwarf_Sig8Ptr1, LongBuffer Dwarf_UnsignedPtr2, LongBuffer Dwarf_UnsignedPtr3, ShortBuffer Dwarf_HalfPtr5, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dwarf_next_cu_header_d traverses debug_types CU headers.<br>
	 * New in May, 2015.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_next_cu_header_d(Dwarf_Debug, Dwarf_Bool, Dwarf_Unsigned*, Dwarf_Half*, Dwarf_Off*, Dwarf_Half*, Dwarf_Half*, Dwarf_Half*, Dwarf_Sig8*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Half*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1657</i>
	 */
	int dwarf_next_cu_header_d(Pointer Dwarf_Debug1, int Dwarf_Bool1, LongByReference Dwarf_UnsignedPtr1, ShortByReference Dwarf_HalfPtr1, LongByReference Dwarf_OffPtr1, ShortByReference Dwarf_HalfPtr2, ShortByReference Dwarf_HalfPtr3, ShortByReference Dwarf_HalfPtr4, Dwarf_Sig8_s Dwarf_Sig8Ptr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, ShortByReference Dwarf_HalfPtr5, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Die traversal operations.<br>
	 * dwarf_next_cu_header_b traverses debug_info CU headers.<br>
	 * Obsolete but supported.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_next_cu_header_b(Dwarf_Debug, Dwarf_Unsigned*, Dwarf_Half*, Dwarf_Off*, Dwarf_Half*, Dwarf_Half*, Dwarf_Half*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1675</i><br>
	 * @deprecated use the safer methods {@link #dwarf_next_cu_header_b(libdwarf.LibdwarfLibrary.Dwarf_Debug, java.nio.LongBuffer, java.nio.ShortBuffer, java.nio.LongBuffer, java.nio.ShortBuffer, java.nio.ShortBuffer, java.nio.ShortBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_next_cu_header_b(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.ShortByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.ShortByReference, com.sun.jna.ptr.ShortByReference, com.sun.jna.ptr.ShortByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_next_cu_header_b(Pointer Dwarf_Debug1, LongByReference Dwarf_UnsignedPtr1, ShortByReference Dwarf_HalfPtr1, LongByReference Dwarf_OffPtr1, ShortByReference Dwarf_HalfPtr2, ShortByReference Dwarf_HalfPtr3, ShortByReference Dwarf_HalfPtr4, LongByReference Dwarf_UnsignedPtr2, Pointer Dwarf_ErrorPtr1);
	/**
	 * Die traversal operations.<br>
	 * dwarf_next_cu_header_b traverses debug_info CU headers.<br>
	 * Obsolete but supported.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_next_cu_header_b(Dwarf_Debug, Dwarf_Unsigned*, Dwarf_Half*, Dwarf_Off*, Dwarf_Half*, Dwarf_Half*, Dwarf_Half*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1675</i>
	 */
	int dwarf_next_cu_header_b(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, LongBuffer Dwarf_UnsignedPtr1, ShortBuffer Dwarf_HalfPtr1, LongBuffer Dwarf_OffPtr1, ShortBuffer Dwarf_HalfPtr2, ShortBuffer Dwarf_HalfPtr3, ShortBuffer Dwarf_HalfPtr4, LongBuffer Dwarf_UnsignedPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Die traversal operations.<br>
	 * dwarf_next_cu_header_b traverses debug_info CU headers.<br>
	 * Obsolete but supported.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_next_cu_header_b(Dwarf_Debug, Dwarf_Unsigned*, Dwarf_Half*, Dwarf_Off*, Dwarf_Half*, Dwarf_Half*, Dwarf_Half*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1675</i>
	 */
	int dwarf_next_cu_header_b(Pointer Dwarf_Debug1, LongByReference Dwarf_UnsignedPtr1, ShortByReference Dwarf_HalfPtr1, LongByReference Dwarf_OffPtr1, ShortByReference Dwarf_HalfPtr2, ShortByReference Dwarf_HalfPtr3, ShortByReference Dwarf_HalfPtr4, LongByReference Dwarf_UnsignedPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dwarf_next_cu_header_types traverses debug_types CU headers.<br>
	 * New in October, 2011. Obsolete but supported May 2015.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_next_cu_header_c(Dwarf_Debug, Dwarf_Bool, Dwarf_Unsigned*, Dwarf_Half*, Dwarf_Off*, Dwarf_Half*, Dwarf_Half*, Dwarf_Half*, Dwarf_Sig8*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1688</i><br>
	 * @deprecated use the safer methods {@link #dwarf_next_cu_header_c(libdwarf.LibdwarfLibrary.Dwarf_Debug, int, java.nio.LongBuffer, java.nio.ShortBuffer, java.nio.LongBuffer, java.nio.ShortBuffer, java.nio.ShortBuffer, java.nio.ShortBuffer, libdwarf.Dwarf_Sig8_s, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_next_cu_header_c(com.sun.jna.Pointer, int, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.ShortByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.ShortByReference, com.sun.jna.ptr.ShortByReference, com.sun.jna.ptr.ShortByReference, libdwarf.Dwarf_Sig8_s, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_next_cu_header_c(Pointer Dwarf_Debug1, int Dwarf_Bool1, LongByReference Dwarf_UnsignedPtr1, ShortByReference Dwarf_HalfPtr1, LongByReference Dwarf_OffPtr1, ShortByReference Dwarf_HalfPtr2, ShortByReference Dwarf_HalfPtr3, ShortByReference Dwarf_HalfPtr4, Dwarf_Sig8_s Dwarf_Sig8Ptr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, Pointer Dwarf_ErrorPtr1);
	/**
	 * dwarf_next_cu_header_types traverses debug_types CU headers.<br>
	 * New in October, 2011. Obsolete but supported May 2015.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_next_cu_header_c(Dwarf_Debug, Dwarf_Bool, Dwarf_Unsigned*, Dwarf_Half*, Dwarf_Off*, Dwarf_Half*, Dwarf_Half*, Dwarf_Half*, Dwarf_Sig8*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1688</i>
	 */
	int dwarf_next_cu_header_c(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, int Dwarf_Bool1, LongBuffer Dwarf_UnsignedPtr1, ShortBuffer Dwarf_HalfPtr1, LongBuffer Dwarf_OffPtr1, ShortBuffer Dwarf_HalfPtr2, ShortBuffer Dwarf_HalfPtr3, ShortBuffer Dwarf_HalfPtr4, Dwarf_Sig8_s Dwarf_Sig8Ptr1, LongBuffer Dwarf_UnsignedPtr2, LongBuffer Dwarf_UnsignedPtr3, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dwarf_next_cu_header_types traverses debug_types CU headers.<br>
	 * New in October, 2011. Obsolete but supported May 2015.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_next_cu_header_c(Dwarf_Debug, Dwarf_Bool, Dwarf_Unsigned*, Dwarf_Half*, Dwarf_Off*, Dwarf_Half*, Dwarf_Half*, Dwarf_Half*, Dwarf_Sig8*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1688</i>
	 */
	int dwarf_next_cu_header_c(Pointer Dwarf_Debug1, int Dwarf_Bool1, LongByReference Dwarf_UnsignedPtr1, ShortByReference Dwarf_HalfPtr1, LongByReference Dwarf_OffPtr1, ShortByReference Dwarf_HalfPtr2, ShortByReference Dwarf_HalfPtr3, ShortByReference Dwarf_HalfPtr4, Dwarf_Sig8_s Dwarf_Sig8Ptr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * The following is obsolete, though supported. November 2009.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_next_cu_header(Dwarf_Debug, Dwarf_Unsigned*, Dwarf_Half*, Dwarf_Off*, Dwarf_Half*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1701</i><br>
	 * @deprecated use the safer methods {@link #dwarf_next_cu_header(libdwarf.LibdwarfLibrary.Dwarf_Debug, java.nio.LongBuffer, java.nio.ShortBuffer, java.nio.LongBuffer, java.nio.ShortBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_next_cu_header(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.ShortByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.ShortByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_next_cu_header(Pointer Dwarf_Debug1, LongByReference Dwarf_UnsignedPtr1, ShortByReference Dwarf_HalfPtr1, LongByReference Dwarf_OffPtr1, ShortByReference Dwarf_HalfPtr2, LongByReference Dwarf_UnsignedPtr2, Pointer Dwarf_ErrorPtr1);
	/**
	 * The following is obsolete, though supported. November 2009.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_next_cu_header(Dwarf_Debug, Dwarf_Unsigned*, Dwarf_Half*, Dwarf_Off*, Dwarf_Half*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1701</i>
	 */
	int dwarf_next_cu_header(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, LongBuffer Dwarf_UnsignedPtr1, ShortBuffer Dwarf_HalfPtr1, LongBuffer Dwarf_OffPtr1, ShortBuffer Dwarf_HalfPtr2, LongBuffer Dwarf_UnsignedPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * The following is obsolete, though supported. November 2009.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_next_cu_header(Dwarf_Debug, Dwarf_Unsigned*, Dwarf_Half*, Dwarf_Off*, Dwarf_Half*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1701</i>
	 */
	int dwarf_next_cu_header(Pointer Dwarf_Debug1, LongByReference Dwarf_UnsignedPtr1, ShortByReference Dwarf_HalfPtr1, LongByReference Dwarf_OffPtr1, ShortByReference Dwarf_HalfPtr2, LongByReference Dwarf_UnsignedPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_siblingof(Dwarf_Debug, Dwarf_Die, Dwarf_Die*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1709</i><br>
	 * @deprecated use the safer methods {@link #dwarf_siblingof(libdwarf.LibdwarfLibrary.Dwarf_Debug, libdwarf.LibdwarfLibrary.Dwarf_Die, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_siblingof(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_siblingof(Pointer Dwarf_Debug1, Pointer Dwarf_Die1, Pointer Dwarf_DiePtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_siblingof(Dwarf_Debug, Dwarf_Die, Dwarf_Die*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1709</i>
	 */
	int dwarf_siblingof(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, LibdwarfLibrary.Dwarf_Die Dwarf_Die1, PointerByReference Dwarf_DiePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_siblingof(Dwarf_Debug, Dwarf_Die, Dwarf_Die*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1709</i>
	 */
	int dwarf_siblingof(Pointer Dwarf_Debug1, Pointer Dwarf_Die1, PointerByReference Dwarf_DiePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dwarf_siblingof_b new October 2011.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_siblingof_b(Dwarf_Debug, Dwarf_Die, Dwarf_Bool, Dwarf_Die*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1714</i><br>
	 * @deprecated use the safer methods {@link #dwarf_siblingof_b(libdwarf.LibdwarfLibrary.Dwarf_Debug, libdwarf.LibdwarfLibrary.Dwarf_Die, int, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_siblingof_b(com.sun.jna.Pointer, com.sun.jna.Pointer, int, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_siblingof_b(Pointer Dwarf_Debug1, Pointer Dwarf_Die1, int Dwarf_Bool1, Pointer Dwarf_DiePtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * dwarf_siblingof_b new October 2011.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_siblingof_b(Dwarf_Debug, Dwarf_Die, Dwarf_Bool, Dwarf_Die*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1714</i>
	 */
	int dwarf_siblingof_b(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, LibdwarfLibrary.Dwarf_Die Dwarf_Die1, int Dwarf_Bool1, PointerByReference Dwarf_DiePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dwarf_siblingof_b new October 2011.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_siblingof_b(Dwarf_Debug, Dwarf_Die, Dwarf_Bool, Dwarf_Die*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1714</i>
	 */
	int dwarf_siblingof_b(Pointer Dwarf_Debug1, Pointer Dwarf_Die1, int Dwarf_Bool1, PointerByReference Dwarf_DiePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New 27 April 2015.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_die_from_hash_signature(Dwarf_Debug, Dwarf_Sig8*, const char*, Dwarf_Die*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1721</i><br>
	 * @deprecated use the safer methods {@link #dwarf_die_from_hash_signature(libdwarf.LibdwarfLibrary.Dwarf_Debug, libdwarf.Dwarf_Sig8_s, java.lang.String, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_die_from_hash_signature(com.sun.jna.Pointer, libdwarf.Dwarf_Sig8_s, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_die_from_hash_signature(Pointer Dwarf_Debug1, Dwarf_Sig8_s Dwarf_Sig8Ptr1, Pointer charPtr1, Pointer Dwarf_DiePtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * New 27 April 2015.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_die_from_hash_signature(Dwarf_Debug, Dwarf_Sig8*, const char*, Dwarf_Die*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1721</i>
	 */
	int dwarf_die_from_hash_signature(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, Dwarf_Sig8_s Dwarf_Sig8Ptr1, String charPtr1, PointerByReference Dwarf_DiePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New 27 April 2015.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_die_from_hash_signature(Dwarf_Debug, Dwarf_Sig8*, const char*, Dwarf_Die*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1721</i>
	 */
	int dwarf_die_from_hash_signature(Pointer Dwarf_Debug1, Dwarf_Sig8_s Dwarf_Sig8Ptr1, Pointer charPtr1, PointerByReference Dwarf_DiePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * die<br>
	 * Original signature : <code>int dwarf_child(Dwarf_Die, Dwarf_Die*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1727</i><br>
	 * @deprecated use the safer methods {@link #dwarf_child(libdwarf.LibdwarfLibrary.Dwarf_Die, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_child(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_child(Pointer Dwarf_Die1, Pointer Dwarf_DiePtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * die<br>
	 * Original signature : <code>int dwarf_child(Dwarf_Die, Dwarf_Die*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1727</i>
	 */
	int dwarf_child(LibdwarfLibrary.Dwarf_Die Dwarf_Die1, PointerByReference Dwarf_DiePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * die<br>
	 * Original signature : <code>int dwarf_child(Dwarf_Die, Dwarf_Die*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1727</i>
	 */
	int dwarf_child(Pointer Dwarf_Die1, PointerByReference Dwarf_DiePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Finding die given global (not CU-relative) offset.<br>
	 * Applies only to debug_info.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_offdie(Dwarf_Debug, Dwarf_Off, Dwarf_Die*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1733</i><br>
	 * @deprecated use the safer methods {@link #dwarf_offdie(libdwarf.LibdwarfLibrary.Dwarf_Debug, long, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_offdie(com.sun.jna.Pointer, long, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_offdie(Pointer Dwarf_Debug1, long Dwarf_Off1, Pointer Dwarf_DiePtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Finding die given global (not CU-relative) offset.<br>
	 * Applies only to debug_info.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_offdie(Dwarf_Debug, Dwarf_Off, Dwarf_Die*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1733</i>
	 */
	int dwarf_offdie(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, long Dwarf_Off1, PointerByReference Dwarf_DiePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Finding die given global (not CU-relative) offset.<br>
	 * Applies only to debug_info.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_offdie(Dwarf_Debug, Dwarf_Off, Dwarf_Die*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1733</i>
	 */
	int dwarf_offdie(Pointer Dwarf_Debug1, long Dwarf_Off1, PointerByReference Dwarf_DiePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Finding die given global (not CU-relative) offset.<br>
	 * Applies to debug_info (is_info true) or debug_types (is_info false).<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_offdie_b(Dwarf_Debug, Dwarf_Off, Dwarf_Bool, Dwarf_Die*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1741</i><br>
	 * @deprecated use the safer methods {@link #dwarf_offdie_b(libdwarf.LibdwarfLibrary.Dwarf_Debug, long, int, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_offdie_b(com.sun.jna.Pointer, long, int, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_offdie_b(Pointer Dwarf_Debug1, long Dwarf_Off1, int Dwarf_Bool1, Pointer Dwarf_DiePtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Finding die given global (not CU-relative) offset.<br>
	 * Applies to debug_info (is_info true) or debug_types (is_info false).<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_offdie_b(Dwarf_Debug, Dwarf_Off, Dwarf_Bool, Dwarf_Die*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1741</i>
	 */
	int dwarf_offdie_b(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, long Dwarf_Off1, int Dwarf_Bool1, PointerByReference Dwarf_DiePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Finding die given global (not CU-relative) offset.<br>
	 * Applies to debug_info (is_info true) or debug_types (is_info false).<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_offdie_b(Dwarf_Debug, Dwarf_Off, Dwarf_Bool, Dwarf_Die*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1741</i>
	 */
	int dwarf_offdie_b(Pointer Dwarf_Debug1, long Dwarf_Off1, int Dwarf_Bool1, PointerByReference Dwarf_DiePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Returns the is_info flag through the pointer if the function returns<br>
	 * DW_DLV_OK. Needed so client software knows if a DIE is in debug_info<br>
	 * or debug_types.<br>
	 * New October 2011.<br>
	 * die<br>
	 * Original signature : <code>Dwarf_Bool dwarf_get_die_infotypes_flag(Dwarf_Die)</code><br>
	 * <i>native declaration : line 1751</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_die_infotypes_flag(libdwarf.LibdwarfLibrary.Dwarf_Die)} and {@link #dwarf_get_die_infotypes_flag(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int dwarf_get_die_infotypes_flag(Pointer Dwarf_Die1);
	/**
	 * Returns the is_info flag through the pointer if the function returns<br>
	 * DW_DLV_OK. Needed so client software knows if a DIE is in debug_info<br>
	 * or debug_types.<br>
	 * New October 2011.<br>
	 * die<br>
	 * Original signature : <code>Dwarf_Bool dwarf_get_die_infotypes_flag(Dwarf_Die)</code><br>
	 * <i>native declaration : line 1751</i>
	 */
	int dwarf_get_die_infotypes_flag(LibdwarfLibrary.Dwarf_Die Dwarf_Die1);
	/**
	 * New March 2016.<br>
	 * So we can associate a DIE's abbreviations with the contents<br>
	 * the abbreviations section.<br>
	 * die<br>
	 * Original signature : <code>int dwarf_die_abbrev_global_offset(Dwarf_Die, Dwarf_Off*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1756</i><br>
	 * @deprecated use the safer methods {@link #dwarf_die_abbrev_global_offset(libdwarf.LibdwarfLibrary.Dwarf_Die, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_die_abbrev_global_offset(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_die_abbrev_global_offset(Pointer Dwarf_Die1, LongByReference Dwarf_OffPtr1, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * New March 2016.<br>
	 * So we can associate a DIE's abbreviations with the contents<br>
	 * the abbreviations section.<br>
	 * die<br>
	 * Original signature : <code>int dwarf_die_abbrev_global_offset(Dwarf_Die, Dwarf_Off*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1756</i>
	 */
	int dwarf_die_abbrev_global_offset(LibdwarfLibrary.Dwarf_Die Dwarf_Die1, LongBuffer Dwarf_OffPtr1, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New March 2016.<br>
	 * So we can associate a DIE's abbreviations with the contents<br>
	 * the abbreviations section.<br>
	 * die<br>
	 * Original signature : <code>int dwarf_die_abbrev_global_offset(Dwarf_Die, Dwarf_Off*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1756</i>
	 */
	int dwarf_die_abbrev_global_offset(Pointer Dwarf_Die1, LongByReference Dwarf_OffPtr1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * operations on DIEs<br>
	 * die<br>
	 * Original signature : <code>int dwarf_tag(Dwarf_Die, Dwarf_Half*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1762</i><br>
	 * @deprecated use the safer methods {@link #dwarf_tag(libdwarf.LibdwarfLibrary.Dwarf_Die, java.nio.ShortBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_tag(com.sun.jna.Pointer, com.sun.jna.ptr.ShortByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_tag(Pointer Dwarf_Die1, ShortByReference Dwarf_HalfPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * operations on DIEs<br>
	 * die<br>
	 * Original signature : <code>int dwarf_tag(Dwarf_Die, Dwarf_Half*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1762</i>
	 */
	int dwarf_tag(LibdwarfLibrary.Dwarf_Die Dwarf_Die1, ShortBuffer Dwarf_HalfPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * operations on DIEs<br>
	 * die<br>
	 * Original signature : <code>int dwarf_tag(Dwarf_Die, Dwarf_Half*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1762</i>
	 */
	int dwarf_tag(Pointer Dwarf_Die1, ShortByReference Dwarf_HalfPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dwarf_dieoffset returns the global debug_info<br>
	 * section offset, not the CU relative offset.<br>
	 * die<br>
	 * Original signature : <code>int dwarf_dieoffset(Dwarf_Die, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1768</i><br>
	 * @deprecated use the safer methods {@link #dwarf_dieoffset(libdwarf.LibdwarfLibrary.Dwarf_Die, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_dieoffset(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_dieoffset(Pointer Dwarf_Die1, LongByReference Dwarf_OffPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * dwarf_dieoffset returns the global debug_info<br>
	 * section offset, not the CU relative offset.<br>
	 * die<br>
	 * Original signature : <code>int dwarf_dieoffset(Dwarf_Die, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1768</i>
	 */
	int dwarf_dieoffset(LibdwarfLibrary.Dwarf_Die Dwarf_Die1, LongBuffer Dwarf_OffPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dwarf_dieoffset returns the global debug_info<br>
	 * section offset, not the CU relative offset.<br>
	 * die<br>
	 * Original signature : <code>int dwarf_dieoffset(Dwarf_Die, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1768</i>
	 */
	int dwarf_dieoffset(Pointer Dwarf_Die1, LongByReference Dwarf_OffPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * NEW October 2015. DWARF5.<br>
	 * The DIE here can be any DIE in the relevant CU.<br>
	 * index is an index into .debug_addr.<br>
	 * This will look first for .debug_addr<br>
	 * in the dbg object DIE<br>
	 * and if not there (because the dbg object is<br>
	 * a dwo or dwp split dwarf object)<br>
	 * will look in the tied object if tied is available.<br>
	 * die<br>
	 * Original signature : <code>int dwarf_debug_addr_index_to_addr(Dwarf_Die, Dwarf_Unsigned, Dwarf_Addr*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1780</i><br>
	 * @deprecated use the safer methods {@link #dwarf_debug_addr_index_to_addr(libdwarf.LibdwarfLibrary.Dwarf_Die, long, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_debug_addr_index_to_addr(com.sun.jna.Pointer, long, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_debug_addr_index_to_addr(Pointer Dwarf_Die1, long Dwarf_Unsigned1, LongByReference Dwarf_AddrPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * NEW October 2015. DWARF5.<br>
	 * The DIE here can be any DIE in the relevant CU.<br>
	 * index is an index into .debug_addr.<br>
	 * This will look first for .debug_addr<br>
	 * in the dbg object DIE<br>
	 * and if not there (because the dbg object is<br>
	 * a dwo or dwp split dwarf object)<br>
	 * will look in the tied object if tied is available.<br>
	 * die<br>
	 * Original signature : <code>int dwarf_debug_addr_index_to_addr(Dwarf_Die, Dwarf_Unsigned, Dwarf_Addr*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1780</i>
	 */
	int dwarf_debug_addr_index_to_addr(LibdwarfLibrary.Dwarf_Die Dwarf_Die1, long Dwarf_Unsigned1, LongBuffer Dwarf_AddrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * NEW October 2015. DWARF5.<br>
	 * The DIE here can be any DIE in the relevant CU.<br>
	 * index is an index into .debug_addr.<br>
	 * This will look first for .debug_addr<br>
	 * in the dbg object DIE<br>
	 * and if not there (because the dbg object is<br>
	 * a dwo or dwp split dwarf object)<br>
	 * will look in the tied object if tied is available.<br>
	 * die<br>
	 * Original signature : <code>int dwarf_debug_addr_index_to_addr(Dwarf_Die, Dwarf_Unsigned, Dwarf_Addr*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1780</i>
	 */
	int dwarf_debug_addr_index_to_addr(Pointer Dwarf_Die1, long Dwarf_Unsigned1, LongByReference Dwarf_AddrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Reading a CU DIE with DW_AT_low_pc an indexed value<br>
	 * can be problematic as that interacts with DW_AT_addr_base<br>
	 * in that DIE. Here is a test readers may find useful<br>
	 * Original signature : <code>Dwarf_Bool dwarf_addr_form_is_indexed(int)</code><br>
	 * <i>native declaration : line 1787</i>
	 */
	int dwarf_addr_form_is_indexed(int form);
	/**
	 * dwarf_CU_dieoffset_given_die returns<br>
	 * the global debug_info section offset of the CU die<br>
	 * that is the CU containing the given_die<br>
	 * (the passed in DIE can be any DIE).<br>
	 * This information makes it possible for a consumer to<br>
	 * find and print CU context information for any die.<br>
	 * See also dwarf_get_cu_die_offset_given_cu_header_offset.<br>
	 * given_die<br>
	 * Original signature : <code>int dwarf_CU_dieoffset_given_die(Dwarf_Die, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1797</i><br>
	 * @deprecated use the safer methods {@link #dwarf_CU_dieoffset_given_die(libdwarf.LibdwarfLibrary.Dwarf_Die, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_CU_dieoffset_given_die(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_CU_dieoffset_given_die(Pointer Dwarf_Die1, LongByReference Dwarf_OffPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * dwarf_CU_dieoffset_given_die returns<br>
	 * the global debug_info section offset of the CU die<br>
	 * that is the CU containing the given_die<br>
	 * (the passed in DIE can be any DIE).<br>
	 * This information makes it possible for a consumer to<br>
	 * find and print CU context information for any die.<br>
	 * See also dwarf_get_cu_die_offset_given_cu_header_offset.<br>
	 * given_die<br>
	 * Original signature : <code>int dwarf_CU_dieoffset_given_die(Dwarf_Die, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1797</i>
	 */
	int dwarf_CU_dieoffset_given_die(LibdwarfLibrary.Dwarf_Die Dwarf_Die1, LongBuffer Dwarf_OffPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dwarf_CU_dieoffset_given_die returns<br>
	 * the global debug_info section offset of the CU die<br>
	 * that is the CU containing the given_die<br>
	 * (the passed in DIE can be any DIE).<br>
	 * This information makes it possible for a consumer to<br>
	 * find and print CU context information for any die.<br>
	 * See also dwarf_get_cu_die_offset_given_cu_header_offset.<br>
	 * given_die<br>
	 * Original signature : <code>int dwarf_CU_dieoffset_given_die(Dwarf_Die, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1797</i>
	 */
	int dwarf_CU_dieoffset_given_die(Pointer Dwarf_Die1, LongByReference Dwarf_OffPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dwarf_die_CU_offset returns the CU relative offset<br>
	 * not the global debug_info section offset, given<br>
	 * any DIE in the CU.  See also dwarf_CU_dieoffset_given_die.<br>
	 * die<br>
	 * Original signature : <code>int dwarf_die_CU_offset(Dwarf_Die, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1805</i><br>
	 * @deprecated use the safer methods {@link #dwarf_die_CU_offset(libdwarf.LibdwarfLibrary.Dwarf_Die, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_die_CU_offset(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_die_CU_offset(Pointer Dwarf_Die1, LongByReference Dwarf_OffPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * dwarf_die_CU_offset returns the CU relative offset<br>
	 * not the global debug_info section offset, given<br>
	 * any DIE in the CU.  See also dwarf_CU_dieoffset_given_die.<br>
	 * die<br>
	 * Original signature : <code>int dwarf_die_CU_offset(Dwarf_Die, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1805</i>
	 */
	int dwarf_die_CU_offset(LibdwarfLibrary.Dwarf_Die Dwarf_Die1, LongBuffer Dwarf_OffPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dwarf_die_CU_offset returns the CU relative offset<br>
	 * not the global debug_info section offset, given<br>
	 * any DIE in the CU.  See also dwarf_CU_dieoffset_given_die.<br>
	 * die<br>
	 * Original signature : <code>int dwarf_die_CU_offset(Dwarf_Die, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1805</i>
	 */
	int dwarf_die_CU_offset(Pointer Dwarf_Die1, LongByReference Dwarf_OffPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * die<br>
	 * Original signature : <code>int dwarf_die_CU_offset_range(Dwarf_Die, Dwarf_Off*, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1809</i><br>
	 * @deprecated use the safer methods {@link #dwarf_die_CU_offset_range(libdwarf.LibdwarfLibrary.Dwarf_Die, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_die_CU_offset_range(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_die_CU_offset_range(Pointer Dwarf_Die1, LongByReference Dwarf_OffPtr1, LongByReference Dwarf_OffPtr2, Pointer Dwarf_ErrorPtr1);
	/**
	 * die<br>
	 * Original signature : <code>int dwarf_die_CU_offset_range(Dwarf_Die, Dwarf_Off*, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1809</i>
	 */
	int dwarf_die_CU_offset_range(LibdwarfLibrary.Dwarf_Die Dwarf_Die1, LongBuffer Dwarf_OffPtr1, LongBuffer Dwarf_OffPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * die<br>
	 * Original signature : <code>int dwarf_die_CU_offset_range(Dwarf_Die, Dwarf_Off*, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1809</i>
	 */
	int dwarf_die_CU_offset_range(Pointer Dwarf_Die1, LongByReference Dwarf_OffPtr1, LongByReference Dwarf_OffPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * die<br>
	 * Original signature : <code>int dwarf_attr(Dwarf_Die, Dwarf_Half, Dwarf_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1814</i><br>
	 * @deprecated use the safer methods {@link #dwarf_attr(libdwarf.LibdwarfLibrary.Dwarf_Die, short, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_attr(com.sun.jna.Pointer, short, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_attr(Pointer Dwarf_Die1, short Dwarf_Half1, Pointer Dwarf_AttributePtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * die<br>
	 * Original signature : <code>int dwarf_attr(Dwarf_Die, Dwarf_Half, Dwarf_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1814</i>
	 */
	int dwarf_attr(LibdwarfLibrary.Dwarf_Die Dwarf_Die1, short Dwarf_Half1, PointerByReference Dwarf_AttributePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * die<br>
	 * Original signature : <code>int dwarf_attr(Dwarf_Die, Dwarf_Half, Dwarf_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1814</i>
	 */
	int dwarf_attr(Pointer Dwarf_Die1, short Dwarf_Half1, PointerByReference Dwarf_AttributePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * die<br>
	 * Original signature : <code>int dwarf_die_text(Dwarf_Die, Dwarf_Half, char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1819</i><br>
	 * @deprecated use the safer methods {@link #dwarf_die_text(libdwarf.LibdwarfLibrary.Dwarf_Die, short, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_die_text(com.sun.jna.Pointer, short, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_die_text(Pointer Dwarf_Die1, short Dwarf_Half1, PointerByReference charPtrPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * die<br>
	 * Original signature : <code>int dwarf_die_text(Dwarf_Die, Dwarf_Half, char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1819</i>
	 */
	int dwarf_die_text(LibdwarfLibrary.Dwarf_Die Dwarf_Die1, short Dwarf_Half1, PointerByReference charPtrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * die<br>
	 * Original signature : <code>int dwarf_die_text(Dwarf_Die, Dwarf_Half, char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1819</i>
	 */
	int dwarf_die_text(Pointer Dwarf_Die1, short Dwarf_Half1, PointerByReference charPtrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * die<br>
	 * Original signature : <code>int dwarf_diename(Dwarf_Die, char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1824</i><br>
	 * @deprecated use the safer methods {@link #dwarf_diename(libdwarf.LibdwarfLibrary.Dwarf_Die, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_diename(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_diename(Pointer Dwarf_Die1, PointerByReference charPtrPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * die<br>
	 * Original signature : <code>int dwarf_diename(Dwarf_Die, char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1824</i>
	 */
	int dwarf_diename(LibdwarfLibrary.Dwarf_Die Dwarf_Die1, PointerByReference charPtrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * die<br>
	 * Original signature : <code>int dwarf_diename(Dwarf_Die, char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1824</i>
	 */
	int dwarf_diename(Pointer Dwarf_Die1, PointerByReference charPtrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Returns the  abbrev code of the die. Cannot fail.<br>
	 * die<br>
	 * Original signature : <code>int dwarf_die_abbrev_code(Dwarf_Die)</code><br>
	 * <i>native declaration : line 1829</i><br>
	 * @deprecated use the safer methods {@link #dwarf_die_abbrev_code(libdwarf.LibdwarfLibrary.Dwarf_Die)} and {@link #dwarf_die_abbrev_code(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int dwarf_die_abbrev_code(Pointer Dwarf_Die1);
	/**
	 * Returns the  abbrev code of the die. Cannot fail.<br>
	 * die<br>
	 * Original signature : <code>int dwarf_die_abbrev_code(Dwarf_Die)</code><br>
	 * <i>native declaration : line 1829</i>
	 */
	int dwarf_die_abbrev_code(LibdwarfLibrary.Dwarf_Die Dwarf_Die1);
	/**
	 * Returns a flag through ab_has_child. Non-zero if<br>
	 * the DIE has children, zero if it does not.<br>
	 * die<br>
	 * Original signature : <code>int dwarf_die_abbrev_children_flag(Dwarf_Die, Dwarf_Half*)</code><br>
	 * <i>native declaration : line 1833</i><br>
	 * @deprecated use the safer methods {@link #dwarf_die_abbrev_children_flag(libdwarf.LibdwarfLibrary.Dwarf_Die, java.nio.ShortBuffer)} and {@link #dwarf_die_abbrev_children_flag(com.sun.jna.Pointer, com.sun.jna.ptr.ShortByReference)} instead
	 */
	@Deprecated 
	int dwarf_die_abbrev_children_flag(Pointer Dwarf_Die1, ShortByReference Dwarf_HalfPtr1);
	/**
	 * Returns a flag through ab_has_child. Non-zero if<br>
	 * the DIE has children, zero if it does not.<br>
	 * die<br>
	 * Original signature : <code>int dwarf_die_abbrev_children_flag(Dwarf_Die, Dwarf_Half*)</code><br>
	 * <i>native declaration : line 1833</i>
	 */
	int dwarf_die_abbrev_children_flag(LibdwarfLibrary.Dwarf_Die Dwarf_Die1, ShortBuffer Dwarf_HalfPtr1);
	/**
	 * Validate the sibling DIE. This only makes sense to call<br>
	 * if the sibling's DIEs have been travsersed and<br>
	 * dwarf_child called on each,<br>
	 * so that the last DIE dwarf_child saw was the last.<br>
	 * Essentially ensuring that (after such traversal) that we<br>
	 * are in the same place a sibling attribute would identify.<br>
	 * In case we return DW_DLV_ERROR, the global offset of the last<br>
	 * DIE traversed by dwarf_child is returned through *offset<br>
	 * sibling<br>
	 * Original signature : <code>int dwarf_validate_die_sibling(Dwarf_Die, Dwarf_Off*)</code><br>
	 * @param Dwarf_Die1 offset<br>
	 * <i>native declaration : line 1844</i><br>
	 * @deprecated use the safer methods {@link #dwarf_validate_die_sibling(libdwarf.LibdwarfLibrary.Dwarf_Die, java.nio.LongBuffer)} and {@link #dwarf_validate_die_sibling(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference)} instead
	 */
	@Deprecated 
	int dwarf_validate_die_sibling(Pointer Dwarf_Die1, LongByReference Dwarf_OffPtr1);
	/**
	 * Validate the sibling DIE. This only makes sense to call<br>
	 * if the sibling's DIEs have been travsersed and<br>
	 * dwarf_child called on each,<br>
	 * so that the last DIE dwarf_child saw was the last.<br>
	 * Essentially ensuring that (after such traversal) that we<br>
	 * are in the same place a sibling attribute would identify.<br>
	 * In case we return DW_DLV_ERROR, the global offset of the last<br>
	 * DIE traversed by dwarf_child is returned through *offset<br>
	 * sibling<br>
	 * Original signature : <code>int dwarf_validate_die_sibling(Dwarf_Die, Dwarf_Off*)</code><br>
	 * @param Dwarf_Die1 offset<br>
	 * <i>native declaration : line 1844</i>
	 */
	int dwarf_validate_die_sibling(LibdwarfLibrary.Dwarf_Die Dwarf_Die1, LongBuffer Dwarf_OffPtr1);
	/**
	 * convenience functions, alternative to using dwarf_attrlist<br>
	 * die<br>
	 * Original signature : <code>int dwarf_hasattr(Dwarf_Die, Dwarf_Half, Dwarf_Bool*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1847</i><br>
	 * @deprecated use the safer methods {@link #dwarf_hasattr(libdwarf.LibdwarfLibrary.Dwarf_Die, short, java.nio.IntBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_hasattr(com.sun.jna.Pointer, short, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_hasattr(Pointer Dwarf_Die1, short Dwarf_Half1, IntByReference Dwarf_BoolPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * convenience functions, alternative to using dwarf_attrlist<br>
	 * die<br>
	 * Original signature : <code>int dwarf_hasattr(Dwarf_Die, Dwarf_Half, Dwarf_Bool*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1847</i>
	 */
	int dwarf_hasattr(LibdwarfLibrary.Dwarf_Die Dwarf_Die1, short Dwarf_Half1, IntBuffer Dwarf_BoolPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * convenience functions, alternative to using dwarf_attrlist<br>
	 * die<br>
	 * Original signature : <code>int dwarf_hasattr(Dwarf_Die, Dwarf_Half, Dwarf_Bool*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1847</i>
	 */
	int dwarf_hasattr(Pointer Dwarf_Die1, short Dwarf_Half1, IntByReference Dwarf_BoolPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Returns the children offsets for the given offset<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_offset_list(Dwarf_Debug, Dwarf_Off, Dwarf_Bool, Dwarf_Off**, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1853</i><br>
	 * @deprecated use the safer methods {@link #dwarf_offset_list(libdwarf.LibdwarfLibrary.Dwarf_Debug, long, int, com.sun.jna.ptr.PointerByReference, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_offset_list(com.sun.jna.Pointer, long, int, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_offset_list(Pointer Dwarf_Debug1, long Dwarf_Off1, int Dwarf_Bool1, PointerByReference Dwarf_OffPtrPtr1, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Returns the children offsets for the given offset<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_offset_list(Dwarf_Debug, Dwarf_Off, Dwarf_Bool, Dwarf_Off**, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1853</i>
	 */
	int dwarf_offset_list(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, long Dwarf_Off1, int Dwarf_Bool1, PointerByReference Dwarf_OffPtrPtr1, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Returns the children offsets for the given offset<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_offset_list(Dwarf_Debug, Dwarf_Off, Dwarf_Bool, Dwarf_Off**, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1853</i>
	 */
	int dwarf_offset_list(Pointer Dwarf_Debug1, long Dwarf_Off1, int Dwarf_Bool1, PointerByReference Dwarf_OffPtrPtr1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_gnu_index_head(Dwarf_Debug, Dwarf_Bool, Dwarf_Gnu_Index_Head*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1864</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_gnu_index_head(libdwarf.LibdwarfLibrary.Dwarf_Debug, int, com.sun.jna.ptr.PointerByReference, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_gnu_index_head(com.sun.jna.Pointer, int, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_gnu_index_head(Pointer Dwarf_Debug1, int Dwarf_Bool1, Pointer Dwarf_Gnu_Index_HeadPtr1, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_gnu_index_head(Dwarf_Debug, Dwarf_Bool, Dwarf_Gnu_Index_Head*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1864</i>
	 */
	int dwarf_get_gnu_index_head(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, int Dwarf_Bool1, PointerByReference Dwarf_Gnu_Index_HeadPtr1, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_gnu_index_head(Dwarf_Debug, Dwarf_Bool, Dwarf_Gnu_Index_Head*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1864</i>
	 */
	int dwarf_get_gnu_index_head(Pointer Dwarf_Debug1, int Dwarf_Bool1, PointerByReference Dwarf_Gnu_Index_HeadPtr1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Frees all resources used for the indexes.<br>
	 * head<br>
	 * Original signature : <code>void dwarf_gnu_index_dealloc(Dwarf_Gnu_Index_Head)</code><br>
	 * <i>native declaration : line 1871</i><br>
	 * @deprecated use the safer methods {@link #dwarf_gnu_index_dealloc(libdwarf.LibdwarfLibrary.Dwarf_Gnu_Index_Head)} and {@link #dwarf_gnu_index_dealloc(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void dwarf_gnu_index_dealloc(Pointer Dwarf_Gnu_Index_Head1);
	/**
	 * Frees all resources used for the indexes.<br>
	 * head<br>
	 * Original signature : <code>void dwarf_gnu_index_dealloc(Dwarf_Gnu_Index_Head)</code><br>
	 * <i>native declaration : line 1871</i>
	 */
	void dwarf_gnu_index_dealloc(LibdwarfLibrary.Dwarf_Gnu_Index_Head Dwarf_Gnu_Index_Head1);
	/**
	 * head<br>
	 * Original signature : <code>int dwarf_get_gnu_index_block(Dwarf_Gnu_Index_Head, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Half*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1873</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_gnu_index_block(libdwarf.LibdwarfLibrary.Dwarf_Gnu_Index_Head, long, java.nio.LongBuffer, java.nio.ShortBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_gnu_index_block(com.sun.jna.Pointer, long, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.ShortByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_gnu_index_block(Pointer Dwarf_Gnu_Index_Head1, long Dwarf_Unsigned1, LongByReference Dwarf_UnsignedPtr1, ShortByReference Dwarf_HalfPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, LongByReference Dwarf_UnsignedPtr4, Pointer Dwarf_ErrorPtr1);
	/**
	 * head<br>
	 * Original signature : <code>int dwarf_get_gnu_index_block(Dwarf_Gnu_Index_Head, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Half*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1873</i>
	 */
	int dwarf_get_gnu_index_block(LibdwarfLibrary.Dwarf_Gnu_Index_Head Dwarf_Gnu_Index_Head1, long Dwarf_Unsigned1, LongBuffer Dwarf_UnsignedPtr1, ShortBuffer Dwarf_HalfPtr1, LongBuffer Dwarf_UnsignedPtr2, LongBuffer Dwarf_UnsignedPtr3, LongBuffer Dwarf_UnsignedPtr4, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * head<br>
	 * Original signature : <code>int dwarf_get_gnu_index_block(Dwarf_Gnu_Index_Head, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Half*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1873</i>
	 */
	int dwarf_get_gnu_index_block(Pointer Dwarf_Gnu_Index_Head1, long Dwarf_Unsigned1, LongByReference Dwarf_UnsignedPtr1, ShortByReference Dwarf_HalfPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, LongByReference Dwarf_UnsignedPtr4, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * head<br>
	 * Original signature : <code>int dwarf_get_gnu_index_block_entry(Dwarf_Gnu_Index_Head, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned*, const char**, unsigned char*, unsigned char*, unsigned char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1882</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_gnu_index_block_entry(libdwarf.LibdwarfLibrary.Dwarf_Gnu_Index_Head, long, long, java.nio.LongBuffer, java.lang.String[], java.nio.ByteBuffer, java.nio.ByteBuffer, java.nio.ByteBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_gnu_index_block_entry(com.sun.jna.Pointer, long, long, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_gnu_index_block_entry(Pointer Dwarf_Gnu_Index_Head1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, LongByReference Dwarf_UnsignedPtr1, PointerByReference charPtrPtr1, Pointer charPtr1, Pointer charPtr2, Pointer charPtr3, Pointer Dwarf_ErrorPtr1);
	/**
	 * head<br>
	 * Original signature : <code>int dwarf_get_gnu_index_block_entry(Dwarf_Gnu_Index_Head, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned*, const char**, unsigned char*, unsigned char*, unsigned char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1882</i>
	 */
	int dwarf_get_gnu_index_block_entry(LibdwarfLibrary.Dwarf_Gnu_Index_Head Dwarf_Gnu_Index_Head1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, LongBuffer Dwarf_UnsignedPtr1, String charPtrPtr1[], ByteBuffer charPtr1, ByteBuffer charPtr2, ByteBuffer charPtr3, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * head<br>
	 * Original signature : <code>int dwarf_get_gnu_index_block_entry(Dwarf_Gnu_Index_Head, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned*, const char**, unsigned char*, unsigned char*, unsigned char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1882</i>
	 */
	int dwarf_get_gnu_index_block_entry(Pointer Dwarf_Gnu_Index_Head1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, LongByReference Dwarf_UnsignedPtr1, PointerByReference charPtrPtr1, Pointer charPtr1, Pointer charPtr2, Pointer charPtr3, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * BEGIN: loclist_c interfaces<br>
	 * NEW October 2015.<br>
	 * This works for any attribute that identifies<br>
	 * a loclist or a locexpr. When the attribute is a locexpr<br>
	 * a single loclist (created by libdwarf)<br>
	 * is attached to loclist_head.<br>
	 * attr<br>
	 * Original signature : <code>int dwarf_get_loclist_c(Dwarf_Attribute, Dwarf_Loc_Head_c*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1899</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_loclist_c(libdwarf.LibdwarfLibrary.Dwarf_Attribute, com.sun.jna.ptr.PointerByReference, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_loclist_c(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_loclist_c(Pointer Dwarf_Attribute1, Pointer Dwarf_Loc_Head_cPtr1, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * BEGIN: loclist_c interfaces<br>
	 * NEW October 2015.<br>
	 * This works for any attribute that identifies<br>
	 * a loclist or a locexpr. When the attribute is a locexpr<br>
	 * a single loclist (created by libdwarf)<br>
	 * is attached to loclist_head.<br>
	 * attr<br>
	 * Original signature : <code>int dwarf_get_loclist_c(Dwarf_Attribute, Dwarf_Loc_Head_c*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1899</i>
	 */
	int dwarf_get_loclist_c(LibdwarfLibrary.Dwarf_Attribute Dwarf_Attribute1, PointerByReference Dwarf_Loc_Head_cPtr1, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * BEGIN: loclist_c interfaces<br>
	 * NEW October 2015.<br>
	 * This works for any attribute that identifies<br>
	 * a loclist or a locexpr. When the attribute is a locexpr<br>
	 * a single loclist (created by libdwarf)<br>
	 * is attached to loclist_head.<br>
	 * attr<br>
	 * Original signature : <code>int dwarf_get_loclist_c(Dwarf_Attribute, Dwarf_Loc_Head_c*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1899</i>
	 */
	int dwarf_get_loclist_c(Pointer Dwarf_Attribute1, PointerByReference Dwarf_Loc_Head_cPtr1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * DWARF2 kind is 2. DWARF3/4 kind is 3, DWARF5 kind is 5<br>
	 * Original signature : <code>int dwarf_get_loclist_head_kind(Dwarf_Loc_Head_c, unsigned int*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1911</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_loclist_head_kind(libdwarf.LibdwarfLibrary.Dwarf_Loc_Head_c, java.nio.IntBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_loclist_head_kind(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_loclist_head_kind(Pointer Dwarf_Loc_Head_c1, IntByReference intPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * DWARF2 kind is 2. DWARF3/4 kind is 3, DWARF5 kind is 5<br>
	 * Original signature : <code>int dwarf_get_loclist_head_kind(Dwarf_Loc_Head_c, unsigned int*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1911</i>
	 */
	int dwarf_get_loclist_head_kind(LibdwarfLibrary.Dwarf_Loc_Head_c Dwarf_Loc_Head_c1, IntBuffer intPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * DWARF2 kind is 2. DWARF3/4 kind is 3, DWARF5 kind is 5<br>
	 * Original signature : <code>int dwarf_get_loclist_head_kind(Dwarf_Loc_Head_c, unsigned int*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1911</i>
	 */
	int dwarf_get_loclist_head_kind(Pointer Dwarf_Loc_Head_c1, IntByReference intPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * loclist_head<br>
	 * Original signature : <code>int dwarf_get_locdesc_entry_d(Dwarf_Loc_Head_c, Dwarf_Unsigned, Dwarf_Small*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Bool*, Dwarf_Addr*, Dwarf_Addr*, Dwarf_Unsigned*, Dwarf_Locdesc_c*, Dwarf_Small*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * @param Dwarf_SmallPtr2 0,1, or 2<br>
	 * <i>native declaration : line 1916</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_locdesc_entry_d(libdwarf.LibdwarfLibrary.Dwarf_Loc_Head_c, long, java.nio.ByteBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.IntBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference, java.nio.ByteBuffer, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_locdesc_entry_d(com.sun.jna.Pointer, long, com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_locdesc_entry_d(Pointer Dwarf_Loc_Head_c1, long Dwarf_Unsigned1, Pointer Dwarf_SmallPtr1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, IntByReference Dwarf_BoolPtr1, LongByReference Dwarf_AddrPtr1, LongByReference Dwarf_AddrPtr2, LongByReference Dwarf_UnsignedPtr3, Pointer Dwarf_Locdesc_cPtr1, Pointer Dwarf_SmallPtr2, LongByReference Dwarf_UnsignedPtr4, LongByReference Dwarf_UnsignedPtr5, Pointer Dwarf_ErrorPtr1);
	/**
	 * loclist_head<br>
	 * Original signature : <code>int dwarf_get_locdesc_entry_d(Dwarf_Loc_Head_c, Dwarf_Unsigned, Dwarf_Small*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Bool*, Dwarf_Addr*, Dwarf_Addr*, Dwarf_Unsigned*, Dwarf_Locdesc_c*, Dwarf_Small*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * @param Dwarf_SmallPtr2 0,1, or 2<br>
	 * <i>native declaration : line 1916</i>
	 */
	int dwarf_get_locdesc_entry_d(LibdwarfLibrary.Dwarf_Loc_Head_c Dwarf_Loc_Head_c1, long Dwarf_Unsigned1, ByteBuffer Dwarf_SmallPtr1, LongBuffer Dwarf_UnsignedPtr1, LongBuffer Dwarf_UnsignedPtr2, IntBuffer Dwarf_BoolPtr1, LongBuffer Dwarf_AddrPtr1, LongBuffer Dwarf_AddrPtr2, LongBuffer Dwarf_UnsignedPtr3, PointerByReference Dwarf_Locdesc_cPtr1, ByteBuffer Dwarf_SmallPtr2, LongBuffer Dwarf_UnsignedPtr4, LongBuffer Dwarf_UnsignedPtr5, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * loclist_head<br>
	 * Original signature : <code>int dwarf_get_locdesc_entry_d(Dwarf_Loc_Head_c, Dwarf_Unsigned, Dwarf_Small*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Bool*, Dwarf_Addr*, Dwarf_Addr*, Dwarf_Unsigned*, Dwarf_Locdesc_c*, Dwarf_Small*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * @param Dwarf_SmallPtr2 0,1, or 2<br>
	 * <i>native declaration : line 1916</i>
	 */
	int dwarf_get_locdesc_entry_d(Pointer Dwarf_Loc_Head_c1, long Dwarf_Unsigned1, Pointer Dwarf_SmallPtr1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, IntByReference Dwarf_BoolPtr1, LongByReference Dwarf_AddrPtr1, LongByReference Dwarf_AddrPtr2, LongByReference Dwarf_UnsignedPtr3, PointerByReference Dwarf_Locdesc_cPtr1, Pointer Dwarf_SmallPtr2, LongByReference Dwarf_UnsignedPtr4, LongByReference Dwarf_UnsignedPtr5, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * loclist_head<br>
	 * Original signature : <code>int dwarf_get_locdesc_entry_c(Dwarf_Loc_Head_c, Dwarf_Unsigned, Dwarf_Small*, Dwarf_Addr*, Dwarf_Addr*, Dwarf_Unsigned*, Dwarf_Locdesc_c*, Dwarf_Small*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * @param Dwarf_SmallPtr2 0,1, or 2<br>
	 * <i>native declaration : line 1932</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_locdesc_entry_c(libdwarf.LibdwarfLibrary.Dwarf_Loc_Head_c, long, java.nio.ByteBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference, java.nio.ByteBuffer, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_locdesc_entry_c(com.sun.jna.Pointer, long, com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_locdesc_entry_c(Pointer Dwarf_Loc_Head_c1, long Dwarf_Unsigned1, Pointer Dwarf_SmallPtr1, LongByReference Dwarf_AddrPtr1, LongByReference Dwarf_AddrPtr2, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_Locdesc_cPtr1, Pointer Dwarf_SmallPtr2, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, Pointer Dwarf_ErrorPtr1);
	/**
	 * loclist_head<br>
	 * Original signature : <code>int dwarf_get_locdesc_entry_c(Dwarf_Loc_Head_c, Dwarf_Unsigned, Dwarf_Small*, Dwarf_Addr*, Dwarf_Addr*, Dwarf_Unsigned*, Dwarf_Locdesc_c*, Dwarf_Small*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * @param Dwarf_SmallPtr2 0,1, or 2<br>
	 * <i>native declaration : line 1932</i>
	 */
	int dwarf_get_locdesc_entry_c(LibdwarfLibrary.Dwarf_Loc_Head_c Dwarf_Loc_Head_c1, long Dwarf_Unsigned1, ByteBuffer Dwarf_SmallPtr1, LongBuffer Dwarf_AddrPtr1, LongBuffer Dwarf_AddrPtr2, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_Locdesc_cPtr1, ByteBuffer Dwarf_SmallPtr2, LongBuffer Dwarf_UnsignedPtr2, LongBuffer Dwarf_UnsignedPtr3, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * loclist_head<br>
	 * Original signature : <code>int dwarf_get_locdesc_entry_c(Dwarf_Loc_Head_c, Dwarf_Unsigned, Dwarf_Small*, Dwarf_Addr*, Dwarf_Addr*, Dwarf_Unsigned*, Dwarf_Locdesc_c*, Dwarf_Small*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * @param Dwarf_SmallPtr2 0,1, or 2<br>
	 * <i>native declaration : line 1932</i>
	 */
	int dwarf_get_locdesc_entry_c(Pointer Dwarf_Loc_Head_c1, long Dwarf_Unsigned1, Pointer Dwarf_SmallPtr1, LongByReference Dwarf_AddrPtr1, LongByReference Dwarf_AddrPtr2, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_Locdesc_cPtr1, Pointer Dwarf_SmallPtr2, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New June 2020 for DWARF5 (and all earlier).<br>
	 * Original signature : <code>int dwarf_get_location_op_value_d(Dwarf_Locdesc_c, Dwarf_Unsigned, Dwarf_Small*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1946</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_location_op_value_d(libdwarf.LibdwarfLibrary.Dwarf_Locdesc_c, long, java.nio.ByteBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_location_op_value_d(com.sun.jna.Pointer, long, com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_location_op_value_d(Pointer Dwarf_Locdesc_c1, long Dwarf_Unsigned1, Pointer Dwarf_SmallPtr1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, LongByReference Dwarf_UnsignedPtr4, LongByReference Dwarf_UnsignedPtr5, LongByReference Dwarf_UnsignedPtr6, LongByReference Dwarf_UnsignedPtr7, Pointer Dwarf_ErrorPtr1);
	/**
	 * New June 2020 for DWARF5 (and all earlier).<br>
	 * Original signature : <code>int dwarf_get_location_op_value_d(Dwarf_Locdesc_c, Dwarf_Unsigned, Dwarf_Small*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1946</i>
	 */
	int dwarf_get_location_op_value_d(LibdwarfLibrary.Dwarf_Locdesc_c Dwarf_Locdesc_c1, long Dwarf_Unsigned1, ByteBuffer Dwarf_SmallPtr1, LongBuffer Dwarf_UnsignedPtr1, LongBuffer Dwarf_UnsignedPtr2, LongBuffer Dwarf_UnsignedPtr3, LongBuffer Dwarf_UnsignedPtr4, LongBuffer Dwarf_UnsignedPtr5, LongBuffer Dwarf_UnsignedPtr6, LongBuffer Dwarf_UnsignedPtr7, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New June 2020 for DWARF5 (and all earlier).<br>
	 * Original signature : <code>int dwarf_get_location_op_value_d(Dwarf_Locdesc_c, Dwarf_Unsigned, Dwarf_Small*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1946</i>
	 */
	int dwarf_get_location_op_value_d(Pointer Dwarf_Locdesc_c1, long Dwarf_Unsigned1, Pointer Dwarf_SmallPtr1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, LongByReference Dwarf_UnsignedPtr4, LongByReference Dwarf_UnsignedPtr5, LongByReference Dwarf_UnsignedPtr6, LongByReference Dwarf_UnsignedPtr7, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * locdesc<br>
	 * Original signature : <code>int dwarf_get_location_op_value_c(Dwarf_Locdesc_c, Dwarf_Unsigned, Dwarf_Small*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1959</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_location_op_value_c(libdwarf.LibdwarfLibrary.Dwarf_Locdesc_c, long, java.nio.ByteBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_location_op_value_c(com.sun.jna.Pointer, long, com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_location_op_value_c(Pointer Dwarf_Locdesc_c1, long Dwarf_Unsigned1, Pointer Dwarf_SmallPtr1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, LongByReference Dwarf_UnsignedPtr4, Pointer Dwarf_ErrorPtr1);
	/**
	 * locdesc<br>
	 * Original signature : <code>int dwarf_get_location_op_value_c(Dwarf_Locdesc_c, Dwarf_Unsigned, Dwarf_Small*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1959</i>
	 */
	int dwarf_get_location_op_value_c(LibdwarfLibrary.Dwarf_Locdesc_c Dwarf_Locdesc_c1, long Dwarf_Unsigned1, ByteBuffer Dwarf_SmallPtr1, LongBuffer Dwarf_UnsignedPtr1, LongBuffer Dwarf_UnsignedPtr2, LongBuffer Dwarf_UnsignedPtr3, LongBuffer Dwarf_UnsignedPtr4, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * locdesc<br>
	 * Original signature : <code>int dwarf_get_location_op_value_c(Dwarf_Locdesc_c, Dwarf_Unsigned, Dwarf_Small*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1959</i>
	 */
	int dwarf_get_location_op_value_c(Pointer Dwarf_Locdesc_c1, long Dwarf_Unsigned1, Pointer Dwarf_SmallPtr1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, LongByReference Dwarf_UnsignedPtr4, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_loclist_from_expr_c(Dwarf_Debug, Dwarf_Ptr, Dwarf_Unsigned, Dwarf_Half, Dwarf_Half, Dwarf_Small, Dwarf_Loc_Head_c*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1968</i><br>
	 * @deprecated use the safer methods {@link #dwarf_loclist_from_expr_c(libdwarf.LibdwarfLibrary.Dwarf_Debug, com.sun.jna.Pointer, long, short, short, byte, com.sun.jna.ptr.PointerByReference, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_loclist_from_expr_c(com.sun.jna.Pointer, com.sun.jna.Pointer, long, short, short, byte, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_loclist_from_expr_c(Pointer Dwarf_Debug1, Pointer Dwarf_Ptr1, long Dwarf_Unsigned1, short Dwarf_Half1, short Dwarf_Half2, byte Dwarf_Small1, Pointer Dwarf_Loc_Head_cPtr1, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_loclist_from_expr_c(Dwarf_Debug, Dwarf_Ptr, Dwarf_Unsigned, Dwarf_Half, Dwarf_Half, Dwarf_Small, Dwarf_Loc_Head_c*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1968</i>
	 */
	int dwarf_loclist_from_expr_c(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, Pointer Dwarf_Ptr1, long Dwarf_Unsigned1, short Dwarf_Half1, short Dwarf_Half2, byte Dwarf_Small1, PointerByReference Dwarf_Loc_Head_cPtr1, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_loclist_from_expr_c(Dwarf_Debug, Dwarf_Ptr, Dwarf_Unsigned, Dwarf_Half, Dwarf_Half, Dwarf_Small, Dwarf_Loc_Head_c*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1968</i>
	 */
	int dwarf_loclist_from_expr_c(Pointer Dwarf_Debug1, Pointer Dwarf_Ptr1, long Dwarf_Unsigned1, short Dwarf_Half1, short Dwarf_Half2, byte Dwarf_Small1, PointerByReference Dwarf_Loc_Head_cPtr1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * This frees all memory allocated by the applicable<br>
	 * dwarf_get_loclist_c<br>
	 * loclist_head<br>
	 * Original signature : <code>void dwarf_loc_head_c_dealloc(Dwarf_Loc_Head_c)</code><br>
	 * <i>native declaration : line 1980</i><br>
	 * @deprecated use the safer methods {@link #dwarf_loc_head_c_dealloc(libdwarf.LibdwarfLibrary.Dwarf_Loc_Head_c)} and {@link #dwarf_loc_head_c_dealloc(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void dwarf_loc_head_c_dealloc(Pointer Dwarf_Loc_Head_c1);
	/**
	 * This frees all memory allocated by the applicable<br>
	 * dwarf_get_loclist_c<br>
	 * loclist_head<br>
	 * Original signature : <code>void dwarf_loc_head_c_dealloc(Dwarf_Loc_Head_c)</code><br>
	 * <i>native declaration : line 1980</i>
	 */
	void dwarf_loc_head_c_dealloc(LibdwarfLibrary.Dwarf_Loc_Head_c Dwarf_Loc_Head_c1);
	/**
	 * As of 2015 the preferred interface<br>
	 * is dwarf_get_loclist_c<br>
	 * and only dwarf_get_loclist_c will work<br>
	 * for DWARF5 (and also all earlier versions).<br>
	 * attr<br>
	 * Original signature : <code>int dwarf_loclist_n(Dwarf_Attribute, Dwarf_Locdesc***, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1989</i><br>
	 * @deprecated use the safer methods {@link #dwarf_loclist_n(libdwarf.LibdwarfLibrary.Dwarf_Attribute, com.sun.jna.ptr.PointerByReference, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_loclist_n(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_loclist_n(Pointer Dwarf_Attribute1, PointerByReference Dwarf_LocdescPtrPtrPtr1, LongByReference Dwarf_SignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * As of 2015 the preferred interface<br>
	 * is dwarf_get_loclist_c<br>
	 * and only dwarf_get_loclist_c will work<br>
	 * for DWARF5 (and also all earlier versions).<br>
	 * attr<br>
	 * Original signature : <code>int dwarf_loclist_n(Dwarf_Attribute, Dwarf_Locdesc***, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1989</i>
	 */
	int dwarf_loclist_n(LibdwarfLibrary.Dwarf_Attribute Dwarf_Attribute1, PointerByReference Dwarf_LocdescPtrPtrPtr1, LongBuffer Dwarf_SignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * As of 2015 the preferred interface<br>
	 * is dwarf_get_loclist_c<br>
	 * and only dwarf_get_loclist_c will work<br>
	 * for DWARF5 (and also all earlier versions).<br>
	 * attr<br>
	 * Original signature : <code>int dwarf_loclist_n(Dwarf_Attribute, Dwarf_Locdesc***, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 1989</i>
	 */
	int dwarf_loclist_n(Pointer Dwarf_Attribute1, PointerByReference Dwarf_LocdescPtrPtrPtr1, LongByReference Dwarf_SignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * The original interfaces.  Please do not use this.<br>
	 * attr<br>
	 * Original signature : <code>int dwarf_loclist(Dwarf_Attribute, Dwarf_Locdesc**, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * @param Dwarf_Attribute1 inflexible!<br>
	 * <i>native declaration : line 1995</i><br>
	 * @deprecated use the safer methods {@link #dwarf_loclist(libdwarf.LibdwarfLibrary.Dwarf_Attribute, libdwarf.Dwarf_Locdesc.ByReference[], java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_loclist(com.sun.jna.Pointer, libdwarf.Dwarf_Locdesc.ByReference[], com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_loclist(Pointer Dwarf_Attribute1, PointerByReference Dwarf_LocdescPtrPtr1, LongByReference Dwarf_SignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * The original interfaces.  Please do not use this.<br>
	 * attr<br>
	 * Original signature : <code>int dwarf_loclist(Dwarf_Attribute, Dwarf_Locdesc**, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * @param Dwarf_Attribute1 inflexible!<br>
	 * <i>native declaration : line 1995</i>
	 */
	int dwarf_loclist(LibdwarfLibrary.Dwarf_Attribute Dwarf_Attribute1, libdwarf.Dwarf_Locdesc.ByReference Dwarf_LocdescPtrPtr1[], LongBuffer Dwarf_SignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * The original interfaces.  Please do not use this.<br>
	 * attr<br>
	 * Original signature : <code>int dwarf_loclist(Dwarf_Attribute, Dwarf_Locdesc**, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * @param Dwarf_Attribute1 inflexible!<br>
	 * <i>native declaration : line 1995</i>
	 */
	int dwarf_loclist(Pointer Dwarf_Attribute1, libdwarf.Dwarf_Locdesc.ByReference Dwarf_LocdescPtrPtr1[], LongByReference Dwarf_SignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Extracts a dwarf expression from an expression byte stream.<br>
	 * Useful to get expressions from DW_CFA_def_cfa_expression<br>
	 * DW_CFA_expression DW_CFA_val_expression expression bytes.<br>
	 * 27 April 2009: dwarf_loclist_from_expr interface with<br>
	 * no addr_size is obsolete but supported,<br>
	 * use dwarf_loclist_from_expr_a instead.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_loclist_from_expr(Dwarf_Debug, Dwarf_Ptr, Dwarf_Unsigned, Dwarf_Locdesc**, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2007</i><br>
	 * @deprecated use the safer methods {@link #dwarf_loclist_from_expr(libdwarf.LibdwarfLibrary.Dwarf_Debug, com.sun.jna.Pointer, long, libdwarf.Dwarf_Locdesc.ByReference[], java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_loclist_from_expr(com.sun.jna.Pointer, com.sun.jna.Pointer, long, libdwarf.Dwarf_Locdesc.ByReference[], com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_loclist_from_expr(Pointer Dwarf_Debug1, Pointer Dwarf_Ptr1, long Dwarf_Unsigned1, PointerByReference Dwarf_LocdescPtrPtr1, LongByReference Dwarf_SignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Extracts a dwarf expression from an expression byte stream.<br>
	 * Useful to get expressions from DW_CFA_def_cfa_expression<br>
	 * DW_CFA_expression DW_CFA_val_expression expression bytes.<br>
	 * 27 April 2009: dwarf_loclist_from_expr interface with<br>
	 * no addr_size is obsolete but supported,<br>
	 * use dwarf_loclist_from_expr_a instead.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_loclist_from_expr(Dwarf_Debug, Dwarf_Ptr, Dwarf_Unsigned, Dwarf_Locdesc**, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2007</i>
	 */
	int dwarf_loclist_from_expr(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, Pointer Dwarf_Ptr1, long Dwarf_Unsigned1, libdwarf.Dwarf_Locdesc.ByReference Dwarf_LocdescPtrPtr1[], LongBuffer Dwarf_SignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Extracts a dwarf expression from an expression byte stream.<br>
	 * Useful to get expressions from DW_CFA_def_cfa_expression<br>
	 * DW_CFA_expression DW_CFA_val_expression expression bytes.<br>
	 * 27 April 2009: dwarf_loclist_from_expr interface with<br>
	 * no addr_size is obsolete but supported,<br>
	 * use dwarf_loclist_from_expr_a instead.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_loclist_from_expr(Dwarf_Debug, Dwarf_Ptr, Dwarf_Unsigned, Dwarf_Locdesc**, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2007</i>
	 */
	int dwarf_loclist_from_expr(Pointer Dwarf_Debug1, Pointer Dwarf_Ptr1, long Dwarf_Unsigned1, libdwarf.Dwarf_Locdesc.ByReference Dwarf_LocdescPtrPtr1[], LongByReference Dwarf_SignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dwarf_loclist_from_expr_a new 27 Apr 2009:<br>
	 * added addr_size argument.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_loclist_from_expr_a(Dwarf_Debug, Dwarf_Ptr, Dwarf_Unsigned, Dwarf_Half, Dwarf_Locdesc**, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2016</i><br>
	 * @deprecated use the safer methods {@link #dwarf_loclist_from_expr_a(libdwarf.LibdwarfLibrary.Dwarf_Debug, com.sun.jna.Pointer, long, short, libdwarf.Dwarf_Locdesc.ByReference[], java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_loclist_from_expr_a(com.sun.jna.Pointer, com.sun.jna.Pointer, long, short, libdwarf.Dwarf_Locdesc.ByReference[], com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_loclist_from_expr_a(Pointer Dwarf_Debug1, Pointer Dwarf_Ptr1, long Dwarf_Unsigned1, short Dwarf_Half1, PointerByReference Dwarf_LocdescPtrPtr1, LongByReference Dwarf_SignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * dwarf_loclist_from_expr_a new 27 Apr 2009:<br>
	 * added addr_size argument.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_loclist_from_expr_a(Dwarf_Debug, Dwarf_Ptr, Dwarf_Unsigned, Dwarf_Half, Dwarf_Locdesc**, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2016</i>
	 */
	int dwarf_loclist_from_expr_a(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, Pointer Dwarf_Ptr1, long Dwarf_Unsigned1, short Dwarf_Half1, libdwarf.Dwarf_Locdesc.ByReference Dwarf_LocdescPtrPtr1[], LongBuffer Dwarf_SignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dwarf_loclist_from_expr_a new 27 Apr 2009:<br>
	 * added addr_size argument.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_loclist_from_expr_a(Dwarf_Debug, Dwarf_Ptr, Dwarf_Unsigned, Dwarf_Half, Dwarf_Locdesc**, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2016</i>
	 */
	int dwarf_loclist_from_expr_a(Pointer Dwarf_Debug1, Pointer Dwarf_Ptr1, long Dwarf_Unsigned1, short Dwarf_Half1, libdwarf.Dwarf_Locdesc.ByReference Dwarf_LocdescPtrPtr1[], LongByReference Dwarf_SignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dwarf_loclist_from_expr_b new 13 Nov 2012:<br>
	 * added dwarf_version (DWARF version number<br>
	 * of the applicable compilation unit)<br>
	 * and offset_size arguments. Added for<br>
	 * DW_OP_GNU_implicit_pointer.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_loclist_from_expr_b(Dwarf_Debug, Dwarf_Ptr, Dwarf_Unsigned, Dwarf_Half, Dwarf_Half, Dwarf_Small, Dwarf_Locdesc**, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2029</i><br>
	 * @deprecated use the safer methods {@link #dwarf_loclist_from_expr_b(libdwarf.LibdwarfLibrary.Dwarf_Debug, com.sun.jna.Pointer, long, short, short, byte, libdwarf.Dwarf_Locdesc.ByReference[], java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_loclist_from_expr_b(com.sun.jna.Pointer, com.sun.jna.Pointer, long, short, short, byte, libdwarf.Dwarf_Locdesc.ByReference[], com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_loclist_from_expr_b(Pointer Dwarf_Debug1, Pointer Dwarf_Ptr1, long Dwarf_Unsigned1, short Dwarf_Half1, short Dwarf_Half2, byte Dwarf_Small1, PointerByReference Dwarf_LocdescPtrPtr1, LongByReference Dwarf_SignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * dwarf_loclist_from_expr_b new 13 Nov 2012:<br>
	 * added dwarf_version (DWARF version number<br>
	 * of the applicable compilation unit)<br>
	 * and offset_size arguments. Added for<br>
	 * DW_OP_GNU_implicit_pointer.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_loclist_from_expr_b(Dwarf_Debug, Dwarf_Ptr, Dwarf_Unsigned, Dwarf_Half, Dwarf_Half, Dwarf_Small, Dwarf_Locdesc**, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2029</i>
	 */
	int dwarf_loclist_from_expr_b(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, Pointer Dwarf_Ptr1, long Dwarf_Unsigned1, short Dwarf_Half1, short Dwarf_Half2, byte Dwarf_Small1, libdwarf.Dwarf_Locdesc.ByReference Dwarf_LocdescPtrPtr1[], LongBuffer Dwarf_SignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dwarf_loclist_from_expr_b new 13 Nov 2012:<br>
	 * added dwarf_version (DWARF version number<br>
	 * of the applicable compilation unit)<br>
	 * and offset_size arguments. Added for<br>
	 * DW_OP_GNU_implicit_pointer.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_loclist_from_expr_b(Dwarf_Debug, Dwarf_Ptr, Dwarf_Unsigned, Dwarf_Half, Dwarf_Half, Dwarf_Small, Dwarf_Locdesc**, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2029</i>
	 */
	int dwarf_loclist_from_expr_b(Pointer Dwarf_Debug1, Pointer Dwarf_Ptr1, long Dwarf_Unsigned1, short Dwarf_Half1, short Dwarf_Half2, byte Dwarf_Small1, libdwarf.Dwarf_Locdesc.ByReference Dwarf_LocdescPtrPtr1[], LongByReference Dwarf_SignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * die<br>
	 * Original signature : <code>int dwarf_lowpc(Dwarf_Die, Dwarf_Addr*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2039</i><br>
	 * @deprecated use the safer methods {@link #dwarf_lowpc(libdwarf.LibdwarfLibrary.Dwarf_Die, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_lowpc(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_lowpc(Pointer Dwarf_Die1, LongByReference Dwarf_AddrPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * die<br>
	 * Original signature : <code>int dwarf_lowpc(Dwarf_Die, Dwarf_Addr*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2039</i>
	 */
	int dwarf_lowpc(LibdwarfLibrary.Dwarf_Die Dwarf_Die1, LongBuffer Dwarf_AddrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * die<br>
	 * Original signature : <code>int dwarf_lowpc(Dwarf_Die, Dwarf_Addr*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2039</i>
	 */
	int dwarf_lowpc(Pointer Dwarf_Die1, LongByReference Dwarf_AddrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * When the highpc attribute is of class  'constant'<br>
	 * it is not an address, it is an offset from the<br>
	 * base address (such as lowpc) of the function.<br>
	 * This is therefore a required interface for DWARF4<br>
	 * style DW_AT_highpc.<br>
	 * die<br>
	 * Original signature : <code>int dwarf_highpc_b(Dwarf_Die, Dwarf_Addr*, Dwarf_Half*, Dwarf_Form_Class*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2048</i><br>
	 * @deprecated use the safer methods {@link #dwarf_highpc_b(libdwarf.LibdwarfLibrary.Dwarf_Die, java.nio.LongBuffer, java.nio.ShortBuffer, java.nio.IntBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_highpc_b(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.ShortByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_highpc_b(Pointer Dwarf_Die1, LongByReference Dwarf_AddrPtr1, ShortByReference Dwarf_HalfPtr1, IntByReference arg1, Pointer Dwarf_ErrorPtr1);
	/**
	 * When the highpc attribute is of class  'constant'<br>
	 * it is not an address, it is an offset from the<br>
	 * base address (such as lowpc) of the function.<br>
	 * This is therefore a required interface for DWARF4<br>
	 * style DW_AT_highpc.<br>
	 * die<br>
	 * Original signature : <code>int dwarf_highpc_b(Dwarf_Die, Dwarf_Addr*, Dwarf_Half*, Dwarf_Form_Class*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2048</i>
	 */
	int dwarf_highpc_b(LibdwarfLibrary.Dwarf_Die Dwarf_Die1, LongBuffer Dwarf_AddrPtr1, ShortBuffer Dwarf_HalfPtr1, IntBuffer arg1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * When the highpc attribute is of class  'constant'<br>
	 * it is not an address, it is an offset from the<br>
	 * base address (such as lowpc) of the function.<br>
	 * This is therefore a required interface for DWARF4<br>
	 * style DW_AT_highpc.<br>
	 * die<br>
	 * Original signature : <code>int dwarf_highpc_b(Dwarf_Die, Dwarf_Addr*, Dwarf_Half*, Dwarf_Form_Class*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2048</i>
	 */
	int dwarf_highpc_b(Pointer Dwarf_Die1, LongByReference Dwarf_AddrPtr1, ShortByReference Dwarf_HalfPtr1, IntByReference arg1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * This works for DWARF2 and DWARF3 styles of DW_AT_highpc,<br>
	 * but not for the DWARF4 class constant forms.<br>
	 * If the FORM is of class constant this returns an error<br>
	 * die<br>
	 * Original signature : <code>int dwarf_highpc(Dwarf_Die, Dwarf_Addr*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2057</i><br>
	 * @deprecated use the safer methods {@link #dwarf_highpc(libdwarf.LibdwarfLibrary.Dwarf_Die, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_highpc(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_highpc(Pointer Dwarf_Die1, LongByReference Dwarf_AddrPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * This works for DWARF2 and DWARF3 styles of DW_AT_highpc,<br>
	 * but not for the DWARF4 class constant forms.<br>
	 * If the FORM is of class constant this returns an error<br>
	 * die<br>
	 * Original signature : <code>int dwarf_highpc(Dwarf_Die, Dwarf_Addr*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2057</i>
	 */
	int dwarf_highpc(LibdwarfLibrary.Dwarf_Die Dwarf_Die1, LongBuffer Dwarf_AddrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * This works for DWARF2 and DWARF3 styles of DW_AT_highpc,<br>
	 * but not for the DWARF4 class constant forms.<br>
	 * If the FORM is of class constant this returns an error<br>
	 * die<br>
	 * Original signature : <code>int dwarf_highpc(Dwarf_Die, Dwarf_Addr*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2057</i>
	 */
	int dwarf_highpc(Pointer Dwarf_Die1, LongByReference Dwarf_AddrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New January 2016.<br>
	 * die<br>
	 * Original signature : <code>int dwarf_dietype_offset(Dwarf_Die, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2062</i><br>
	 * @deprecated use the safer methods {@link #dwarf_dietype_offset(libdwarf.LibdwarfLibrary.Dwarf_Die, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_dietype_offset(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_dietype_offset(Pointer Dwarf_Die1, LongByReference Dwarf_OffPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * New January 2016.<br>
	 * die<br>
	 * Original signature : <code>int dwarf_dietype_offset(Dwarf_Die, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2062</i>
	 */
	int dwarf_dietype_offset(LibdwarfLibrary.Dwarf_Die Dwarf_Die1, LongBuffer Dwarf_OffPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New January 2016.<br>
	 * die<br>
	 * Original signature : <code>int dwarf_dietype_offset(Dwarf_Die, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2062</i>
	 */
	int dwarf_dietype_offset(Pointer Dwarf_Die1, LongByReference Dwarf_OffPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * die<br>
	 * Original signature : <code>int dwarf_bytesize(Dwarf_Die, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2066</i><br>
	 * @deprecated use the safer methods {@link #dwarf_bytesize(libdwarf.LibdwarfLibrary.Dwarf_Die, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_bytesize(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_bytesize(Pointer Dwarf_Die1, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * die<br>
	 * Original signature : <code>int dwarf_bytesize(Dwarf_Die, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2066</i>
	 */
	int dwarf_bytesize(LibdwarfLibrary.Dwarf_Die Dwarf_Die1, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * die<br>
	 * Original signature : <code>int dwarf_bytesize(Dwarf_Die, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2066</i>
	 */
	int dwarf_bytesize(Pointer Dwarf_Die1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * die<br>
	 * Original signature : <code>int dwarf_bitsize(Dwarf_Die, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2070</i><br>
	 * @deprecated use the safer methods {@link #dwarf_bitsize(libdwarf.LibdwarfLibrary.Dwarf_Die, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_bitsize(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_bitsize(Pointer Dwarf_Die1, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * die<br>
	 * Original signature : <code>int dwarf_bitsize(Dwarf_Die, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2070</i>
	 */
	int dwarf_bitsize(LibdwarfLibrary.Dwarf_Die Dwarf_Die1, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * die<br>
	 * Original signature : <code>int dwarf_bitsize(Dwarf_Die, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2070</i>
	 */
	int dwarf_bitsize(Pointer Dwarf_Die1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * die<br>
	 * Original signature : <code>int dwarf_bitoffset(Dwarf_Die, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2074</i><br>
	 * @deprecated use the safer methods {@link #dwarf_bitoffset(libdwarf.LibdwarfLibrary.Dwarf_Die, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_bitoffset(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_bitoffset(Pointer Dwarf_Die1, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * die<br>
	 * Original signature : <code>int dwarf_bitoffset(Dwarf_Die, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2074</i>
	 */
	int dwarf_bitoffset(LibdwarfLibrary.Dwarf_Die Dwarf_Die1, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * die<br>
	 * Original signature : <code>int dwarf_bitoffset(Dwarf_Die, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2074</i>
	 */
	int dwarf_bitoffset(Pointer Dwarf_Die1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * die<br>
	 * Original signature : <code>int dwarf_srclang(Dwarf_Die, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2078</i><br>
	 * @deprecated use the safer methods {@link #dwarf_srclang(libdwarf.LibdwarfLibrary.Dwarf_Die, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_srclang(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_srclang(Pointer Dwarf_Die1, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * die<br>
	 * Original signature : <code>int dwarf_srclang(Dwarf_Die, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2078</i>
	 */
	int dwarf_srclang(LibdwarfLibrary.Dwarf_Die Dwarf_Die1, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * die<br>
	 * Original signature : <code>int dwarf_srclang(Dwarf_Die, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2078</i>
	 */
	int dwarf_srclang(Pointer Dwarf_Die1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * die<br>
	 * Original signature : <code>int dwarf_arrayorder(Dwarf_Die, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2082</i><br>
	 * @deprecated use the safer methods {@link #dwarf_arrayorder(libdwarf.LibdwarfLibrary.Dwarf_Die, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_arrayorder(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_arrayorder(Pointer Dwarf_Die1, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * die<br>
	 * Original signature : <code>int dwarf_arrayorder(Dwarf_Die, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2082</i>
	 */
	int dwarf_arrayorder(LibdwarfLibrary.Dwarf_Die Dwarf_Die1, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * die<br>
	 * Original signature : <code>int dwarf_arrayorder(Dwarf_Die, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2082</i>
	 */
	int dwarf_arrayorder(Pointer Dwarf_Die1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * this is the main interface to attributes of a DIE<br>
	 * die<br>
	 * Original signature : <code>int dwarf_attrlist(Dwarf_Die, Dwarf_Attribute**, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2089</i><br>
	 * @deprecated use the safer methods {@link #dwarf_attrlist(libdwarf.LibdwarfLibrary.Dwarf_Die, com.sun.jna.ptr.PointerByReference, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_attrlist(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_attrlist(Pointer Dwarf_Die1, PointerByReference Dwarf_AttributePtrPtr1, LongByReference Dwarf_SignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * this is the main interface to attributes of a DIE<br>
	 * die<br>
	 * Original signature : <code>int dwarf_attrlist(Dwarf_Die, Dwarf_Attribute**, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2089</i>
	 */
	int dwarf_attrlist(LibdwarfLibrary.Dwarf_Die Dwarf_Die1, PointerByReference Dwarf_AttributePtrPtr1, LongBuffer Dwarf_SignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * this is the main interface to attributes of a DIE<br>
	 * die<br>
	 * Original signature : <code>int dwarf_attrlist(Dwarf_Die, Dwarf_Attribute**, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2089</i>
	 */
	int dwarf_attrlist(Pointer Dwarf_Die1, PointerByReference Dwarf_AttributePtrPtr1, LongByReference Dwarf_SignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * query operations for attributes<br>
	 * attr<br>
	 * Original signature : <code>int dwarf_hasform(Dwarf_Attribute, Dwarf_Half, Dwarf_Bool*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2095</i><br>
	 * @deprecated use the safer methods {@link #dwarf_hasform(libdwarf.LibdwarfLibrary.Dwarf_Attribute, short, java.nio.IntBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_hasform(com.sun.jna.Pointer, short, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_hasform(Pointer Dwarf_Attribute1, short Dwarf_Half1, IntByReference Dwarf_BoolPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * query operations for attributes<br>
	 * attr<br>
	 * Original signature : <code>int dwarf_hasform(Dwarf_Attribute, Dwarf_Half, Dwarf_Bool*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2095</i>
	 */
	int dwarf_hasform(LibdwarfLibrary.Dwarf_Attribute Dwarf_Attribute1, short Dwarf_Half1, IntBuffer Dwarf_BoolPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * query operations for attributes<br>
	 * attr<br>
	 * Original signature : <code>int dwarf_hasform(Dwarf_Attribute, Dwarf_Half, Dwarf_Bool*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2095</i>
	 */
	int dwarf_hasform(Pointer Dwarf_Attribute1, short Dwarf_Half1, IntByReference Dwarf_BoolPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * attr<br>
	 * Original signature : <code>int dwarf_whatform(Dwarf_Attribute, Dwarf_Half*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2100</i><br>
	 * @deprecated use the safer methods {@link #dwarf_whatform(libdwarf.LibdwarfLibrary.Dwarf_Attribute, java.nio.ShortBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_whatform(com.sun.jna.Pointer, com.sun.jna.ptr.ShortByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_whatform(Pointer Dwarf_Attribute1, ShortByReference Dwarf_HalfPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * attr<br>
	 * Original signature : <code>int dwarf_whatform(Dwarf_Attribute, Dwarf_Half*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2100</i>
	 */
	int dwarf_whatform(LibdwarfLibrary.Dwarf_Attribute Dwarf_Attribute1, ShortBuffer Dwarf_HalfPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * attr<br>
	 * Original signature : <code>int dwarf_whatform(Dwarf_Attribute, Dwarf_Half*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2100</i>
	 */
	int dwarf_whatform(Pointer Dwarf_Attribute1, ShortByReference Dwarf_HalfPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * attr<br>
	 * Original signature : <code>int dwarf_whatform_direct(Dwarf_Attribute, Dwarf_Half*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2104</i><br>
	 * @deprecated use the safer methods {@link #dwarf_whatform_direct(libdwarf.LibdwarfLibrary.Dwarf_Attribute, java.nio.ShortBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_whatform_direct(com.sun.jna.Pointer, com.sun.jna.ptr.ShortByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_whatform_direct(Pointer Dwarf_Attribute1, ShortByReference Dwarf_HalfPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * attr<br>
	 * Original signature : <code>int dwarf_whatform_direct(Dwarf_Attribute, Dwarf_Half*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2104</i>
	 */
	int dwarf_whatform_direct(LibdwarfLibrary.Dwarf_Attribute Dwarf_Attribute1, ShortBuffer Dwarf_HalfPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * attr<br>
	 * Original signature : <code>int dwarf_whatform_direct(Dwarf_Attribute, Dwarf_Half*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2104</i>
	 */
	int dwarf_whatform_direct(Pointer Dwarf_Attribute1, ShortByReference Dwarf_HalfPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * attr<br>
	 * Original signature : <code>int dwarf_whatattr(Dwarf_Attribute, Dwarf_Half*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2107</i><br>
	 * @deprecated use the safer methods {@link #dwarf_whatattr(libdwarf.LibdwarfLibrary.Dwarf_Attribute, java.nio.ShortBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_whatattr(com.sun.jna.Pointer, com.sun.jna.ptr.ShortByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_whatattr(Pointer Dwarf_Attribute1, ShortByReference Dwarf_HalfPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * attr<br>
	 * Original signature : <code>int dwarf_whatattr(Dwarf_Attribute, Dwarf_Half*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2107</i>
	 */
	int dwarf_whatattr(LibdwarfLibrary.Dwarf_Attribute Dwarf_Attribute1, ShortBuffer Dwarf_HalfPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * attr<br>
	 * Original signature : <code>int dwarf_whatattr(Dwarf_Attribute, Dwarf_Half*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2107</i>
	 */
	int dwarf_whatattr(Pointer Dwarf_Attribute1, ShortByReference Dwarf_HalfPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dwarf_formref returns, thru return_offset, a CU-relative offset<br>
	 * and does not allow DW_FORM_ref_addr<br>
	 * attr<br>
	 * Original signature : <code>int dwarf_formref(Dwarf_Attribute, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2117</i><br>
	 * @deprecated use the safer methods {@link #dwarf_formref(libdwarf.LibdwarfLibrary.Dwarf_Attribute, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_formref(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_formref(Pointer Dwarf_Attribute1, LongByReference Dwarf_OffPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * dwarf_formref returns, thru return_offset, a CU-relative offset<br>
	 * and does not allow DW_FORM_ref_addr<br>
	 * attr<br>
	 * Original signature : <code>int dwarf_formref(Dwarf_Attribute, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2117</i>
	 */
	int dwarf_formref(LibdwarfLibrary.Dwarf_Attribute Dwarf_Attribute1, LongBuffer Dwarf_OffPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dwarf_formref returns, thru return_offset, a CU-relative offset<br>
	 * and does not allow DW_FORM_ref_addr<br>
	 * attr<br>
	 * Original signature : <code>int dwarf_formref(Dwarf_Attribute, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2117</i>
	 */
	int dwarf_formref(Pointer Dwarf_Attribute1, LongByReference Dwarf_OffPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dwarf_global_formref returns, thru return_offset,<br>
	 * a debug_info-relative offset and does allow all reference forms<br>
	 * attr<br>
	 * Original signature : <code>int dwarf_global_formref(Dwarf_Attribute, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2122</i><br>
	 * @deprecated use the safer methods {@link #dwarf_global_formref(libdwarf.LibdwarfLibrary.Dwarf_Attribute, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_global_formref(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_global_formref(Pointer Dwarf_Attribute1, LongByReference Dwarf_OffPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * dwarf_global_formref returns, thru return_offset,<br>
	 * a debug_info-relative offset and does allow all reference forms<br>
	 * attr<br>
	 * Original signature : <code>int dwarf_global_formref(Dwarf_Attribute, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2122</i>
	 */
	int dwarf_global_formref(LibdwarfLibrary.Dwarf_Attribute Dwarf_Attribute1, LongBuffer Dwarf_OffPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dwarf_global_formref returns, thru return_offset,<br>
	 * a debug_info-relative offset and does allow all reference forms<br>
	 * attr<br>
	 * Original signature : <code>int dwarf_global_formref(Dwarf_Attribute, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2122</i>
	 */
	int dwarf_global_formref(Pointer Dwarf_Attribute1, LongByReference Dwarf_OffPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dwarf_formsig8 returns in the caller-provided 8 byte area<br>
	 * the 8 bytes of a DW_FORM_ref_sig8.  Not a string.<br>
	 * attr<br>
	 * Original signature : <code>int dwarf_formsig8(Dwarf_Attribute, Dwarf_Sig8*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2128</i><br>
	 * @deprecated use the safer methods {@link #dwarf_formsig8(libdwarf.LibdwarfLibrary.Dwarf_Attribute, libdwarf.Dwarf_Sig8_s, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_formsig8(com.sun.jna.Pointer, libdwarf.Dwarf_Sig8_s, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_formsig8(Pointer Dwarf_Attribute1, Dwarf_Sig8_s Dwarf_Sig8Ptr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * dwarf_formsig8 returns in the caller-provided 8 byte area<br>
	 * the 8 bytes of a DW_FORM_ref_sig8.  Not a string.<br>
	 * attr<br>
	 * Original signature : <code>int dwarf_formsig8(Dwarf_Attribute, Dwarf_Sig8*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2128</i>
	 */
	int dwarf_formsig8(LibdwarfLibrary.Dwarf_Attribute Dwarf_Attribute1, Dwarf_Sig8_s Dwarf_Sig8Ptr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dwarf_formsig8 returns in the caller-provided 8 byte area<br>
	 * the 8 bytes of a DW_FORM_ref_sig8.  Not a string.<br>
	 * attr<br>
	 * Original signature : <code>int dwarf_formsig8(Dwarf_Attribute, Dwarf_Sig8*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2128</i>
	 */
	int dwarf_formsig8(Pointer Dwarf_Attribute1, Dwarf_Sig8_s Dwarf_Sig8Ptr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dwarf_formsig8_const returns in the caller-provided 8 byte area<br>
	 * the 8 bytes of a form const (DW_FORM_data8).  Not a string.<br>
	 * attr<br>
	 * Original signature : <code>int dwarf_formsig8_const(Dwarf_Attribute, Dwarf_Sig8*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2133</i><br>
	 * @deprecated use the safer methods {@link #dwarf_formsig8_const(libdwarf.LibdwarfLibrary.Dwarf_Attribute, libdwarf.Dwarf_Sig8_s, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_formsig8_const(com.sun.jna.Pointer, libdwarf.Dwarf_Sig8_s, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_formsig8_const(Pointer Dwarf_Attribute1, Dwarf_Sig8_s Dwarf_Sig8Ptr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * dwarf_formsig8_const returns in the caller-provided 8 byte area<br>
	 * the 8 bytes of a form const (DW_FORM_data8).  Not a string.<br>
	 * attr<br>
	 * Original signature : <code>int dwarf_formsig8_const(Dwarf_Attribute, Dwarf_Sig8*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2133</i>
	 */
	int dwarf_formsig8_const(LibdwarfLibrary.Dwarf_Attribute Dwarf_Attribute1, Dwarf_Sig8_s Dwarf_Sig8Ptr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dwarf_formsig8_const returns in the caller-provided 8 byte area<br>
	 * the 8 bytes of a form const (DW_FORM_data8).  Not a string.<br>
	 * attr<br>
	 * Original signature : <code>int dwarf_formsig8_const(Dwarf_Attribute, Dwarf_Sig8*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2133</i>
	 */
	int dwarf_formsig8_const(Pointer Dwarf_Attribute1, Dwarf_Sig8_s Dwarf_Sig8Ptr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * attr<br>
	 * Original signature : <code>int dwarf_formaddr(Dwarf_Attribute, Dwarf_Addr*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2137</i><br>
	 * @deprecated use the safer methods {@link #dwarf_formaddr(libdwarf.LibdwarfLibrary.Dwarf_Attribute, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_formaddr(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_formaddr(Pointer Dwarf_Attribute1, LongByReference Dwarf_AddrPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * attr<br>
	 * Original signature : <code>int dwarf_formaddr(Dwarf_Attribute, Dwarf_Addr*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2137</i>
	 */
	int dwarf_formaddr(LibdwarfLibrary.Dwarf_Attribute Dwarf_Attribute1, LongBuffer Dwarf_AddrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * attr<br>
	 * Original signature : <code>int dwarf_formaddr(Dwarf_Attribute, Dwarf_Addr*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2137</i>
	 */
	int dwarf_formaddr(Pointer Dwarf_Attribute1, LongByReference Dwarf_AddrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Part of DebugFission.  So a consumer can get the index when<br>
	 * the object with the actual .debug_addr section is<br>
	 * elsewhere. And so a print application can<br>
	 * print the index.  New May 2014<br>
	 * attr<br>
	 * Original signature : <code>int dwarf_get_debug_addr_index(Dwarf_Attribute, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2145</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_debug_addr_index(libdwarf.LibdwarfLibrary.Dwarf_Attribute, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_debug_addr_index(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_debug_addr_index(Pointer Dwarf_Attribute1, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Part of DebugFission.  So a consumer can get the index when<br>
	 * the object with the actual .debug_addr section is<br>
	 * elsewhere. And so a print application can<br>
	 * print the index.  New May 2014<br>
	 * attr<br>
	 * Original signature : <code>int dwarf_get_debug_addr_index(Dwarf_Attribute, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2145</i>
	 */
	int dwarf_get_debug_addr_index(LibdwarfLibrary.Dwarf_Attribute Dwarf_Attribute1, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Part of DebugFission.  So a consumer can get the index when<br>
	 * the object with the actual .debug_addr section is<br>
	 * elsewhere. And so a print application can<br>
	 * print the index.  New May 2014<br>
	 * attr<br>
	 * Original signature : <code>int dwarf_get_debug_addr_index(Dwarf_Attribute, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2145</i>
	 */
	int dwarf_get_debug_addr_index(Pointer Dwarf_Attribute1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * attr<br>
	 * Original signature : <code>int dwarf_formflag(Dwarf_Attribute, Dwarf_Bool*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2149</i><br>
	 * @deprecated use the safer methods {@link #dwarf_formflag(libdwarf.LibdwarfLibrary.Dwarf_Attribute, java.nio.IntBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_formflag(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_formflag(Pointer Dwarf_Attribute1, IntByReference Dwarf_BoolPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * attr<br>
	 * Original signature : <code>int dwarf_formflag(Dwarf_Attribute, Dwarf_Bool*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2149</i>
	 */
	int dwarf_formflag(LibdwarfLibrary.Dwarf_Attribute Dwarf_Attribute1, IntBuffer Dwarf_BoolPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * attr<br>
	 * Original signature : <code>int dwarf_formflag(Dwarf_Attribute, Dwarf_Bool*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2149</i>
	 */
	int dwarf_formflag(Pointer Dwarf_Attribute1, IntByReference Dwarf_BoolPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * attr<br>
	 * Original signature : <code>int dwarf_formdata16(Dwarf_Attribute, Dwarf_Form_Data16*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2153</i><br>
	 * @deprecated use the safer methods {@link #dwarf_formdata16(libdwarf.LibdwarfLibrary.Dwarf_Attribute, libdwarf.Dwarf_Form_Data16_s, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_formdata16(com.sun.jna.Pointer, libdwarf.Dwarf_Form_Data16_s, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_formdata16(Pointer Dwarf_Attribute1, Dwarf_Form_Data16_s Dwarf_Form_Data16Ptr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * attr<br>
	 * Original signature : <code>int dwarf_formdata16(Dwarf_Attribute, Dwarf_Form_Data16*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2153</i>
	 */
	int dwarf_formdata16(LibdwarfLibrary.Dwarf_Attribute Dwarf_Attribute1, Dwarf_Form_Data16_s Dwarf_Form_Data16Ptr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * attr<br>
	 * Original signature : <code>int dwarf_formdata16(Dwarf_Attribute, Dwarf_Form_Data16*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2153</i>
	 */
	int dwarf_formdata16(Pointer Dwarf_Attribute1, Dwarf_Form_Data16_s Dwarf_Form_Data16Ptr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * attr<br>
	 * Original signature : <code>int dwarf_formudata(Dwarf_Attribute, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2157</i><br>
	 * @deprecated use the safer methods {@link #dwarf_formudata(libdwarf.LibdwarfLibrary.Dwarf_Attribute, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_formudata(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_formudata(Pointer Dwarf_Attribute1, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * attr<br>
	 * Original signature : <code>int dwarf_formudata(Dwarf_Attribute, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2157</i>
	 */
	int dwarf_formudata(LibdwarfLibrary.Dwarf_Attribute Dwarf_Attribute1, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * attr<br>
	 * Original signature : <code>int dwarf_formudata(Dwarf_Attribute, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2157</i>
	 */
	int dwarf_formudata(Pointer Dwarf_Attribute1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * attr<br>
	 * Original signature : <code>int dwarf_formsdata(Dwarf_Attribute, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2161</i><br>
	 * @deprecated use the safer methods {@link #dwarf_formsdata(libdwarf.LibdwarfLibrary.Dwarf_Attribute, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_formsdata(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_formsdata(Pointer Dwarf_Attribute1, LongByReference Dwarf_SignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * attr<br>
	 * Original signature : <code>int dwarf_formsdata(Dwarf_Attribute, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2161</i>
	 */
	int dwarf_formsdata(LibdwarfLibrary.Dwarf_Attribute Dwarf_Attribute1, LongBuffer Dwarf_SignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * attr<br>
	 * Original signature : <code>int dwarf_formsdata(Dwarf_Attribute, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2161</i>
	 */
	int dwarf_formsdata(Pointer Dwarf_Attribute1, LongByReference Dwarf_SignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * attr<br>
	 * Original signature : <code>int dwarf_formblock(Dwarf_Attribute, Dwarf_Block**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2165</i><br>
	 * @deprecated use the safer methods {@link #dwarf_formblock(libdwarf.LibdwarfLibrary.Dwarf_Attribute, libdwarf.Dwarf_Block.ByReference[], com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_formblock(com.sun.jna.Pointer, libdwarf.Dwarf_Block.ByReference[], com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_formblock(Pointer Dwarf_Attribute1, PointerByReference Dwarf_BlockPtrPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * attr<br>
	 * Original signature : <code>int dwarf_formblock(Dwarf_Attribute, Dwarf_Block**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2165</i>
	 */
	int dwarf_formblock(LibdwarfLibrary.Dwarf_Attribute Dwarf_Attribute1, Dwarf_Block.ByReference Dwarf_BlockPtrPtr1[], PointerByReference Dwarf_ErrorPtr1);
	/**
	 * attr<br>
	 * Original signature : <code>int dwarf_formblock(Dwarf_Attribute, Dwarf_Block**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2165</i>
	 */
	int dwarf_formblock(Pointer Dwarf_Attribute1, Dwarf_Block.ByReference Dwarf_BlockPtrPtr1[], PointerByReference Dwarf_ErrorPtr1);
	/**
	 * attr<br>
	 * Original signature : <code>int dwarf_formstring(Dwarf_Attribute, char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2169</i><br>
	 * @deprecated use the safer methods {@link #dwarf_formstring(libdwarf.LibdwarfLibrary.Dwarf_Attribute, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_formstring(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_formstring(Pointer Dwarf_Attribute1, PointerByReference charPtrPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * attr<br>
	 * Original signature : <code>int dwarf_formstring(Dwarf_Attribute, char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2169</i>
	 */
	int dwarf_formstring(LibdwarfLibrary.Dwarf_Attribute Dwarf_Attribute1, PointerByReference charPtrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * attr<br>
	 * Original signature : <code>int dwarf_formstring(Dwarf_Attribute, char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2169</i>
	 */
	int dwarf_formstring(Pointer Dwarf_Attribute1, PointerByReference charPtrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * DebugFission.  So a DWARF print application can<br>
	 * get the string index (DW_FORM_strx) and print it.<br>
	 * A convenience function.<br>
	 * New May 2014.<br>
	 * attr<br>
	 * Original signature : <code>int dwarf_get_debug_str_index(Dwarf_Attribute, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2177</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_debug_str_index(libdwarf.LibdwarfLibrary.Dwarf_Attribute, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_debug_str_index(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_debug_str_index(Pointer Dwarf_Attribute1, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * DebugFission.  So a DWARF print application can<br>
	 * get the string index (DW_FORM_strx) and print it.<br>
	 * A convenience function.<br>
	 * New May 2014.<br>
	 * attr<br>
	 * Original signature : <code>int dwarf_get_debug_str_index(Dwarf_Attribute, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2177</i>
	 */
	int dwarf_get_debug_str_index(LibdwarfLibrary.Dwarf_Attribute Dwarf_Attribute1, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * DebugFission.  So a DWARF print application can<br>
	 * get the string index (DW_FORM_strx) and print it.<br>
	 * A convenience function.<br>
	 * New May 2014.<br>
	 * attr<br>
	 * Original signature : <code>int dwarf_get_debug_str_index(Dwarf_Attribute, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2177</i>
	 */
	int dwarf_get_debug_str_index(Pointer Dwarf_Attribute1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * attr<br>
	 * Original signature : <code>int dwarf_formexprloc(Dwarf_Attribute, Dwarf_Unsigned*, Dwarf_Ptr*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2182</i><br>
	 * @deprecated use the safer methods {@link #dwarf_formexprloc(libdwarf.LibdwarfLibrary.Dwarf_Attribute, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_formexprloc(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_formexprloc(Pointer Dwarf_Attribute1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_PtrPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * attr<br>
	 * Original signature : <code>int dwarf_formexprloc(Dwarf_Attribute, Dwarf_Unsigned*, Dwarf_Ptr*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2182</i>
	 */
	int dwarf_formexprloc(LibdwarfLibrary.Dwarf_Attribute Dwarf_Attribute1, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_PtrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * attr<br>
	 * Original signature : <code>int dwarf_formexprloc(Dwarf_Attribute, Dwarf_Unsigned*, Dwarf_Ptr*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2182</i>
	 */
	int dwarf_formexprloc(Pointer Dwarf_Attribute1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_PtrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dwarf_srclines  is the original interface from 1993.<br>
	 * die<br>
	 * Original signature : <code>int dwarf_srclines(Dwarf_Die, Dwarf_Line**, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2192</i><br>
	 * @deprecated use the safer methods {@link #dwarf_srclines(libdwarf.LibdwarfLibrary.Dwarf_Die, com.sun.jna.ptr.PointerByReference, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_srclines(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_srclines(Pointer Dwarf_Die1, PointerByReference Dwarf_LinePtrPtr1, LongByReference Dwarf_SignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * dwarf_srclines  is the original interface from 1993.<br>
	 * die<br>
	 * Original signature : <code>int dwarf_srclines(Dwarf_Die, Dwarf_Line**, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2192</i>
	 */
	int dwarf_srclines(LibdwarfLibrary.Dwarf_Die Dwarf_Die1, PointerByReference Dwarf_LinePtrPtr1, LongBuffer Dwarf_SignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dwarf_srclines  is the original interface from 1993.<br>
	 * die<br>
	 * Original signature : <code>int dwarf_srclines(Dwarf_Die, Dwarf_Line**, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2192</i>
	 */
	int dwarf_srclines(Pointer Dwarf_Die1, PointerByReference Dwarf_LinePtrPtr1, LongByReference Dwarf_SignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * If we have two-level line tables, this will return the<br>
	 * logicals table in linebuf and the actuals table in<br>
	 * linebuf_actuals. For old-style (one-level) tables, it<br>
	 * will return the single table through linebuf, and the<br>
	 * value returned through linecount_actuals will be 0.<br>
	 * The actual version number is returned through version.<br>
	 * For two-level line tables, the version returned will<br>
	 * be 0xf006. This interface can return data from two-level<br>
	 * line tables, which are experimental.<br>
	 * Most users will not wish to use dwarf_srclines_two_level<br>
	 * die<br>
	 * Original signature : <code>int dwarf_srclines_two_level(Dwarf_Die, Dwarf_Unsigned*, Dwarf_Line**, Dwarf_Signed*, Dwarf_Line**, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2208</i><br>
	 * @deprecated use the safer methods {@link #dwarf_srclines_two_level(libdwarf.LibdwarfLibrary.Dwarf_Die, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_srclines_two_level(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_srclines_two_level(Pointer Dwarf_Die1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_LinePtrPtr1, LongByReference Dwarf_SignedPtr1, PointerByReference Dwarf_LinePtrPtr2, LongByReference Dwarf_SignedPtr2, Pointer Dwarf_ErrorPtr1);
	/**
	 * If we have two-level line tables, this will return the<br>
	 * logicals table in linebuf and the actuals table in<br>
	 * linebuf_actuals. For old-style (one-level) tables, it<br>
	 * will return the single table through linebuf, and the<br>
	 * value returned through linecount_actuals will be 0.<br>
	 * The actual version number is returned through version.<br>
	 * For two-level line tables, the version returned will<br>
	 * be 0xf006. This interface can return data from two-level<br>
	 * line tables, which are experimental.<br>
	 * Most users will not wish to use dwarf_srclines_two_level<br>
	 * die<br>
	 * Original signature : <code>int dwarf_srclines_two_level(Dwarf_Die, Dwarf_Unsigned*, Dwarf_Line**, Dwarf_Signed*, Dwarf_Line**, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2208</i>
	 */
	int dwarf_srclines_two_level(LibdwarfLibrary.Dwarf_Die Dwarf_Die1, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_LinePtrPtr1, LongBuffer Dwarf_SignedPtr1, PointerByReference Dwarf_LinePtrPtr2, LongBuffer Dwarf_SignedPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * If we have two-level line tables, this will return the<br>
	 * logicals table in linebuf and the actuals table in<br>
	 * linebuf_actuals. For old-style (one-level) tables, it<br>
	 * will return the single table through linebuf, and the<br>
	 * value returned through linecount_actuals will be 0.<br>
	 * The actual version number is returned through version.<br>
	 * For two-level line tables, the version returned will<br>
	 * be 0xf006. This interface can return data from two-level<br>
	 * line tables, which are experimental.<br>
	 * Most users will not wish to use dwarf_srclines_two_level<br>
	 * die<br>
	 * Original signature : <code>int dwarf_srclines_two_level(Dwarf_Die, Dwarf_Unsigned*, Dwarf_Line**, Dwarf_Signed*, Dwarf_Line**, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2208</i>
	 */
	int dwarf_srclines_two_level(Pointer Dwarf_Die1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_LinePtrPtr1, LongByReference Dwarf_SignedPtr1, PointerByReference Dwarf_LinePtrPtr2, LongByReference Dwarf_SignedPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>void dwarf_srclines_dealloc(Dwarf_Debug, Dwarf_Line*, Dwarf_Signed)</code><br>
	 * <i>native declaration : line 2226</i><br>
	 * @deprecated use the safer methods {@link #dwarf_srclines_dealloc(libdwarf.LibdwarfLibrary.Dwarf_Debug, com.sun.jna.ptr.PointerByReference, long)} and {@link #dwarf_srclines_dealloc(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, long)} instead
	 */
	@Deprecated 
	void dwarf_srclines_dealloc(Pointer Dwarf_Debug1, Pointer Dwarf_LinePtr1, long Dwarf_Signed1);
	/**
	 * dbg<br>
	 * Original signature : <code>void dwarf_srclines_dealloc(Dwarf_Debug, Dwarf_Line*, Dwarf_Signed)</code><br>
	 * <i>native declaration : line 2226</i>
	 */
	void dwarf_srclines_dealloc(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, PointerByReference Dwarf_LinePtr1, long Dwarf_Signed1);
	/**
	 * dbg<br>
	 * Original signature : <code>void dwarf_srclines_dealloc(Dwarf_Debug, Dwarf_Line*, Dwarf_Signed)</code><br>
	 * <i>native declaration : line 2226</i>
	 */
	void dwarf_srclines_dealloc(Pointer Dwarf_Debug1, PointerByReference Dwarf_LinePtr1, long Dwarf_Signed1);
	/**
	 * New October 2015, must be used to deallocating<br>
	 * what is allocated by dwarf_srclines_b and<br>
	 * dwarf_srclines_from_linecontext  use.<br>
	 * Works for DWARF2,3,4,5 and for experimental line tables.<br>
	 * New work should use the new Dwarf_Line_Context<br>
	 * interface.<br>
	 * This interface only reads the line table header, so<br>
	 * it takes relatively little time.<br>
	 * is_single_table will be set non-zero for all standard dwarf line sections.<br>
	 * is_single_table will be set zero for line sections with the<br>
	 * two_level line table extension (which will have *version_out 0xf006).<br>
	 * die<br>
	 * Original signature : <code>int dwarf_srclines_b(Dwarf_Die, Dwarf_Unsigned*, Dwarf_Small*, Dwarf_Line_Context*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2242</i><br>
	 * @deprecated use the safer methods {@link #dwarf_srclines_b(libdwarf.LibdwarfLibrary.Dwarf_Die, java.nio.LongBuffer, java.nio.ByteBuffer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_srclines_b(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_srclines_b(Pointer Dwarf_Die1, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_SmallPtr1, Pointer Dwarf_Line_ContextPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * New October 2015, must be used to deallocating<br>
	 * what is allocated by dwarf_srclines_b and<br>
	 * dwarf_srclines_from_linecontext  use.<br>
	 * Works for DWARF2,3,4,5 and for experimental line tables.<br>
	 * New work should use the new Dwarf_Line_Context<br>
	 * interface.<br>
	 * This interface only reads the line table header, so<br>
	 * it takes relatively little time.<br>
	 * is_single_table will be set non-zero for all standard dwarf line sections.<br>
	 * is_single_table will be set zero for line sections with the<br>
	 * two_level line table extension (which will have *version_out 0xf006).<br>
	 * die<br>
	 * Original signature : <code>int dwarf_srclines_b(Dwarf_Die, Dwarf_Unsigned*, Dwarf_Small*, Dwarf_Line_Context*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2242</i>
	 */
	int dwarf_srclines_b(LibdwarfLibrary.Dwarf_Die Dwarf_Die1, LongBuffer Dwarf_UnsignedPtr1, ByteBuffer Dwarf_SmallPtr1, PointerByReference Dwarf_Line_ContextPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New October 2015, must be used to deallocating<br>
	 * what is allocated by dwarf_srclines_b and<br>
	 * dwarf_srclines_from_linecontext  use.<br>
	 * Works for DWARF2,3,4,5 and for experimental line tables.<br>
	 * New work should use the new Dwarf_Line_Context<br>
	 * interface.<br>
	 * This interface only reads the line table header, so<br>
	 * it takes relatively little time.<br>
	 * is_single_table will be set non-zero for all standard dwarf line sections.<br>
	 * is_single_table will be set zero for line sections with the<br>
	 * two_level line table extension (which will have *version_out 0xf006).<br>
	 * die<br>
	 * Original signature : <code>int dwarf_srclines_b(Dwarf_Die, Dwarf_Unsigned*, Dwarf_Small*, Dwarf_Line_Context*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2242</i>
	 */
	int dwarf_srclines_b(Pointer Dwarf_Die1, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_SmallPtr1, PointerByReference Dwarf_Line_ContextPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New October 2015.  Returns line details.<br>
	 * Works for DWARF2,3,4,5.  If linecount<br>
	 * returned is zero this is a line table with no lines.<br>
	 * Original signature : <code>int dwarf_srclines_from_linecontext(Dwarf_Line_Context, Dwarf_Line**, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2254</i><br>
	 * @deprecated use the safer methods {@link #dwarf_srclines_from_linecontext(libdwarf.LibdwarfLibrary.Dwarf_Line_Context, com.sun.jna.ptr.PointerByReference, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_srclines_from_linecontext(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_srclines_from_linecontext(Pointer Dwarf_Line_Context1, PointerByReference Dwarf_LinePtrPtr1, LongByReference Dwarf_SignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * New October 2015.  Returns line details.<br>
	 * Works for DWARF2,3,4,5.  If linecount<br>
	 * returned is zero this is a line table with no lines.<br>
	 * Original signature : <code>int dwarf_srclines_from_linecontext(Dwarf_Line_Context, Dwarf_Line**, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2254</i>
	 */
	int dwarf_srclines_from_linecontext(LibdwarfLibrary.Dwarf_Line_Context Dwarf_Line_Context1, PointerByReference Dwarf_LinePtrPtr1, LongBuffer Dwarf_SignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New October 2015.  Returns line details.<br>
	 * Works for DWARF2,3,4,5.  If linecount<br>
	 * returned is zero this is a line table with no lines.<br>
	 * Original signature : <code>int dwarf_srclines_from_linecontext(Dwarf_Line_Context, Dwarf_Line**, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2254</i>
	 */
	int dwarf_srclines_from_linecontext(Pointer Dwarf_Line_Context1, PointerByReference Dwarf_LinePtrPtr1, LongByReference Dwarf_SignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New October 2015.  Returns line details.<br>
	 * Works for DWARF2,3,4,5 and for experimental<br>
	 * two-level line tables. A single level table will<br>
	 * have *linebuf_actuals and *linecount_actuals set<br>
	 * to 0.<br>
	 * Original signature : <code>int dwarf_srclines_two_level_from_linecontext(Dwarf_Line_Context, Dwarf_Line**, Dwarf_Signed*, Dwarf_Line**, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2265</i><br>
	 * @deprecated use the safer methods {@link #dwarf_srclines_two_level_from_linecontext(libdwarf.LibdwarfLibrary.Dwarf_Line_Context, com.sun.jna.ptr.PointerByReference, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_srclines_two_level_from_linecontext(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_srclines_two_level_from_linecontext(Pointer Dwarf_Line_Context1, PointerByReference Dwarf_LinePtrPtr1, LongByReference Dwarf_SignedPtr1, PointerByReference Dwarf_LinePtrPtr2, LongByReference Dwarf_SignedPtr2, Pointer Dwarf_ErrorPtr1);
	/**
	 * New October 2015.  Returns line details.<br>
	 * Works for DWARF2,3,4,5 and for experimental<br>
	 * two-level line tables. A single level table will<br>
	 * have *linebuf_actuals and *linecount_actuals set<br>
	 * to 0.<br>
	 * Original signature : <code>int dwarf_srclines_two_level_from_linecontext(Dwarf_Line_Context, Dwarf_Line**, Dwarf_Signed*, Dwarf_Line**, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2265</i>
	 */
	int dwarf_srclines_two_level_from_linecontext(LibdwarfLibrary.Dwarf_Line_Context Dwarf_Line_Context1, PointerByReference Dwarf_LinePtrPtr1, LongBuffer Dwarf_SignedPtr1, PointerByReference Dwarf_LinePtrPtr2, LongBuffer Dwarf_SignedPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New October 2015.  Returns line details.<br>
	 * Works for DWARF2,3,4,5 and for experimental<br>
	 * two-level line tables. A single level table will<br>
	 * have *linebuf_actuals and *linecount_actuals set<br>
	 * to 0.<br>
	 * Original signature : <code>int dwarf_srclines_two_level_from_linecontext(Dwarf_Line_Context, Dwarf_Line**, Dwarf_Signed*, Dwarf_Line**, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2265</i>
	 */
	int dwarf_srclines_two_level_from_linecontext(Pointer Dwarf_Line_Context1, PointerByReference Dwarf_LinePtrPtr1, LongByReference Dwarf_SignedPtr1, PointerByReference Dwarf_LinePtrPtr2, LongByReference Dwarf_SignedPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dwarf_srclines_dealloc_b(), created October 2015, is the<br>
	 * appropriate method for deallocating everything<br>
	 * and dwarf_srclines_from_linecontext(),<br>
	 * dwarf_srclines_twolevel_from_linecontext(),<br>
	 * and dwarf_srclines_b()  allocate.<br>
	 * line_context<br>
	 * Original signature : <code>void dwarf_srclines_dealloc_b(Dwarf_Line_Context)</code><br>
	 * <i>native declaration : line 2278</i><br>
	 * @deprecated use the safer methods {@link #dwarf_srclines_dealloc_b(libdwarf.LibdwarfLibrary.Dwarf_Line_Context)} and {@link #dwarf_srclines_dealloc_b(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void dwarf_srclines_dealloc_b(Pointer Dwarf_Line_Context1);
	/**
	 * dwarf_srclines_dealloc_b(), created October 2015, is the<br>
	 * appropriate method for deallocating everything<br>
	 * and dwarf_srclines_from_linecontext(),<br>
	 * dwarf_srclines_twolevel_from_linecontext(),<br>
	 * and dwarf_srclines_b()  allocate.<br>
	 * line_context<br>
	 * Original signature : <code>void dwarf_srclines_dealloc_b(Dwarf_Line_Context)</code><br>
	 * <i>native declaration : line 2278</i>
	 */
	void dwarf_srclines_dealloc_b(LibdwarfLibrary.Dwarf_Line_Context Dwarf_Line_Context1);
	/**
	 * The offset is in the relevent .debug_line or .debug_line.dwo<br>
	 * section (and in a split dwarf package file includes)<br>
	 * the base line table offset).<br>
	 * line_context<br>
	 * Original signature : <code>int dwarf_srclines_table_offset(Dwarf_Line_Context, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2284</i><br>
	 * @deprecated use the safer methods {@link #dwarf_srclines_table_offset(libdwarf.LibdwarfLibrary.Dwarf_Line_Context, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_srclines_table_offset(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_srclines_table_offset(Pointer Dwarf_Line_Context1, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * The offset is in the relevent .debug_line or .debug_line.dwo<br>
	 * section (and in a split dwarf package file includes)<br>
	 * the base line table offset).<br>
	 * line_context<br>
	 * Original signature : <code>int dwarf_srclines_table_offset(Dwarf_Line_Context, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2284</i>
	 */
	int dwarf_srclines_table_offset(LibdwarfLibrary.Dwarf_Line_Context Dwarf_Line_Context1, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * The offset is in the relevent .debug_line or .debug_line.dwo<br>
	 * section (and in a split dwarf package file includes)<br>
	 * the base line table offset).<br>
	 * line_context<br>
	 * Original signature : <code>int dwarf_srclines_table_offset(Dwarf_Line_Context, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2284</i>
	 */
	int dwarf_srclines_table_offset(Pointer Dwarf_Line_Context1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Compilation Directory name for the current CU.<br>
	 * section (and in a split dwarf package file includes)<br>
	 * the base line table offset).  Do not free() the string,<br>
	 * it is in a dwarf section.<br>
	 * line_context<br>
	 * Original signature : <code>int dwarf_srclines_comp_dir(Dwarf_Line_Context, const char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2293</i><br>
	 * @deprecated use the safer methods {@link #dwarf_srclines_comp_dir(libdwarf.LibdwarfLibrary.Dwarf_Line_Context, java.lang.String[], com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_srclines_comp_dir(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_srclines_comp_dir(Pointer Dwarf_Line_Context1, PointerByReference charPtrPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Compilation Directory name for the current CU.<br>
	 * section (and in a split dwarf package file includes)<br>
	 * the base line table offset).  Do not free() the string,<br>
	 * it is in a dwarf section.<br>
	 * line_context<br>
	 * Original signature : <code>int dwarf_srclines_comp_dir(Dwarf_Line_Context, const char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2293</i>
	 */
	int dwarf_srclines_comp_dir(LibdwarfLibrary.Dwarf_Line_Context Dwarf_Line_Context1, String charPtrPtr1[], PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Compilation Directory name for the current CU.<br>
	 * section (and in a split dwarf package file includes)<br>
	 * the base line table offset).  Do not free() the string,<br>
	 * it is in a dwarf section.<br>
	 * line_context<br>
	 * Original signature : <code>int dwarf_srclines_comp_dir(Dwarf_Line_Context, const char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2293</i>
	 */
	int dwarf_srclines_comp_dir(Pointer Dwarf_Line_Context1, PointerByReference charPtrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Count is the real count of suprogram array entries.<br>
	 * line_context<br>
	 * Original signature : <code>int dwarf_srclines_subprog_count(Dwarf_Line_Context, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2299</i><br>
	 * @deprecated use the safer methods {@link #dwarf_srclines_subprog_count(libdwarf.LibdwarfLibrary.Dwarf_Line_Context, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_srclines_subprog_count(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_srclines_subprog_count(Pointer Dwarf_Line_Context1, LongByReference Dwarf_SignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Count is the real count of suprogram array entries.<br>
	 * line_context<br>
	 * Original signature : <code>int dwarf_srclines_subprog_count(Dwarf_Line_Context, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2299</i>
	 */
	int dwarf_srclines_subprog_count(LibdwarfLibrary.Dwarf_Line_Context Dwarf_Line_Context1, LongBuffer Dwarf_SignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Count is the real count of suprogram array entries.<br>
	 * line_context<br>
	 * Original signature : <code>int dwarf_srclines_subprog_count(Dwarf_Line_Context, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2299</i>
	 */
	int dwarf_srclines_subprog_count(Pointer Dwarf_Line_Context1, LongByReference Dwarf_SignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Index starts with 1, last is 'count'<br>
	 * line_context<br>
	 * Original signature : <code>int dwarf_srclines_subprog_data(Dwarf_Line_Context, Dwarf_Signed, const char**, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2305</i><br>
	 * @deprecated use the safer methods {@link #dwarf_srclines_subprog_data(libdwarf.LibdwarfLibrary.Dwarf_Line_Context, long, java.lang.String[], java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_srclines_subprog_data(com.sun.jna.Pointer, long, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_srclines_subprog_data(Pointer Dwarf_Line_Context1, long Dwarf_Signed1, PointerByReference charPtrPtr1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, Pointer Dwarf_ErrorPtr1);
	/**
	 * Index starts with 1, last is 'count'<br>
	 * line_context<br>
	 * Original signature : <code>int dwarf_srclines_subprog_data(Dwarf_Line_Context, Dwarf_Signed, const char**, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2305</i>
	 */
	int dwarf_srclines_subprog_data(LibdwarfLibrary.Dwarf_Line_Context Dwarf_Line_Context1, long Dwarf_Signed1, String charPtrPtr1[], LongBuffer Dwarf_UnsignedPtr1, LongBuffer Dwarf_UnsignedPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Index starts with 1, last is 'count'<br>
	 * line_context<br>
	 * Original signature : <code>int dwarf_srclines_subprog_data(Dwarf_Line_Context, Dwarf_Signed, const char**, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2305</i>
	 */
	int dwarf_srclines_subprog_data(Pointer Dwarf_Line_Context1, long Dwarf_Signed1, PointerByReference charPtrPtr1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Count is the real count of files array entries.<br>
	 * This remains supported though it is pretty useless for<br>
	 * DWARF5.  To process DWARF5 as well<br>
	 * as DWARF 2,3,4 (in a uniform fashion)<br>
	 * use dwarf_srclines_files_indexes() instead.<br>
	 * line_context<br>
	 * Original signature : <code>int dwarf_srclines_files_count(Dwarf_Line_Context, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2319</i><br>
	 * @deprecated use the safer methods {@link #dwarf_srclines_files_count(libdwarf.LibdwarfLibrary.Dwarf_Line_Context, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_srclines_files_count(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_srclines_files_count(Pointer Dwarf_Line_Context1, LongByReference Dwarf_SignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Count is the real count of files array entries.<br>
	 * This remains supported though it is pretty useless for<br>
	 * DWARF5.  To process DWARF5 as well<br>
	 * as DWARF 2,3,4 (in a uniform fashion)<br>
	 * use dwarf_srclines_files_indexes() instead.<br>
	 * line_context<br>
	 * Original signature : <code>int dwarf_srclines_files_count(Dwarf_Line_Context, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2319</i>
	 */
	int dwarf_srclines_files_count(LibdwarfLibrary.Dwarf_Line_Context Dwarf_Line_Context1, LongBuffer Dwarf_SignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Count is the real count of files array entries.<br>
	 * This remains supported though it is pretty useless for<br>
	 * DWARF5.  To process DWARF5 as well<br>
	 * as DWARF 2,3,4 (in a uniform fashion)<br>
	 * use dwarf_srclines_files_indexes() instead.<br>
	 * line_context<br>
	 * Original signature : <code>int dwarf_srclines_files_count(Dwarf_Line_Context, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2319</i>
	 */
	int dwarf_srclines_files_count(Pointer Dwarf_Line_Context1, LongByReference Dwarf_SignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Count is the real count of files array entries.<br>
	 * Since DWARF 2,3,4 are zero origin indexes and<br>
	 * DWARF5 and later are one origin, this function<br>
	 * replaces dwarf_srclines_files_count().<br>
	 * line_context<br>
	 * Original signature : <code>int dwarf_srclines_files_indexes(Dwarf_Line_Context, Dwarf_Signed*, Dwarf_Signed*, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2328</i><br>
	 * @deprecated use the safer methods {@link #dwarf_srclines_files_indexes(libdwarf.LibdwarfLibrary.Dwarf_Line_Context, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_srclines_files_indexes(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_srclines_files_indexes(Pointer Dwarf_Line_Context1, LongByReference Dwarf_SignedPtr1, LongByReference Dwarf_SignedPtr2, LongByReference Dwarf_SignedPtr3, Pointer Dwarf_ErrorPtr1);
	/**
	 * Count is the real count of files array entries.<br>
	 * Since DWARF 2,3,4 are zero origin indexes and<br>
	 * DWARF5 and later are one origin, this function<br>
	 * replaces dwarf_srclines_files_count().<br>
	 * line_context<br>
	 * Original signature : <code>int dwarf_srclines_files_indexes(Dwarf_Line_Context, Dwarf_Signed*, Dwarf_Signed*, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2328</i>
	 */
	int dwarf_srclines_files_indexes(LibdwarfLibrary.Dwarf_Line_Context Dwarf_Line_Context1, LongBuffer Dwarf_SignedPtr1, LongBuffer Dwarf_SignedPtr2, LongBuffer Dwarf_SignedPtr3, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Count is the real count of files array entries.<br>
	 * Since DWARF 2,3,4 are zero origin indexes and<br>
	 * DWARF5 and later are one origin, this function<br>
	 * replaces dwarf_srclines_files_count().<br>
	 * line_context<br>
	 * Original signature : <code>int dwarf_srclines_files_indexes(Dwarf_Line_Context, Dwarf_Signed*, Dwarf_Signed*, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2328</i>
	 */
	int dwarf_srclines_files_indexes(Pointer Dwarf_Line_Context1, LongByReference Dwarf_SignedPtr1, LongByReference Dwarf_SignedPtr2, LongByReference Dwarf_SignedPtr3, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New March 2018. Same as dwarf_srclines_files_data,<br>
	 * but adds the md5ptr field so cases where DW_LNCT_MD5<br>
	 * is present can return pointer to the MD5 value.<br>
	 * With DWARF 5 index starts with 0.<br>
	 * See dwarf_srclines_files_indexes() which makes<br>
	 * indexing through the files easy.<br>
	 * Original signature : <code>int dwarf_srclines_files_data_b(Dwarf_Line_Context, Dwarf_Signed, const char**, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Form_Data16**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2341</i><br>
	 * @deprecated use the safer methods {@link #dwarf_srclines_files_data_b(libdwarf.LibdwarfLibrary.Dwarf_Line_Context, long, java.lang.String[], java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, libdwarf.Dwarf_Form_Data16_s.ByReference[], com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_srclines_files_data_b(com.sun.jna.Pointer, long, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, libdwarf.Dwarf_Form_Data16_s.ByReference[], com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_srclines_files_data_b(Pointer line_context, long index_in, PointerByReference name, LongByReference directory_index, LongByReference last_mod_time, LongByReference file_length, PointerByReference md5ptr, Pointer error);
	/**
	 * New March 2018. Same as dwarf_srclines_files_data,<br>
	 * but adds the md5ptr field so cases where DW_LNCT_MD5<br>
	 * is present can return pointer to the MD5 value.<br>
	 * With DWARF 5 index starts with 0.<br>
	 * See dwarf_srclines_files_indexes() which makes<br>
	 * indexing through the files easy.<br>
	 * Original signature : <code>int dwarf_srclines_files_data_b(Dwarf_Line_Context, Dwarf_Signed, const char**, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Form_Data16**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2341</i>
	 */
	int dwarf_srclines_files_data_b(LibdwarfLibrary.Dwarf_Line_Context line_context, long index_in, String name[], LongBuffer directory_index, LongBuffer last_mod_time, LongBuffer file_length, Dwarf_Form_Data16_s.ByReference md5ptr[], PointerByReference error);
	/**
	 * New March 2018. Same as dwarf_srclines_files_data,<br>
	 * but adds the md5ptr field so cases where DW_LNCT_MD5<br>
	 * is present can return pointer to the MD5 value.<br>
	 * With DWARF 5 index starts with 0.<br>
	 * See dwarf_srclines_files_indexes() which makes<br>
	 * indexing through the files easy.<br>
	 * Original signature : <code>int dwarf_srclines_files_data_b(Dwarf_Line_Context, Dwarf_Signed, const char**, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Form_Data16**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2341</i>
	 */
	int dwarf_srclines_files_data_b(Pointer line_context, long index_in, PointerByReference name, LongByReference directory_index, LongByReference last_mod_time, LongByReference file_length, Dwarf_Form_Data16_s.ByReference md5ptr[], PointerByReference error);
	/**
	 * Unlike dwarf_srcfiles() this returns the raw file table<br>
	 * strings without the directory being prefixed.<br>
	 * Index starts with 1, last is 'count'<br>
	 * line_context<br>
	 * Original signature : <code>int dwarf_srclines_files_data(Dwarf_Line_Context, Dwarf_Signed, const char**, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2354</i><br>
	 * @deprecated use the safer methods {@link #dwarf_srclines_files_data(libdwarf.LibdwarfLibrary.Dwarf_Line_Context, long, java.lang.String[], java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_srclines_files_data(com.sun.jna.Pointer, long, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_srclines_files_data(Pointer Dwarf_Line_Context1, long Dwarf_Signed1, PointerByReference charPtrPtr1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, Pointer Dwarf_ErrorPtr1);
	/**
	 * Unlike dwarf_srcfiles() this returns the raw file table<br>
	 * strings without the directory being prefixed.<br>
	 * Index starts with 1, last is 'count'<br>
	 * line_context<br>
	 * Original signature : <code>int dwarf_srclines_files_data(Dwarf_Line_Context, Dwarf_Signed, const char**, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2354</i>
	 */
	int dwarf_srclines_files_data(LibdwarfLibrary.Dwarf_Line_Context Dwarf_Line_Context1, long Dwarf_Signed1, String charPtrPtr1[], LongBuffer Dwarf_UnsignedPtr1, LongBuffer Dwarf_UnsignedPtr2, LongBuffer Dwarf_UnsignedPtr3, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Unlike dwarf_srcfiles() this returns the raw file table<br>
	 * strings without the directory being prefixed.<br>
	 * Index starts with 1, last is 'count'<br>
	 * line_context<br>
	 * Original signature : <code>int dwarf_srclines_files_data(Dwarf_Line_Context, Dwarf_Signed, const char**, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2354</i>
	 */
	int dwarf_srclines_files_data(Pointer Dwarf_Line_Context1, long Dwarf_Signed1, PointerByReference charPtrPtr1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Count is the real count of include array entries.<br>
	 * line_context<br>
	 * Original signature : <code>int dwarf_srclines_include_dir_count(Dwarf_Line_Context, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2364</i><br>
	 * @deprecated use the safer methods {@link #dwarf_srclines_include_dir_count(libdwarf.LibdwarfLibrary.Dwarf_Line_Context, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_srclines_include_dir_count(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_srclines_include_dir_count(Pointer Dwarf_Line_Context1, LongByReference Dwarf_SignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Count is the real count of include array entries.<br>
	 * line_context<br>
	 * Original signature : <code>int dwarf_srclines_include_dir_count(Dwarf_Line_Context, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2364</i>
	 */
	int dwarf_srclines_include_dir_count(LibdwarfLibrary.Dwarf_Line_Context Dwarf_Line_Context1, LongBuffer Dwarf_SignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Count is the real count of include array entries.<br>
	 * line_context<br>
	 * Original signature : <code>int dwarf_srclines_include_dir_count(Dwarf_Line_Context, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2364</i>
	 */
	int dwarf_srclines_include_dir_count(Pointer Dwarf_Line_Context1, LongByReference Dwarf_SignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Index starts with 1, last is 'count'<br>
	 * line_context<br>
	 * Original signature : <code>int dwarf_srclines_include_dir_data(Dwarf_Line_Context, Dwarf_Signed, const char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2370</i><br>
	 * @deprecated use the safer methods {@link #dwarf_srclines_include_dir_data(libdwarf.LibdwarfLibrary.Dwarf_Line_Context, long, java.lang.String[], com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_srclines_include_dir_data(com.sun.jna.Pointer, long, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_srclines_include_dir_data(Pointer Dwarf_Line_Context1, long Dwarf_Signed1, PointerByReference charPtrPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Index starts with 1, last is 'count'<br>
	 * line_context<br>
	 * Original signature : <code>int dwarf_srclines_include_dir_data(Dwarf_Line_Context, Dwarf_Signed, const char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2370</i>
	 */
	int dwarf_srclines_include_dir_data(LibdwarfLibrary.Dwarf_Line_Context Dwarf_Line_Context1, long Dwarf_Signed1, String charPtrPtr1[], PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Index starts with 1, last is 'count'<br>
	 * line_context<br>
	 * Original signature : <code>int dwarf_srclines_include_dir_data(Dwarf_Line_Context, Dwarf_Signed, const char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2370</i>
	 */
	int dwarf_srclines_include_dir_data(Pointer Dwarf_Line_Context1, long Dwarf_Signed1, PointerByReference charPtrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * The DWARF version number of this compile-unit<br>
	 * in the .debug_lines section and the number of<br>
	 * actual tables:0 (header with no lines),<br>
	 * 1 (standard table), or 2 (experimental).<br>
	 * line_context<br>
	 * Original signature : <code>int dwarf_srclines_version(Dwarf_Line_Context, Dwarf_Unsigned*, Dwarf_Small*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2380</i><br>
	 * @deprecated use the safer methods {@link #dwarf_srclines_version(libdwarf.LibdwarfLibrary.Dwarf_Line_Context, java.nio.LongBuffer, java.nio.ByteBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_srclines_version(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_srclines_version(Pointer Dwarf_Line_Context1, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_SmallPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * The DWARF version number of this compile-unit<br>
	 * in the .debug_lines section and the number of<br>
	 * actual tables:0 (header with no lines),<br>
	 * 1 (standard table), or 2 (experimental).<br>
	 * line_context<br>
	 * Original signature : <code>int dwarf_srclines_version(Dwarf_Line_Context, Dwarf_Unsigned*, Dwarf_Small*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2380</i>
	 */
	int dwarf_srclines_version(LibdwarfLibrary.Dwarf_Line_Context Dwarf_Line_Context1, LongBuffer Dwarf_UnsignedPtr1, ByteBuffer Dwarf_SmallPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * The DWARF version number of this compile-unit<br>
	 * in the .debug_lines section and the number of<br>
	 * actual tables:0 (header with no lines),<br>
	 * 1 (standard table), or 2 (experimental).<br>
	 * line_context<br>
	 * Original signature : <code>int dwarf_srclines_version(Dwarf_Line_Context, Dwarf_Unsigned*, Dwarf_Small*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2380</i>
	 */
	int dwarf_srclines_version(Pointer Dwarf_Line_Context1, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_SmallPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * die<br>
	 * Original signature : <code>int dwarf_get_line_section_name_from_die(Dwarf_Die, const char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2386</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_line_section_name_from_die(libdwarf.LibdwarfLibrary.Dwarf_Die, java.lang.String[], com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_line_section_name_from_die(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_line_section_name_from_die(Pointer Dwarf_Die1, PointerByReference charPtrPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * die<br>
	 * Original signature : <code>int dwarf_get_line_section_name_from_die(Dwarf_Die, const char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2386</i>
	 */
	int dwarf_get_line_section_name_from_die(LibdwarfLibrary.Dwarf_Die Dwarf_Die1, String charPtrPtr1[], PointerByReference Dwarf_ErrorPtr1);
	/**
	 * die<br>
	 * Original signature : <code>int dwarf_get_line_section_name_from_die(Dwarf_Die, const char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2386</i>
	 */
	int dwarf_get_line_section_name_from_die(Pointer Dwarf_Die1, PointerByReference charPtrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * While 'filecount' is signed, the value<br>
	 * returned through the pointer is never negative.<br>
	 * Original libdwarf from 199x.<br>
	 * die<br>
	 * Original signature : <code>int dwarf_srcfiles(Dwarf_Die, char***, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2394</i><br>
	 * @deprecated use the safer methods {@link #dwarf_srcfiles(libdwarf.LibdwarfLibrary.Dwarf_Die, com.sun.jna.ptr.PointerByReference, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_srcfiles(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_srcfiles(Pointer Dwarf_Die1, PointerByReference charPtrPtrPtr1, LongByReference Dwarf_SignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * While 'filecount' is signed, the value<br>
	 * returned through the pointer is never negative.<br>
	 * Original libdwarf from 199x.<br>
	 * die<br>
	 * Original signature : <code>int dwarf_srcfiles(Dwarf_Die, char***, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2394</i>
	 */
	int dwarf_srcfiles(LibdwarfLibrary.Dwarf_Die Dwarf_Die1, PointerByReference charPtrPtrPtr1, LongBuffer Dwarf_SignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * While 'filecount' is signed, the value<br>
	 * returned through the pointer is never negative.<br>
	 * Original libdwarf from 199x.<br>
	 * die<br>
	 * Original signature : <code>int dwarf_srcfiles(Dwarf_Die, char***, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2394</i>
	 */
	int dwarf_srcfiles(Pointer Dwarf_Die1, PointerByReference charPtrPtrPtr1, LongByReference Dwarf_SignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * line<br>
	 * Original signature : <code>int dwarf_linebeginstatement(Dwarf_Line, Dwarf_Bool*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2399</i><br>
	 * @deprecated use the safer methods {@link #dwarf_linebeginstatement(libdwarf.LibdwarfLibrary.Dwarf_Line, java.nio.IntBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_linebeginstatement(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_linebeginstatement(Pointer Dwarf_Line1, IntByReference Dwarf_BoolPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * line<br>
	 * Original signature : <code>int dwarf_linebeginstatement(Dwarf_Line, Dwarf_Bool*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2399</i>
	 */
	int dwarf_linebeginstatement(LibdwarfLibrary.Dwarf_Line Dwarf_Line1, IntBuffer Dwarf_BoolPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * line<br>
	 * Original signature : <code>int dwarf_linebeginstatement(Dwarf_Line, Dwarf_Bool*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2399</i>
	 */
	int dwarf_linebeginstatement(Pointer Dwarf_Line1, IntByReference Dwarf_BoolPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * line<br>
	 * Original signature : <code>int dwarf_lineendsequence(Dwarf_Line, Dwarf_Bool*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2403</i><br>
	 * @deprecated use the safer methods {@link #dwarf_lineendsequence(libdwarf.LibdwarfLibrary.Dwarf_Line, java.nio.IntBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_lineendsequence(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_lineendsequence(Pointer Dwarf_Line1, IntByReference Dwarf_BoolPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * line<br>
	 * Original signature : <code>int dwarf_lineendsequence(Dwarf_Line, Dwarf_Bool*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2403</i>
	 */
	int dwarf_lineendsequence(LibdwarfLibrary.Dwarf_Line Dwarf_Line1, IntBuffer Dwarf_BoolPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * line<br>
	 * Original signature : <code>int dwarf_lineendsequence(Dwarf_Line, Dwarf_Bool*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2403</i>
	 */
	int dwarf_lineendsequence(Pointer Dwarf_Line1, IntByReference Dwarf_BoolPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * line<br>
	 * Original signature : <code>int dwarf_lineno(Dwarf_Line, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2407</i><br>
	 * @deprecated use the safer methods {@link #dwarf_lineno(libdwarf.LibdwarfLibrary.Dwarf_Line, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_lineno(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_lineno(Pointer Dwarf_Line1, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * line<br>
	 * Original signature : <code>int dwarf_lineno(Dwarf_Line, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2407</i>
	 */
	int dwarf_lineno(LibdwarfLibrary.Dwarf_Line Dwarf_Line1, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * line<br>
	 * Original signature : <code>int dwarf_lineno(Dwarf_Line, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2407</i>
	 */
	int dwarf_lineno(Pointer Dwarf_Line1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * line<br>
	 * Original signature : <code>int dwarf_line_srcfileno(Dwarf_Line, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2411</i><br>
	 * @deprecated use the safer methods {@link #dwarf_line_srcfileno(libdwarf.LibdwarfLibrary.Dwarf_Line, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_line_srcfileno(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_line_srcfileno(Pointer Dwarf_Line1, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * line<br>
	 * Original signature : <code>int dwarf_line_srcfileno(Dwarf_Line, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2411</i>
	 */
	int dwarf_line_srcfileno(LibdwarfLibrary.Dwarf_Line Dwarf_Line1, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * line<br>
	 * Original signature : <code>int dwarf_line_srcfileno(Dwarf_Line, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2411</i>
	 */
	int dwarf_line_srcfileno(Pointer Dwarf_Line1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Is the line address from DW_LNS_set_address?<br>
	 * line<br>
	 * Original signature : <code>int dwarf_line_is_addr_set(Dwarf_Line, Dwarf_Bool*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2416</i><br>
	 * @deprecated use the safer methods {@link #dwarf_line_is_addr_set(libdwarf.LibdwarfLibrary.Dwarf_Line, java.nio.IntBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_line_is_addr_set(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_line_is_addr_set(Pointer Dwarf_Line1, IntByReference Dwarf_BoolPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Is the line address from DW_LNS_set_address?<br>
	 * line<br>
	 * Original signature : <code>int dwarf_line_is_addr_set(Dwarf_Line, Dwarf_Bool*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2416</i>
	 */
	int dwarf_line_is_addr_set(LibdwarfLibrary.Dwarf_Line Dwarf_Line1, IntBuffer Dwarf_BoolPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Is the line address from DW_LNS_set_address?<br>
	 * line<br>
	 * Original signature : <code>int dwarf_line_is_addr_set(Dwarf_Line, Dwarf_Bool*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2416</i>
	 */
	int dwarf_line_is_addr_set(Pointer Dwarf_Line1, IntByReference Dwarf_BoolPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * line<br>
	 * Original signature : <code>int dwarf_lineaddr(Dwarf_Line, Dwarf_Addr*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2420</i><br>
	 * @deprecated use the safer methods {@link #dwarf_lineaddr(libdwarf.LibdwarfLibrary.Dwarf_Line, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_lineaddr(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_lineaddr(Pointer Dwarf_Line1, LongByReference Dwarf_AddrPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * line<br>
	 * Original signature : <code>int dwarf_lineaddr(Dwarf_Line, Dwarf_Addr*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2420</i>
	 */
	int dwarf_lineaddr(LibdwarfLibrary.Dwarf_Line Dwarf_Line1, LongBuffer Dwarf_AddrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * line<br>
	 * Original signature : <code>int dwarf_lineaddr(Dwarf_Line, Dwarf_Addr*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2420</i>
	 */
	int dwarf_lineaddr(Pointer Dwarf_Line1, LongByReference Dwarf_AddrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dwarf_lineoff is OBSOLETE as of December 2011. Do not use.<br>
	 * line<br>
	 * Original signature : <code>int dwarf_lineoff(Dwarf_Line, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2425</i><br>
	 * @deprecated use the safer methods {@link #dwarf_lineoff(libdwarf.LibdwarfLibrary.Dwarf_Line, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_lineoff(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_lineoff(Pointer Dwarf_Line1, LongByReference Dwarf_SignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * dwarf_lineoff is OBSOLETE as of December 2011. Do not use.<br>
	 * line<br>
	 * Original signature : <code>int dwarf_lineoff(Dwarf_Line, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2425</i>
	 */
	int dwarf_lineoff(LibdwarfLibrary.Dwarf_Line Dwarf_Line1, LongBuffer Dwarf_SignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dwarf_lineoff is OBSOLETE as of December 2011. Do not use.<br>
	 * line<br>
	 * Original signature : <code>int dwarf_lineoff(Dwarf_Line, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2425</i>
	 */
	int dwarf_lineoff(Pointer Dwarf_Line1, LongByReference Dwarf_SignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dwarf_lineoff_b correctly returns an unsigned column number<br>
	 * through the pointer returned_lineoffset.<br>
	 * dwarf_lineoff_b() is new in December 2011.<br>
	 * line<br>
	 * Original signature : <code>int dwarf_lineoff_b(Dwarf_Line, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2432</i><br>
	 * @deprecated use the safer methods {@link #dwarf_lineoff_b(libdwarf.LibdwarfLibrary.Dwarf_Line, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_lineoff_b(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_lineoff_b(Pointer Dwarf_Line1, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * dwarf_lineoff_b correctly returns an unsigned column number<br>
	 * through the pointer returned_lineoffset.<br>
	 * dwarf_lineoff_b() is new in December 2011.<br>
	 * line<br>
	 * Original signature : <code>int dwarf_lineoff_b(Dwarf_Line, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2432</i>
	 */
	int dwarf_lineoff_b(LibdwarfLibrary.Dwarf_Line Dwarf_Line1, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dwarf_lineoff_b correctly returns an unsigned column number<br>
	 * through the pointer returned_lineoffset.<br>
	 * dwarf_lineoff_b() is new in December 2011.<br>
	 * line<br>
	 * Original signature : <code>int dwarf_lineoff_b(Dwarf_Line, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2432</i>
	 */
	int dwarf_lineoff_b(Pointer Dwarf_Line1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * line<br>
	 * Original signature : <code>int dwarf_linesrc(Dwarf_Line, char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2436</i><br>
	 * @deprecated use the safer methods {@link #dwarf_linesrc(libdwarf.LibdwarfLibrary.Dwarf_Line, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_linesrc(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_linesrc(Pointer Dwarf_Line1, PointerByReference charPtrPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * line<br>
	 * Original signature : <code>int dwarf_linesrc(Dwarf_Line, char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2436</i>
	 */
	int dwarf_linesrc(LibdwarfLibrary.Dwarf_Line Dwarf_Line1, PointerByReference charPtrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * line<br>
	 * Original signature : <code>int dwarf_linesrc(Dwarf_Line, char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2436</i>
	 */
	int dwarf_linesrc(Pointer Dwarf_Line1, PointerByReference charPtrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * line<br>
	 * Original signature : <code>int dwarf_lineblock(Dwarf_Line, Dwarf_Bool*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2440</i><br>
	 * @deprecated use the safer methods {@link #dwarf_lineblock(libdwarf.LibdwarfLibrary.Dwarf_Line, java.nio.IntBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_lineblock(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_lineblock(Pointer Dwarf_Line1, IntByReference Dwarf_BoolPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * line<br>
	 * Original signature : <code>int dwarf_lineblock(Dwarf_Line, Dwarf_Bool*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2440</i>
	 */
	int dwarf_lineblock(LibdwarfLibrary.Dwarf_Line Dwarf_Line1, IntBuffer Dwarf_BoolPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * line<br>
	 * Original signature : <code>int dwarf_lineblock(Dwarf_Line, Dwarf_Bool*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2440</i>
	 */
	int dwarf_lineblock(Pointer Dwarf_Line1, IntByReference Dwarf_BoolPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * We gather these into one call as it's likely one<br>
	 * will want all or none of them.<br>
	 * line<br>
	 * Original signature : <code>int dwarf_prologue_end_etc(Dwarf_Line, Dwarf_Bool*, Dwarf_Bool*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2446</i><br>
	 * @deprecated use the safer methods {@link #dwarf_prologue_end_etc(libdwarf.LibdwarfLibrary.Dwarf_Line, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_prologue_end_etc(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_prologue_end_etc(Pointer Dwarf_Line1, IntByReference Dwarf_BoolPtr1, IntByReference Dwarf_BoolPtr2, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, Pointer Dwarf_ErrorPtr1);
	/**
	 * We gather these into one call as it's likely one<br>
	 * will want all or none of them.<br>
	 * line<br>
	 * Original signature : <code>int dwarf_prologue_end_etc(Dwarf_Line, Dwarf_Bool*, Dwarf_Bool*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2446</i>
	 */
	int dwarf_prologue_end_etc(LibdwarfLibrary.Dwarf_Line Dwarf_Line1, IntBuffer Dwarf_BoolPtr1, IntBuffer Dwarf_BoolPtr2, LongBuffer Dwarf_UnsignedPtr1, LongBuffer Dwarf_UnsignedPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * We gather these into one call as it's likely one<br>
	 * will want all or none of them.<br>
	 * line<br>
	 * Original signature : <code>int dwarf_prologue_end_etc(Dwarf_Line, Dwarf_Bool*, Dwarf_Bool*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2446</i>
	 */
	int dwarf_prologue_end_etc(Pointer Dwarf_Line1, IntByReference Dwarf_BoolPtr1, IntByReference Dwarf_BoolPtr2, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Two-level line tables:<br>
	 * When reading from an actuals table, dwarf_line_logical()<br>
	 * returns the logical row number for the line.<br>
	 * line<br>
	 * Original signature : <code>int dwarf_linelogical(Dwarf_Line, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2457</i><br>
	 * @deprecated use the safer methods {@link #dwarf_linelogical(libdwarf.LibdwarfLibrary.Dwarf_Line, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_linelogical(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_linelogical(Pointer Dwarf_Line1, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Two-level line tables:<br>
	 * When reading from an actuals table, dwarf_line_logical()<br>
	 * returns the logical row number for the line.<br>
	 * line<br>
	 * Original signature : <code>int dwarf_linelogical(Dwarf_Line, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2457</i>
	 */
	int dwarf_linelogical(LibdwarfLibrary.Dwarf_Line Dwarf_Line1, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Two-level line tables:<br>
	 * When reading from an actuals table, dwarf_line_logical()<br>
	 * returns the logical row number for the line.<br>
	 * line<br>
	 * Original signature : <code>int dwarf_linelogical(Dwarf_Line, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2457</i>
	 */
	int dwarf_linelogical(Pointer Dwarf_Line1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Two-level line tables:<br>
	 * When reading from a logicals table, dwarf_linecontext()<br>
	 * returns the logical row number corresponding the the<br>
	 * calling context for an inlined call.<br>
	 * line<br>
	 * Original signature : <code>int dwarf_linecontext(Dwarf_Line, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2465</i><br>
	 * @deprecated use the safer methods {@link #dwarf_linecontext(libdwarf.LibdwarfLibrary.Dwarf_Line, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_linecontext(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_linecontext(Pointer Dwarf_Line1, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Two-level line tables:<br>
	 * When reading from a logicals table, dwarf_linecontext()<br>
	 * returns the logical row number corresponding the the<br>
	 * calling context for an inlined call.<br>
	 * line<br>
	 * Original signature : <code>int dwarf_linecontext(Dwarf_Line, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2465</i>
	 */
	int dwarf_linecontext(LibdwarfLibrary.Dwarf_Line Dwarf_Line1, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Two-level line tables:<br>
	 * When reading from a logicals table, dwarf_linecontext()<br>
	 * returns the logical row number corresponding the the<br>
	 * calling context for an inlined call.<br>
	 * line<br>
	 * Original signature : <code>int dwarf_linecontext(Dwarf_Line, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2465</i>
	 */
	int dwarf_linecontext(Pointer Dwarf_Line1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Two-level line tables:<br>
	 * When reading from a logicals table, dwarf_linesubprogno()<br>
	 * returns the index in the subprograms table of the inlined<br>
	 * subprogram.<br>
	 * line<br>
	 * Original signature : <code>int dwarf_line_subprogno(Dwarf_Line, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2473</i><br>
	 * @deprecated use the safer methods {@link #dwarf_line_subprogno(libdwarf.LibdwarfLibrary.Dwarf_Line, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_line_subprogno(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_line_subprogno(Pointer Dwarf_Line1, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Two-level line tables:<br>
	 * When reading from a logicals table, dwarf_linesubprogno()<br>
	 * returns the index in the subprograms table of the inlined<br>
	 * subprogram.<br>
	 * line<br>
	 * Original signature : <code>int dwarf_line_subprogno(Dwarf_Line, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2473</i>
	 */
	int dwarf_line_subprogno(LibdwarfLibrary.Dwarf_Line Dwarf_Line1, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Two-level line tables:<br>
	 * When reading from a logicals table, dwarf_linesubprogno()<br>
	 * returns the index in the subprograms table of the inlined<br>
	 * subprogram.<br>
	 * line<br>
	 * Original signature : <code>int dwarf_line_subprogno(Dwarf_Line, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2473</i>
	 */
	int dwarf_line_subprogno(Pointer Dwarf_Line1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Two-level line tables:<br>
	 * When reading from a logicals table, dwarf_linesubprog()<br>
	 * returns the name of the inlined subprogram, its declaration<br>
	 * filename, and its declaration line number, if available.<br>
	 * line<br>
	 * Original signature : <code>int dwarf_line_subprog(Dwarf_Line, char**, char**, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2481</i><br>
	 * @deprecated use the safer methods {@link #dwarf_line_subprog(libdwarf.LibdwarfLibrary.Dwarf_Line, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_line_subprog(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_line_subprog(Pointer Dwarf_Line1, PointerByReference charPtrPtr1, PointerByReference charPtrPtr2, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Two-level line tables:<br>
	 * When reading from a logicals table, dwarf_linesubprog()<br>
	 * returns the name of the inlined subprogram, its declaration<br>
	 * filename, and its declaration line number, if available.<br>
	 * line<br>
	 * Original signature : <code>int dwarf_line_subprog(Dwarf_Line, char**, char**, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2481</i>
	 */
	int dwarf_line_subprog(LibdwarfLibrary.Dwarf_Line Dwarf_Line1, PointerByReference charPtrPtr1, PointerByReference charPtrPtr2, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Two-level line tables:<br>
	 * When reading from a logicals table, dwarf_linesubprog()<br>
	 * returns the name of the inlined subprogram, its declaration<br>
	 * filename, and its declaration line number, if available.<br>
	 * line<br>
	 * Original signature : <code>int dwarf_line_subprog(Dwarf_Line, char**, char**, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2481</i>
	 */
	int dwarf_line_subprog(Pointer Dwarf_Line1, PointerByReference charPtrPtr1, PointerByReference charPtrPtr2, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New April 2017<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_debugnames_header(Dwarf_Debug, Dwarf_Dnames_Head*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2490</i><br>
	 * @deprecated use the safer methods {@link #dwarf_debugnames_header(libdwarf.LibdwarfLibrary.Dwarf_Debug, com.sun.jna.ptr.PointerByReference, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_debugnames_header(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_debugnames_header(Pointer Dwarf_Debug1, Pointer Dwarf_Dnames_HeadPtr1, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * New April 2017<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_debugnames_header(Dwarf_Debug, Dwarf_Dnames_Head*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2490</i>
	 */
	int dwarf_debugnames_header(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, PointerByReference Dwarf_Dnames_HeadPtr1, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New April 2017<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_debugnames_header(Dwarf_Debug, Dwarf_Dnames_Head*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2490</i>
	 */
	int dwarf_debugnames_header(Pointer Dwarf_Debug1, PointerByReference Dwarf_Dnames_HeadPtr1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Since there may be multiple name indexes in a .debug_names<br>
	 * section we use index_number starting at 0 through<br>
	 * dn_index_count_out-1.<br>
	 * dn<br>
	 * Original signature : <code>int dwarf_debugnames_sizes(Dwarf_Dnames_Head, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * @param Dwarf_UnsignedPtr3 4 or 8<br>
	 * <i>native declaration : line 2501</i><br>
	 * @deprecated use the safer methods {@link #dwarf_debugnames_sizes(libdwarf.LibdwarfLibrary.Dwarf_Dnames_Head, long, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_debugnames_sizes(com.sun.jna.Pointer, long, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_debugnames_sizes(Pointer Dwarf_Dnames_Head1, long Dwarf_Unsigned1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, LongByReference Dwarf_UnsignedPtr4, LongByReference Dwarf_UnsignedPtr5, LongByReference Dwarf_UnsignedPtr6, LongByReference Dwarf_UnsignedPtr7, LongByReference Dwarf_UnsignedPtr8, LongByReference Dwarf_UnsignedPtr9, LongByReference Dwarf_UnsignedPtr10, LongByReference Dwarf_UnsignedPtr11, LongByReference Dwarf_UnsignedPtr12, Pointer Dwarf_ErrorPtr1);
	/**
	 * Since there may be multiple name indexes in a .debug_names<br>
	 * section we use index_number starting at 0 through<br>
	 * dn_index_count_out-1.<br>
	 * dn<br>
	 * Original signature : <code>int dwarf_debugnames_sizes(Dwarf_Dnames_Head, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * @param Dwarf_UnsignedPtr3 4 or 8<br>
	 * <i>native declaration : line 2501</i>
	 */
	int dwarf_debugnames_sizes(LibdwarfLibrary.Dwarf_Dnames_Head Dwarf_Dnames_Head1, long Dwarf_Unsigned1, LongBuffer Dwarf_UnsignedPtr1, LongBuffer Dwarf_UnsignedPtr2, LongBuffer Dwarf_UnsignedPtr3, LongBuffer Dwarf_UnsignedPtr4, LongBuffer Dwarf_UnsignedPtr5, LongBuffer Dwarf_UnsignedPtr6, LongBuffer Dwarf_UnsignedPtr7, LongBuffer Dwarf_UnsignedPtr8, LongBuffer Dwarf_UnsignedPtr9, LongBuffer Dwarf_UnsignedPtr10, LongBuffer Dwarf_UnsignedPtr11, LongBuffer Dwarf_UnsignedPtr12, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Since there may be multiple name indexes in a .debug_names<br>
	 * section we use index_number starting at 0 through<br>
	 * dn_index_count_out-1.<br>
	 * dn<br>
	 * Original signature : <code>int dwarf_debugnames_sizes(Dwarf_Dnames_Head, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * @param Dwarf_UnsignedPtr3 4 or 8<br>
	 * <i>native declaration : line 2501</i>
	 */
	int dwarf_debugnames_sizes(Pointer Dwarf_Dnames_Head1, long Dwarf_Unsigned1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, LongByReference Dwarf_UnsignedPtr4, LongByReference Dwarf_UnsignedPtr5, LongByReference Dwarf_UnsignedPtr6, LongByReference Dwarf_UnsignedPtr7, LongByReference Dwarf_UnsignedPtr8, LongByReference Dwarf_UnsignedPtr9, LongByReference Dwarf_UnsignedPtr10, LongByReference Dwarf_UnsignedPtr11, LongByReference Dwarf_UnsignedPtr12, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dn<br>
	 * Original signature : <code>int dwarf_debugnames_cu_entry(Dwarf_Dnames_Head, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2523</i><br>
	 * @deprecated use the safer methods {@link #dwarf_debugnames_cu_entry(libdwarf.LibdwarfLibrary.Dwarf_Dnames_Head, long, long, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_debugnames_cu_entry(com.sun.jna.Pointer, long, long, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_debugnames_cu_entry(Pointer Dwarf_Dnames_Head1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, Pointer Dwarf_ErrorPtr1);
	/**
	 * dn<br>
	 * Original signature : <code>int dwarf_debugnames_cu_entry(Dwarf_Dnames_Head, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2523</i>
	 */
	int dwarf_debugnames_cu_entry(LibdwarfLibrary.Dwarf_Dnames_Head Dwarf_Dnames_Head1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, LongBuffer Dwarf_UnsignedPtr1, LongBuffer Dwarf_UnsignedPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dn<br>
	 * Original signature : <code>int dwarf_debugnames_cu_entry(Dwarf_Dnames_Head, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2523</i>
	 */
	int dwarf_debugnames_cu_entry(Pointer Dwarf_Dnames_Head1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dn<br>
	 * Original signature : <code>int dwarf_debugnames_local_tu_entry(Dwarf_Dnames_Head, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2529</i><br>
	 * @deprecated use the safer methods {@link #dwarf_debugnames_local_tu_entry(libdwarf.LibdwarfLibrary.Dwarf_Dnames_Head, long, long, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_debugnames_local_tu_entry(com.sun.jna.Pointer, long, long, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_debugnames_local_tu_entry(Pointer Dwarf_Dnames_Head1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, Pointer Dwarf_ErrorPtr1);
	/**
	 * dn<br>
	 * Original signature : <code>int dwarf_debugnames_local_tu_entry(Dwarf_Dnames_Head, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2529</i>
	 */
	int dwarf_debugnames_local_tu_entry(LibdwarfLibrary.Dwarf_Dnames_Head Dwarf_Dnames_Head1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, LongBuffer Dwarf_UnsignedPtr1, LongBuffer Dwarf_UnsignedPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dn<br>
	 * Original signature : <code>int dwarf_debugnames_local_tu_entry(Dwarf_Dnames_Head, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2529</i>
	 */
	int dwarf_debugnames_local_tu_entry(Pointer Dwarf_Dnames_Head1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dn<br>
	 * Original signature : <code>int dwarf_debugnames_foreign_tu_entry(Dwarf_Dnames_Head, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Sig8*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2535</i><br>
	 * @deprecated use the safer methods {@link #dwarf_debugnames_foreign_tu_entry(libdwarf.LibdwarfLibrary.Dwarf_Dnames_Head, long, long, java.nio.LongBuffer, java.nio.LongBuffer, libdwarf.Dwarf_Sig8_s, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_debugnames_foreign_tu_entry(com.sun.jna.Pointer, long, long, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, libdwarf.Dwarf_Sig8_s, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_debugnames_foreign_tu_entry(Pointer Dwarf_Dnames_Head1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, Dwarf_Sig8_s Dwarf_Sig8Ptr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * dn<br>
	 * Original signature : <code>int dwarf_debugnames_foreign_tu_entry(Dwarf_Dnames_Head, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Sig8*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2535</i>
	 */
	int dwarf_debugnames_foreign_tu_entry(LibdwarfLibrary.Dwarf_Dnames_Head Dwarf_Dnames_Head1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, LongBuffer Dwarf_UnsignedPtr1, LongBuffer Dwarf_UnsignedPtr2, Dwarf_Sig8_s Dwarf_Sig8Ptr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dn<br>
	 * Original signature : <code>int dwarf_debugnames_foreign_tu_entry(Dwarf_Dnames_Head, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Sig8*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2535</i>
	 */
	int dwarf_debugnames_foreign_tu_entry(Pointer Dwarf_Dnames_Head1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, Dwarf_Sig8_s Dwarf_Sig8Ptr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dn<br>
	 * Original signature : <code>int dwarf_debugnames_bucket(Dwarf_Dnames_Head, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2542</i><br>
	 * @deprecated use the safer methods {@link #dwarf_debugnames_bucket(libdwarf.LibdwarfLibrary.Dwarf_Dnames_Head, long, long, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_debugnames_bucket(com.sun.jna.Pointer, long, long, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_debugnames_bucket(Pointer Dwarf_Dnames_Head1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, Pointer Dwarf_ErrorPtr1);
	/**
	 * dn<br>
	 * Original signature : <code>int dwarf_debugnames_bucket(Dwarf_Dnames_Head, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2542</i>
	 */
	int dwarf_debugnames_bucket(LibdwarfLibrary.Dwarf_Dnames_Head Dwarf_Dnames_Head1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, LongBuffer Dwarf_UnsignedPtr1, LongBuffer Dwarf_UnsignedPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dn<br>
	 * Original signature : <code>int dwarf_debugnames_bucket(Dwarf_Dnames_Head, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2542</i>
	 */
	int dwarf_debugnames_bucket(Pointer Dwarf_Dnames_Head1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dn<br>
	 * Original signature : <code>int dwarf_debugnames_name(Dwarf_Dnames_Head, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Sig8*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2549</i><br>
	 * @deprecated use the safer methods {@link #dwarf_debugnames_name(libdwarf.LibdwarfLibrary.Dwarf_Dnames_Head, long, long, java.nio.LongBuffer, libdwarf.Dwarf_Sig8_s, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_debugnames_name(com.sun.jna.Pointer, long, long, com.sun.jna.ptr.LongByReference, libdwarf.Dwarf_Sig8_s, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_debugnames_name(Pointer Dwarf_Dnames_Head1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, LongByReference Dwarf_UnsignedPtr1, Dwarf_Sig8_s Dwarf_Sig8Ptr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, Pointer Dwarf_ErrorPtr1);
	/**
	 * dn<br>
	 * Original signature : <code>int dwarf_debugnames_name(Dwarf_Dnames_Head, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Sig8*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2549</i>
	 */
	int dwarf_debugnames_name(LibdwarfLibrary.Dwarf_Dnames_Head Dwarf_Dnames_Head1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, LongBuffer Dwarf_UnsignedPtr1, Dwarf_Sig8_s Dwarf_Sig8Ptr1, LongBuffer Dwarf_UnsignedPtr2, LongBuffer Dwarf_UnsignedPtr3, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dn<br>
	 * Original signature : <code>int dwarf_debugnames_name(Dwarf_Dnames_Head, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Sig8*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2549</i>
	 */
	int dwarf_debugnames_name(Pointer Dwarf_Dnames_Head1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, LongByReference Dwarf_UnsignedPtr1, Dwarf_Sig8_s Dwarf_Sig8Ptr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dn<br>
	 * Original signature : <code>int dwarf_debugnames_abbrev_by_index(Dwarf_Dnames_Head, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2558</i><br>
	 * @deprecated use the safer methods {@link #dwarf_debugnames_abbrev_by_index(libdwarf.LibdwarfLibrary.Dwarf_Dnames_Head, long, long, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_debugnames_abbrev_by_index(com.sun.jna.Pointer, long, long, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_debugnames_abbrev_by_index(Pointer Dwarf_Dnames_Head1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, LongByReference Dwarf_UnsignedPtr4, Pointer Dwarf_ErrorPtr1);
	/**
	 * dn<br>
	 * Original signature : <code>int dwarf_debugnames_abbrev_by_index(Dwarf_Dnames_Head, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2558</i>
	 */
	int dwarf_debugnames_abbrev_by_index(LibdwarfLibrary.Dwarf_Dnames_Head Dwarf_Dnames_Head1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, LongBuffer Dwarf_UnsignedPtr1, LongBuffer Dwarf_UnsignedPtr2, LongBuffer Dwarf_UnsignedPtr3, LongBuffer Dwarf_UnsignedPtr4, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dn<br>
	 * Original signature : <code>int dwarf_debugnames_abbrev_by_index(Dwarf_Dnames_Head, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2558</i>
	 */
	int dwarf_debugnames_abbrev_by_index(Pointer Dwarf_Dnames_Head1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, LongByReference Dwarf_UnsignedPtr4, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dn<br>
	 * Original signature : <code>int dwarf_debugnames_abbrev_by_code(Dwarf_Dnames_Head, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2573</i><br>
	 * @deprecated use the safer methods {@link #dwarf_debugnames_abbrev_by_code(libdwarf.LibdwarfLibrary.Dwarf_Dnames_Head, long, long, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_debugnames_abbrev_by_code(com.sun.jna.Pointer, long, long, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_debugnames_abbrev_by_code(Pointer Dwarf_Dnames_Head1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, Pointer Dwarf_ErrorPtr1);
	/**
	 * dn<br>
	 * Original signature : <code>int dwarf_debugnames_abbrev_by_code(Dwarf_Dnames_Head, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2573</i>
	 */
	int dwarf_debugnames_abbrev_by_code(LibdwarfLibrary.Dwarf_Dnames_Head Dwarf_Dnames_Head1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, LongBuffer Dwarf_UnsignedPtr1, LongBuffer Dwarf_UnsignedPtr2, LongBuffer Dwarf_UnsignedPtr3, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dn<br>
	 * Original signature : <code>int dwarf_debugnames_abbrev_by_code(Dwarf_Dnames_Head, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2573</i>
	 */
	int dwarf_debugnames_abbrev_by_code(Pointer Dwarf_Dnames_Head1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dn<br>
	 * Original signature : <code>int dwarf_debugnames_abbrev_form_by_index(Dwarf_Dnames_Head, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2586</i><br>
	 * @deprecated use the safer methods {@link #dwarf_debugnames_abbrev_form_by_index(libdwarf.LibdwarfLibrary.Dwarf_Dnames_Head, long, long, long, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_debugnames_abbrev_form_by_index(com.sun.jna.Pointer, long, long, long, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_debugnames_abbrev_form_by_index(Pointer Dwarf_Dnames_Head1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, long Dwarf_Unsigned3, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, Pointer Dwarf_ErrorPtr1);
	/**
	 * dn<br>
	 * Original signature : <code>int dwarf_debugnames_abbrev_form_by_index(Dwarf_Dnames_Head, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2586</i>
	 */
	int dwarf_debugnames_abbrev_form_by_index(LibdwarfLibrary.Dwarf_Dnames_Head Dwarf_Dnames_Head1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, long Dwarf_Unsigned3, LongBuffer Dwarf_UnsignedPtr1, LongBuffer Dwarf_UnsignedPtr2, LongBuffer Dwarf_UnsignedPtr3, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dn<br>
	 * Original signature : <code>int dwarf_debugnames_abbrev_form_by_index(Dwarf_Dnames_Head, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2586</i>
	 */
	int dwarf_debugnames_abbrev_form_by_index(Pointer Dwarf_Dnames_Head1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, long Dwarf_Unsigned3, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * This, combined with dwarf_debugnames_entrypool_values(),<br>
	 * lets one examine as much or as little of an entrypool<br>
	 * as one wants to by alternately calling these two<br>
	 * functions.<br>
	 * dn<br>
	 * Original signature : <code>int dwarf_debugnames_entrypool(Dwarf_Dnames_Head, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2600</i><br>
	 * @deprecated use the safer methods {@link #dwarf_debugnames_entrypool(libdwarf.LibdwarfLibrary.Dwarf_Dnames_Head, long, long, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_debugnames_entrypool(com.sun.jna.Pointer, long, long, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_debugnames_entrypool(Pointer Dwarf_Dnames_Head1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, LongByReference Dwarf_UnsignedPtr4, LongByReference Dwarf_UnsignedPtr5, Pointer Dwarf_ErrorPtr1);
	/**
	 * This, combined with dwarf_debugnames_entrypool_values(),<br>
	 * lets one examine as much or as little of an entrypool<br>
	 * as one wants to by alternately calling these two<br>
	 * functions.<br>
	 * dn<br>
	 * Original signature : <code>int dwarf_debugnames_entrypool(Dwarf_Dnames_Head, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2600</i>
	 */
	int dwarf_debugnames_entrypool(LibdwarfLibrary.Dwarf_Dnames_Head Dwarf_Dnames_Head1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, LongBuffer Dwarf_UnsignedPtr1, LongBuffer Dwarf_UnsignedPtr2, LongBuffer Dwarf_UnsignedPtr3, LongBuffer Dwarf_UnsignedPtr4, LongBuffer Dwarf_UnsignedPtr5, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * This, combined with dwarf_debugnames_entrypool_values(),<br>
	 * lets one examine as much or as little of an entrypool<br>
	 * as one wants to by alternately calling these two<br>
	 * functions.<br>
	 * dn<br>
	 * Original signature : <code>int dwarf_debugnames_entrypool(Dwarf_Dnames_Head, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2600</i>
	 */
	int dwarf_debugnames_entrypool(Pointer Dwarf_Dnames_Head1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, LongByReference Dwarf_UnsignedPtr4, LongByReference Dwarf_UnsignedPtr5, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Caller, knowing array size needed, passes in arrays<br>
	 * it allocates of for idx, form, offset-size-values,<br>
	 * and signature values.  Caller must examine idx-number<br>
	 * and form to decide, for each array element, whether<br>
	 * the offset or the signature contains the value.<br>
	 * So this returns all the values for the abbrev code.<br>
	 * And points via offset_of_next to the next abbrev code.<br>
	 * dn<br>
	 * Original signature : <code>int dwarf_debugnames_entrypool_values(Dwarf_Dnames_Head, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Sig8*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2618</i><br>
	 * @deprecated use the safer methods {@link #dwarf_debugnames_entrypool_values(libdwarf.LibdwarfLibrary.Dwarf_Dnames_Head, long, long, long, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, libdwarf.Dwarf_Sig8_s, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_debugnames_entrypool_values(com.sun.jna.Pointer, long, long, long, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, libdwarf.Dwarf_Sig8_s, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_debugnames_entrypool_values(Pointer Dwarf_Dnames_Head1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, long Dwarf_Unsigned3, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, Dwarf_Sig8_s Dwarf_Sig8Ptr1, LongByReference Dwarf_UnsignedPtr4, Pointer Dwarf_ErrorPtr1);
	/**
	 * Caller, knowing array size needed, passes in arrays<br>
	 * it allocates of for idx, form, offset-size-values,<br>
	 * and signature values.  Caller must examine idx-number<br>
	 * and form to decide, for each array element, whether<br>
	 * the offset or the signature contains the value.<br>
	 * So this returns all the values for the abbrev code.<br>
	 * And points via offset_of_next to the next abbrev code.<br>
	 * dn<br>
	 * Original signature : <code>int dwarf_debugnames_entrypool_values(Dwarf_Dnames_Head, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Sig8*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2618</i>
	 */
	int dwarf_debugnames_entrypool_values(LibdwarfLibrary.Dwarf_Dnames_Head Dwarf_Dnames_Head1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, long Dwarf_Unsigned3, LongBuffer Dwarf_UnsignedPtr1, LongBuffer Dwarf_UnsignedPtr2, LongBuffer Dwarf_UnsignedPtr3, Dwarf_Sig8_s Dwarf_Sig8Ptr1, LongBuffer Dwarf_UnsignedPtr4, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Caller, knowing array size needed, passes in arrays<br>
	 * it allocates of for idx, form, offset-size-values,<br>
	 * and signature values.  Caller must examine idx-number<br>
	 * and form to decide, for each array element, whether<br>
	 * the offset or the signature contains the value.<br>
	 * So this returns all the values for the abbrev code.<br>
	 * And points via offset_of_next to the next abbrev code.<br>
	 * dn<br>
	 * Original signature : <code>int dwarf_debugnames_entrypool_values(Dwarf_Dnames_Head, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Sig8*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2618</i>
	 */
	int dwarf_debugnames_entrypool_values(Pointer Dwarf_Dnames_Head1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, long Dwarf_Unsigned3, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, Dwarf_Sig8_s Dwarf_Sig8Ptr1, LongByReference Dwarf_UnsignedPtr4, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_gnu_debuglink(Dwarf_Debug, char**, unsigned char**, char**, unsigned int*, unsigned int*, char**, unsigned char**, unsigned int*, char***, unsigned int*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2653</i><br>
	 * @deprecated use the safer methods {@link #dwarf_gnu_debuglink(libdwarf.LibdwarfLibrary.Dwarf_Debug, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, java.nio.IntBuffer, java.nio.IntBuffer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, java.nio.IntBuffer, com.sun.jna.ptr.PointerByReference, java.nio.IntBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_gnu_debuglink(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_gnu_debuglink(Pointer Dwarf_Debug1, PointerByReference charPtrPtr1, PointerByReference charPtrPtr2, PointerByReference charPtrPtr3, IntByReference intPtr1, IntByReference intPtr2, PointerByReference charPtrPtr4, PointerByReference charPtrPtr5, IntByReference intPtr3, PointerByReference charPtrPtrPtr1, IntByReference intPtr4, Pointer Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_gnu_debuglink(Dwarf_Debug, char**, unsigned char**, char**, unsigned int*, unsigned int*, char**, unsigned char**, unsigned int*, char***, unsigned int*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2653</i>
	 */
	int dwarf_gnu_debuglink(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, PointerByReference charPtrPtr1, PointerByReference charPtrPtr2, PointerByReference charPtrPtr3, IntBuffer intPtr1, IntBuffer intPtr2, PointerByReference charPtrPtr4, PointerByReference charPtrPtr5, IntBuffer intPtr3, PointerByReference charPtrPtrPtr1, IntBuffer intPtr4, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_gnu_debuglink(Dwarf_Debug, char**, unsigned char**, char**, unsigned int*, unsigned int*, char**, unsigned char**, unsigned int*, char***, unsigned int*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2653</i>
	 */
	int dwarf_gnu_debuglink(Pointer Dwarf_Debug1, PointerByReference charPtrPtr1, PointerByReference charPtrPtr2, PointerByReference charPtrPtr3, IntByReference intPtr1, IntByReference intPtr2, PointerByReference charPtrPtr4, PointerByReference charPtrPtr5, IntByReference intPtr3, PointerByReference charPtrPtrPtr1, IntByReference intPtr4, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * See<br>
	 * https://sourceware.org/gdb/onlinedocs/gdb/Separate-Debug-Files.html<br>
	 * and dwarf_gnu_debuglink()<br>
	 * pathname is a path-prefix to be added to a list of path-prefixes,<br>
	 * The default "/usr/lib/debug" is built-in and is the first<br>
	 * such in the list held in dbg.<br>
	 * The path prefix should start with / .<br>
	 * It can just end or end with / , either choice will work.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_add_debuglink_global_path(Dwarf_Debug, const char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2675</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_debuglink_global_path(libdwarf.LibdwarfLibrary.Dwarf_Debug, java.lang.String, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_debuglink_global_path(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_add_debuglink_global_path(Pointer Dwarf_Debug1, Pointer pathname, Pointer Dwarf_ErrorPtr1);
	/**
	 * See<br>
	 * https://sourceware.org/gdb/onlinedocs/gdb/Separate-Debug-Files.html<br>
	 * and dwarf_gnu_debuglink()<br>
	 * pathname is a path-prefix to be added to a list of path-prefixes,<br>
	 * The default "/usr/lib/debug" is built-in and is the first<br>
	 * such in the list held in dbg.<br>
	 * The path prefix should start with / .<br>
	 * It can just end or end with / , either choice will work.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_add_debuglink_global_path(Dwarf_Debug, const char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2675</i>
	 */
	int dwarf_add_debuglink_global_path(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, String pathname, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * See<br>
	 * https://sourceware.org/gdb/onlinedocs/gdb/Separate-Debug-Files.html<br>
	 * and dwarf_gnu_debuglink()<br>
	 * pathname is a path-prefix to be added to a list of path-prefixes,<br>
	 * The default "/usr/lib/debug" is built-in and is the first<br>
	 * such in the list held in dbg.<br>
	 * The path prefix should start with / .<br>
	 * It can just end or end with / , either choice will work.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_add_debuglink_global_path(Dwarf_Debug, const char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2675</i>
	 */
	int dwarf_add_debuglink_global_path(Pointer Dwarf_Debug1, Pointer pathname, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New March 2019. Special for dwarfdump.<br>
	 * Sets a flag in the dbg. Always returns DW_DLV_OK<br>
	 * and (as of March 2020) never touches error<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_return_empty_pubnames(Dwarf_Debug, int, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2687</i><br>
	 * @deprecated use the safer methods {@link #dwarf_return_empty_pubnames(libdwarf.LibdwarfLibrary.Dwarf_Debug, int, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_return_empty_pubnames(com.sun.jna.Pointer, int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_return_empty_pubnames(Pointer Dwarf_Debug1, int int1, Pointer Dwarf_ErrorPtr1);
	/**
	 * New March 2019. Special for dwarfdump.<br>
	 * Sets a flag in the dbg. Always returns DW_DLV_OK<br>
	 * and (as of March 2020) never touches error<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_return_empty_pubnames(Dwarf_Debug, int, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2687</i>
	 */
	int dwarf_return_empty_pubnames(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, int int1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New March 2019. Special for dwarfdump.<br>
	 * Sets a flag in the dbg. Always returns DW_DLV_OK<br>
	 * and (as of March 2020) never touches error<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_return_empty_pubnames(Dwarf_Debug, int, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2687</i>
	 */
	int dwarf_return_empty_pubnames(Pointer Dwarf_Debug1, int int1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_globals(Dwarf_Debug, Dwarf_Global**, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2691</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_globals(libdwarf.LibdwarfLibrary.Dwarf_Debug, com.sun.jna.ptr.PointerByReference, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_globals(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_globals(Pointer Dwarf_Debug1, PointerByReference Dwarf_GlobalPtrPtr1, LongByReference Dwarf_SignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_globals(Dwarf_Debug, Dwarf_Global**, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2691</i>
	 */
	int dwarf_get_globals(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, PointerByReference Dwarf_GlobalPtrPtr1, LongBuffer Dwarf_SignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_globals(Dwarf_Debug, Dwarf_Global**, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2691</i>
	 */
	int dwarf_get_globals(Pointer Dwarf_Debug1, PointerByReference Dwarf_GlobalPtrPtr1, LongByReference Dwarf_SignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>void dwarf_globals_dealloc(Dwarf_Debug, Dwarf_Global*, Dwarf_Signed)</code><br>
	 * <i>native declaration : line 2695</i><br>
	 * @deprecated use the safer methods {@link #dwarf_globals_dealloc(libdwarf.LibdwarfLibrary.Dwarf_Debug, com.sun.jna.ptr.PointerByReference, long)} and {@link #dwarf_globals_dealloc(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, long)} instead
	 */
	@Deprecated 
	void dwarf_globals_dealloc(Pointer Dwarf_Debug1, Pointer Dwarf_GlobalPtr1, long Dwarf_Signed1);
	/**
	 * dbg<br>
	 * Original signature : <code>void dwarf_globals_dealloc(Dwarf_Debug, Dwarf_Global*, Dwarf_Signed)</code><br>
	 * <i>native declaration : line 2695</i>
	 */
	void dwarf_globals_dealloc(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, PointerByReference Dwarf_GlobalPtr1, long Dwarf_Signed1);
	/**
	 * dbg<br>
	 * Original signature : <code>void dwarf_globals_dealloc(Dwarf_Debug, Dwarf_Global*, Dwarf_Signed)</code><br>
	 * <i>native declaration : line 2695</i>
	 */
	void dwarf_globals_dealloc(Pointer Dwarf_Debug1, PointerByReference Dwarf_GlobalPtr1, long Dwarf_Signed1);
	/**
	 * glob<br>
	 * Original signature : <code>int dwarf_globname(Dwarf_Global, char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2699</i><br>
	 * @deprecated use the safer methods {@link #dwarf_globname(libdwarf.LibdwarfLibrary.Dwarf_Global, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_globname(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_globname(Pointer Dwarf_Global1, PointerByReference charPtrPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * glob<br>
	 * Original signature : <code>int dwarf_globname(Dwarf_Global, char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2699</i>
	 */
	int dwarf_globname(LibdwarfLibrary.Dwarf_Global Dwarf_Global1, PointerByReference charPtrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * glob<br>
	 * Original signature : <code>int dwarf_globname(Dwarf_Global, char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2699</i>
	 */
	int dwarf_globname(Pointer Dwarf_Global1, PointerByReference charPtrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * global<br>
	 * Original signature : <code>int dwarf_global_die_offset(Dwarf_Global, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2703</i><br>
	 * @deprecated use the safer methods {@link #dwarf_global_die_offset(libdwarf.LibdwarfLibrary.Dwarf_Global, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_global_die_offset(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_global_die_offset(Pointer Dwarf_Global1, LongByReference Dwarf_OffPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * global<br>
	 * Original signature : <code>int dwarf_global_die_offset(Dwarf_Global, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2703</i>
	 */
	int dwarf_global_die_offset(LibdwarfLibrary.Dwarf_Global Dwarf_Global1, LongBuffer Dwarf_OffPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * global<br>
	 * Original signature : <code>int dwarf_global_die_offset(Dwarf_Global, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2703</i>
	 */
	int dwarf_global_die_offset(Pointer Dwarf_Global1, LongByReference Dwarf_OffPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * This returns the CU die global offset if one knows the<br>
	 * CU header global offset.<br>
	 * See also dwarf_CU_dieoffset_given_die().<br>
	 * Original signature : <code>int dwarf_get_cu_die_offset_given_cu_header_offset(Dwarf_Debug, Dwarf_Off, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2710</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_cu_die_offset_given_cu_header_offset(libdwarf.LibdwarfLibrary.Dwarf_Debug, long, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_cu_die_offset_given_cu_header_offset(com.sun.jna.Pointer, long, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_cu_die_offset_given_cu_header_offset(Pointer Dwarf_Debug1, long Dwarf_Off1, LongByReference Dwarf_OffPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * This returns the CU die global offset if one knows the<br>
	 * CU header global offset.<br>
	 * See also dwarf_CU_dieoffset_given_die().<br>
	 * Original signature : <code>int dwarf_get_cu_die_offset_given_cu_header_offset(Dwarf_Debug, Dwarf_Off, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2710</i>
	 */
	int dwarf_get_cu_die_offset_given_cu_header_offset(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, long Dwarf_Off1, LongBuffer Dwarf_OffPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * This returns the CU die global offset if one knows the<br>
	 * CU header global offset.<br>
	 * See also dwarf_CU_dieoffset_given_die().<br>
	 * Original signature : <code>int dwarf_get_cu_die_offset_given_cu_header_offset(Dwarf_Debug, Dwarf_Off, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2710</i>
	 */
	int dwarf_get_cu_die_offset_given_cu_header_offset(Pointer Dwarf_Debug1, long Dwarf_Off1, LongByReference Dwarf_OffPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * The _b form is new October 2011.<br>
	 * Original signature : <code>int dwarf_get_cu_die_offset_given_cu_header_offset_b(Dwarf_Debug, Dwarf_Off, Dwarf_Bool, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2717</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_cu_die_offset_given_cu_header_offset_b(libdwarf.LibdwarfLibrary.Dwarf_Debug, long, int, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_cu_die_offset_given_cu_header_offset_b(com.sun.jna.Pointer, long, int, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_cu_die_offset_given_cu_header_offset_b(Pointer Dwarf_Debug1, long Dwarf_Off1, int Dwarf_Bool1, LongByReference Dwarf_OffPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * The _b form is new October 2011.<br>
	 * Original signature : <code>int dwarf_get_cu_die_offset_given_cu_header_offset_b(Dwarf_Debug, Dwarf_Off, Dwarf_Bool, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2717</i>
	 */
	int dwarf_get_cu_die_offset_given_cu_header_offset_b(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, long Dwarf_Off1, int Dwarf_Bool1, LongBuffer Dwarf_OffPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * The _b form is new October 2011.<br>
	 * Original signature : <code>int dwarf_get_cu_die_offset_given_cu_header_offset_b(Dwarf_Debug, Dwarf_Off, Dwarf_Bool, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2717</i>
	 */
	int dwarf_get_cu_die_offset_given_cu_header_offset_b(Pointer Dwarf_Debug1, long Dwarf_Off1, int Dwarf_Bool1, LongByReference Dwarf_OffPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * global<br>
	 * Original signature : <code>int dwarf_global_cu_offset(Dwarf_Global, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2729</i><br>
	 * @deprecated use the safer methods {@link #dwarf_global_cu_offset(libdwarf.LibdwarfLibrary.Dwarf_Global, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_global_cu_offset(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_global_cu_offset(Pointer Dwarf_Global1, LongByReference Dwarf_OffPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * global<br>
	 * Original signature : <code>int dwarf_global_cu_offset(Dwarf_Global, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2729</i>
	 */
	int dwarf_global_cu_offset(LibdwarfLibrary.Dwarf_Global Dwarf_Global1, LongBuffer Dwarf_OffPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * global<br>
	 * Original signature : <code>int dwarf_global_cu_offset(Dwarf_Global, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2729</i>
	 */
	int dwarf_global_cu_offset(Pointer Dwarf_Global1, LongByReference Dwarf_OffPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * global<br>
	 * Original signature : <code>int dwarf_global_name_offsets(Dwarf_Global, char**, Dwarf_Off*, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2733</i><br>
	 * @deprecated use the safer methods {@link #dwarf_global_name_offsets(libdwarf.LibdwarfLibrary.Dwarf_Global, com.sun.jna.ptr.PointerByReference, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_global_name_offsets(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_global_name_offsets(Pointer Dwarf_Global1, PointerByReference charPtrPtr1, LongByReference Dwarf_OffPtr1, LongByReference Dwarf_OffPtr2, Pointer Dwarf_ErrorPtr1);
	/**
	 * global<br>
	 * Original signature : <code>int dwarf_global_name_offsets(Dwarf_Global, char**, Dwarf_Off*, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2733</i>
	 */
	int dwarf_global_name_offsets(LibdwarfLibrary.Dwarf_Global Dwarf_Global1, PointerByReference charPtrPtr1, LongBuffer Dwarf_OffPtr1, LongBuffer Dwarf_OffPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * global<br>
	 * Original signature : <code>int dwarf_global_name_offsets(Dwarf_Global, char**, Dwarf_Off*, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2733</i>
	 */
	int dwarf_global_name_offsets(Pointer Dwarf_Global1, PointerByReference charPtrPtr1, LongByReference Dwarf_OffPtr1, LongByReference Dwarf_OffPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New February 2019. For more complete dwarfdump printing.<br>
	 * For each CU represented in .debug_pubnames, etc,<br>
	 * there is a .debug_pubnames header.  For any given<br>
	 * Dwarf_Global this returns the content of the applicable<br>
	 * header.<br>
	 * global<br>
	 * Original signature : <code>int dwarf_get_globals_header(Dwarf_Global, Dwarf_Off*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2744</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_globals_header(libdwarf.LibdwarfLibrary.Dwarf_Global, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_globals_header(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_globals_header(Pointer Dwarf_Global1, LongByReference Dwarf_OffPtr1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, LongByReference Dwarf_UnsignedPtr4, LongByReference Dwarf_UnsignedPtr5, Pointer Dwarf_ErrorPtr1);
	/**
	 * New February 2019. For more complete dwarfdump printing.<br>
	 * For each CU represented in .debug_pubnames, etc,<br>
	 * there is a .debug_pubnames header.  For any given<br>
	 * Dwarf_Global this returns the content of the applicable<br>
	 * header.<br>
	 * global<br>
	 * Original signature : <code>int dwarf_get_globals_header(Dwarf_Global, Dwarf_Off*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2744</i>
	 */
	int dwarf_get_globals_header(LibdwarfLibrary.Dwarf_Global Dwarf_Global1, LongBuffer Dwarf_OffPtr1, LongBuffer Dwarf_UnsignedPtr1, LongBuffer Dwarf_UnsignedPtr2, LongBuffer Dwarf_UnsignedPtr3, LongBuffer Dwarf_UnsignedPtr4, LongBuffer Dwarf_UnsignedPtr5, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New February 2019. For more complete dwarfdump printing.<br>
	 * For each CU represented in .debug_pubnames, etc,<br>
	 * there is a .debug_pubnames header.  For any given<br>
	 * Dwarf_Global this returns the content of the applicable<br>
	 * header.<br>
	 * global<br>
	 * Original signature : <code>int dwarf_get_globals_header(Dwarf_Global, Dwarf_Off*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2744</i>
	 */
	int dwarf_get_globals_header(Pointer Dwarf_Global1, LongByReference Dwarf_OffPtr1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, LongByReference Dwarf_UnsignedPtr4, LongByReference Dwarf_UnsignedPtr5, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Static function name operations.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_funcs(Dwarf_Debug, Dwarf_Func**, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2754</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_funcs(libdwarf.LibdwarfLibrary.Dwarf_Debug, com.sun.jna.ptr.PointerByReference, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_funcs(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_funcs(Pointer Dwarf_Debug1, PointerByReference Dwarf_FuncPtrPtr1, LongByReference Dwarf_SignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Static function name operations.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_funcs(Dwarf_Debug, Dwarf_Func**, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2754</i>
	 */
	int dwarf_get_funcs(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, PointerByReference Dwarf_FuncPtrPtr1, LongBuffer Dwarf_SignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Static function name operations.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_funcs(Dwarf_Debug, Dwarf_Func**, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2754</i>
	 */
	int dwarf_get_funcs(Pointer Dwarf_Debug1, PointerByReference Dwarf_FuncPtrPtr1, LongByReference Dwarf_SignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>void dwarf_funcs_dealloc(Dwarf_Debug, Dwarf_Func*, Dwarf_Signed)</code><br>
	 * <i>native declaration : line 2758</i><br>
	 * @deprecated use the safer methods {@link #dwarf_funcs_dealloc(libdwarf.LibdwarfLibrary.Dwarf_Debug, com.sun.jna.ptr.PointerByReference, long)} and {@link #dwarf_funcs_dealloc(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, long)} instead
	 */
	@Deprecated 
	void dwarf_funcs_dealloc(Pointer Dwarf_Debug1, Pointer Dwarf_FuncPtr1, long Dwarf_Signed1);
	/**
	 * dbg<br>
	 * Original signature : <code>void dwarf_funcs_dealloc(Dwarf_Debug, Dwarf_Func*, Dwarf_Signed)</code><br>
	 * <i>native declaration : line 2758</i>
	 */
	void dwarf_funcs_dealloc(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, PointerByReference Dwarf_FuncPtr1, long Dwarf_Signed1);
	/**
	 * dbg<br>
	 * Original signature : <code>void dwarf_funcs_dealloc(Dwarf_Debug, Dwarf_Func*, Dwarf_Signed)</code><br>
	 * <i>native declaration : line 2758</i>
	 */
	void dwarf_funcs_dealloc(Pointer Dwarf_Debug1, PointerByReference Dwarf_FuncPtr1, long Dwarf_Signed1);
	/**
	 * func<br>
	 * Original signature : <code>int dwarf_funcname(Dwarf_Func, char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2762</i><br>
	 * @deprecated use the safer methods {@link #dwarf_funcname(libdwarf.LibdwarfLibrary.Dwarf_Func, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_funcname(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_funcname(Pointer Dwarf_Func1, PointerByReference charPtrPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * func<br>
	 * Original signature : <code>int dwarf_funcname(Dwarf_Func, char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2762</i>
	 */
	int dwarf_funcname(LibdwarfLibrary.Dwarf_Func Dwarf_Func1, PointerByReference charPtrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * func<br>
	 * Original signature : <code>int dwarf_funcname(Dwarf_Func, char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2762</i>
	 */
	int dwarf_funcname(Pointer Dwarf_Func1, PointerByReference charPtrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * func<br>
	 * Original signature : <code>int dwarf_func_die_offset(Dwarf_Func, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2766</i><br>
	 * @deprecated use the safer methods {@link #dwarf_func_die_offset(libdwarf.LibdwarfLibrary.Dwarf_Func, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_func_die_offset(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_func_die_offset(Pointer Dwarf_Func1, LongByReference Dwarf_OffPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * func<br>
	 * Original signature : <code>int dwarf_func_die_offset(Dwarf_Func, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2766</i>
	 */
	int dwarf_func_die_offset(LibdwarfLibrary.Dwarf_Func Dwarf_Func1, LongBuffer Dwarf_OffPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * func<br>
	 * Original signature : <code>int dwarf_func_die_offset(Dwarf_Func, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2766</i>
	 */
	int dwarf_func_die_offset(Pointer Dwarf_Func1, LongByReference Dwarf_OffPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * func<br>
	 * Original signature : <code>int dwarf_func_cu_offset(Dwarf_Func, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2770</i><br>
	 * @deprecated use the safer methods {@link #dwarf_func_cu_offset(libdwarf.LibdwarfLibrary.Dwarf_Func, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_func_cu_offset(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_func_cu_offset(Pointer Dwarf_Func1, LongByReference Dwarf_OffPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * func<br>
	 * Original signature : <code>int dwarf_func_cu_offset(Dwarf_Func, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2770</i>
	 */
	int dwarf_func_cu_offset(LibdwarfLibrary.Dwarf_Func Dwarf_Func1, LongBuffer Dwarf_OffPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * func<br>
	 * Original signature : <code>int dwarf_func_cu_offset(Dwarf_Func, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2770</i>
	 */
	int dwarf_func_cu_offset(Pointer Dwarf_Func1, LongByReference Dwarf_OffPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * func<br>
	 * Original signature : <code>int dwarf_func_name_offsets(Dwarf_Func, char**, Dwarf_Off*, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2774</i><br>
	 * @deprecated use the safer methods {@link #dwarf_func_name_offsets(libdwarf.LibdwarfLibrary.Dwarf_Func, com.sun.jna.ptr.PointerByReference, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_func_name_offsets(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_func_name_offsets(Pointer Dwarf_Func1, PointerByReference charPtrPtr1, LongByReference Dwarf_OffPtr1, LongByReference Dwarf_OffPtr2, Pointer Dwarf_ErrorPtr1);
	/**
	 * func<br>
	 * Original signature : <code>int dwarf_func_name_offsets(Dwarf_Func, char**, Dwarf_Off*, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2774</i>
	 */
	int dwarf_func_name_offsets(LibdwarfLibrary.Dwarf_Func Dwarf_Func1, PointerByReference charPtrPtr1, LongBuffer Dwarf_OffPtr1, LongBuffer Dwarf_OffPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * func<br>
	 * Original signature : <code>int dwarf_func_name_offsets(Dwarf_Func, char**, Dwarf_Off*, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2774</i>
	 */
	int dwarf_func_name_offsets(Pointer Dwarf_Func1, PointerByReference charPtrPtr1, LongByReference Dwarf_OffPtr1, LongByReference Dwarf_OffPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * User-defined type name operations, SGI IRIX .debug_typenames section.<br>
	 * Same content as DWARF3 .debug_pubtypes, but defined years before<br>
	 * .debug_pubtypes was defined.   SGI IRIX only.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_types(Dwarf_Debug, Dwarf_Type**, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2783</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_types(libdwarf.LibdwarfLibrary.Dwarf_Debug, com.sun.jna.ptr.PointerByReference, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_types(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_types(Pointer Dwarf_Debug1, PointerByReference Dwarf_TypePtrPtr1, LongByReference Dwarf_SignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * User-defined type name operations, SGI IRIX .debug_typenames section.<br>
	 * Same content as DWARF3 .debug_pubtypes, but defined years before<br>
	 * .debug_pubtypes was defined.   SGI IRIX only.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_types(Dwarf_Debug, Dwarf_Type**, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2783</i>
	 */
	int dwarf_get_types(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, PointerByReference Dwarf_TypePtrPtr1, LongBuffer Dwarf_SignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * User-defined type name operations, SGI IRIX .debug_typenames section.<br>
	 * Same content as DWARF3 .debug_pubtypes, but defined years before<br>
	 * .debug_pubtypes was defined.   SGI IRIX only.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_types(Dwarf_Debug, Dwarf_Type**, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2783</i>
	 */
	int dwarf_get_types(Pointer Dwarf_Debug1, PointerByReference Dwarf_TypePtrPtr1, LongByReference Dwarf_SignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>void dwarf_types_dealloc(Dwarf_Debug, Dwarf_Type*, Dwarf_Signed)</code><br>
	 * <i>native declaration : line 2787</i><br>
	 * @deprecated use the safer methods {@link #dwarf_types_dealloc(libdwarf.LibdwarfLibrary.Dwarf_Debug, com.sun.jna.ptr.PointerByReference, long)} and {@link #dwarf_types_dealloc(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, long)} instead
	 */
	@Deprecated 
	void dwarf_types_dealloc(Pointer Dwarf_Debug1, Pointer Dwarf_TypePtr1, long Dwarf_Signed1);
	/**
	 * dbg<br>
	 * Original signature : <code>void dwarf_types_dealloc(Dwarf_Debug, Dwarf_Type*, Dwarf_Signed)</code><br>
	 * <i>native declaration : line 2787</i>
	 */
	void dwarf_types_dealloc(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, PointerByReference Dwarf_TypePtr1, long Dwarf_Signed1);
	/**
	 * dbg<br>
	 * Original signature : <code>void dwarf_types_dealloc(Dwarf_Debug, Dwarf_Type*, Dwarf_Signed)</code><br>
	 * <i>native declaration : line 2787</i>
	 */
	void dwarf_types_dealloc(Pointer Dwarf_Debug1, PointerByReference Dwarf_TypePtr1, long Dwarf_Signed1);
	/**
	 * type<br>
	 * Original signature : <code>int dwarf_typename(Dwarf_Type, char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2792</i><br>
	 * @deprecated use the safer methods {@link #dwarf_typename(libdwarf.LibdwarfLibrary.Dwarf_Type, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_typename(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_typename(Pointer Dwarf_Type1, PointerByReference charPtrPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * type<br>
	 * Original signature : <code>int dwarf_typename(Dwarf_Type, char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2792</i>
	 */
	int dwarf_typename(LibdwarfLibrary.Dwarf_Type Dwarf_Type1, PointerByReference charPtrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * type<br>
	 * Original signature : <code>int dwarf_typename(Dwarf_Type, char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2792</i>
	 */
	int dwarf_typename(Pointer Dwarf_Type1, PointerByReference charPtrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * type<br>
	 * Original signature : <code>int dwarf_type_die_offset(Dwarf_Type, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2796</i><br>
	 * @deprecated use the safer methods {@link #dwarf_type_die_offset(libdwarf.LibdwarfLibrary.Dwarf_Type, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_type_die_offset(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_type_die_offset(Pointer Dwarf_Type1, LongByReference Dwarf_OffPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * type<br>
	 * Original signature : <code>int dwarf_type_die_offset(Dwarf_Type, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2796</i>
	 */
	int dwarf_type_die_offset(LibdwarfLibrary.Dwarf_Type Dwarf_Type1, LongBuffer Dwarf_OffPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * type<br>
	 * Original signature : <code>int dwarf_type_die_offset(Dwarf_Type, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2796</i>
	 */
	int dwarf_type_die_offset(Pointer Dwarf_Type1, LongByReference Dwarf_OffPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * type<br>
	 * Original signature : <code>int dwarf_type_cu_offset(Dwarf_Type, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2800</i><br>
	 * @deprecated use the safer methods {@link #dwarf_type_cu_offset(libdwarf.LibdwarfLibrary.Dwarf_Type, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_type_cu_offset(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_type_cu_offset(Pointer Dwarf_Type1, LongByReference Dwarf_OffPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * type<br>
	 * Original signature : <code>int dwarf_type_cu_offset(Dwarf_Type, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2800</i>
	 */
	int dwarf_type_cu_offset(LibdwarfLibrary.Dwarf_Type Dwarf_Type1, LongBuffer Dwarf_OffPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * type<br>
	 * Original signature : <code>int dwarf_type_cu_offset(Dwarf_Type, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2800</i>
	 */
	int dwarf_type_cu_offset(Pointer Dwarf_Type1, LongByReference Dwarf_OffPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * type<br>
	 * Original signature : <code>int dwarf_type_name_offsets(Dwarf_Type, char**, Dwarf_Off*, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2804</i><br>
	 * @deprecated use the safer methods {@link #dwarf_type_name_offsets(libdwarf.LibdwarfLibrary.Dwarf_Type, com.sun.jna.ptr.PointerByReference, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_type_name_offsets(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_type_name_offsets(Pointer Dwarf_Type1, PointerByReference charPtrPtr1, LongByReference Dwarf_OffPtr1, LongByReference Dwarf_OffPtr2, Pointer Dwarf_ErrorPtr1);
	/**
	 * type<br>
	 * Original signature : <code>int dwarf_type_name_offsets(Dwarf_Type, char**, Dwarf_Off*, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2804</i>
	 */
	int dwarf_type_name_offsets(LibdwarfLibrary.Dwarf_Type Dwarf_Type1, PointerByReference charPtrPtr1, LongBuffer Dwarf_OffPtr1, LongBuffer Dwarf_OffPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * type<br>
	 * Original signature : <code>int dwarf_type_name_offsets(Dwarf_Type, char**, Dwarf_Off*, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2804</i>
	 */
	int dwarf_type_name_offsets(Pointer Dwarf_Type1, PointerByReference charPtrPtr1, LongByReference Dwarf_OffPtr1, LongByReference Dwarf_OffPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * User-defined type name operations, DWARF3  .debug_pubtypes section.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_pubtypes(Dwarf_Debug, Dwarf_Type**, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2812</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_pubtypes(libdwarf.LibdwarfLibrary.Dwarf_Debug, com.sun.jna.ptr.PointerByReference, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_pubtypes(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_pubtypes(Pointer Dwarf_Debug1, PointerByReference Dwarf_TypePtrPtr1, LongByReference Dwarf_SignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * User-defined type name operations, DWARF3  .debug_pubtypes section.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_pubtypes(Dwarf_Debug, Dwarf_Type**, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2812</i>
	 */
	int dwarf_get_pubtypes(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, PointerByReference Dwarf_TypePtrPtr1, LongBuffer Dwarf_SignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * User-defined type name operations, DWARF3  .debug_pubtypes section.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_pubtypes(Dwarf_Debug, Dwarf_Type**, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2812</i>
	 */
	int dwarf_get_pubtypes(Pointer Dwarf_Debug1, PointerByReference Dwarf_TypePtrPtr1, LongByReference Dwarf_SignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>void dwarf_pubtypes_dealloc(Dwarf_Debug, Dwarf_Type*, Dwarf_Signed)</code><br>
	 * <i>native declaration : line 2816</i><br>
	 * @deprecated use the safer methods {@link #dwarf_pubtypes_dealloc(libdwarf.LibdwarfLibrary.Dwarf_Debug, com.sun.jna.ptr.PointerByReference, long)} and {@link #dwarf_pubtypes_dealloc(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, long)} instead
	 */
	@Deprecated 
	void dwarf_pubtypes_dealloc(Pointer Dwarf_Debug1, Pointer Dwarf_TypePtr1, long Dwarf_Signed1);
	/**
	 * dbg<br>
	 * Original signature : <code>void dwarf_pubtypes_dealloc(Dwarf_Debug, Dwarf_Type*, Dwarf_Signed)</code><br>
	 * <i>native declaration : line 2816</i>
	 */
	void dwarf_pubtypes_dealloc(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, PointerByReference Dwarf_TypePtr1, long Dwarf_Signed1);
	/**
	 * dbg<br>
	 * Original signature : <code>void dwarf_pubtypes_dealloc(Dwarf_Debug, Dwarf_Type*, Dwarf_Signed)</code><br>
	 * <i>native declaration : line 2816</i>
	 */
	void dwarf_pubtypes_dealloc(Pointer Dwarf_Debug1, PointerByReference Dwarf_TypePtr1, long Dwarf_Signed1);
	/**
	 * type<br>
	 * Original signature : <code>int dwarf_pubtypename(Dwarf_Type, char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2821</i><br>
	 * @deprecated use the safer methods {@link #dwarf_pubtypename(libdwarf.LibdwarfLibrary.Dwarf_Type, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_pubtypename(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_pubtypename(Pointer Dwarf_Type1, PointerByReference charPtrPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * type<br>
	 * Original signature : <code>int dwarf_pubtypename(Dwarf_Type, char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2821</i>
	 */
	int dwarf_pubtypename(LibdwarfLibrary.Dwarf_Type Dwarf_Type1, PointerByReference charPtrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * type<br>
	 * Original signature : <code>int dwarf_pubtypename(Dwarf_Type, char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2821</i>
	 */
	int dwarf_pubtypename(Pointer Dwarf_Type1, PointerByReference charPtrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * type<br>
	 * Original signature : <code>int dwarf_pubtype_type_die_offset(Dwarf_Type, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2825</i><br>
	 * @deprecated use the safer methods {@link #dwarf_pubtype_type_die_offset(libdwarf.LibdwarfLibrary.Dwarf_Type, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_pubtype_type_die_offset(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_pubtype_type_die_offset(Pointer Dwarf_Type1, LongByReference Dwarf_OffPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * type<br>
	 * Original signature : <code>int dwarf_pubtype_type_die_offset(Dwarf_Type, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2825</i>
	 */
	int dwarf_pubtype_type_die_offset(LibdwarfLibrary.Dwarf_Type Dwarf_Type1, LongBuffer Dwarf_OffPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * type<br>
	 * Original signature : <code>int dwarf_pubtype_type_die_offset(Dwarf_Type, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2825</i>
	 */
	int dwarf_pubtype_type_die_offset(Pointer Dwarf_Type1, LongByReference Dwarf_OffPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * type<br>
	 * Original signature : <code>int dwarf_pubtype_cu_offset(Dwarf_Type, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2829</i><br>
	 * @deprecated use the safer methods {@link #dwarf_pubtype_cu_offset(libdwarf.LibdwarfLibrary.Dwarf_Type, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_pubtype_cu_offset(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_pubtype_cu_offset(Pointer Dwarf_Type1, LongByReference Dwarf_OffPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * type<br>
	 * Original signature : <code>int dwarf_pubtype_cu_offset(Dwarf_Type, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2829</i>
	 */
	int dwarf_pubtype_cu_offset(LibdwarfLibrary.Dwarf_Type Dwarf_Type1, LongBuffer Dwarf_OffPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * type<br>
	 * Original signature : <code>int dwarf_pubtype_cu_offset(Dwarf_Type, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2829</i>
	 */
	int dwarf_pubtype_cu_offset(Pointer Dwarf_Type1, LongByReference Dwarf_OffPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * type<br>
	 * Original signature : <code>int dwarf_pubtype_name_offsets(Dwarf_Type, char**, Dwarf_Off*, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2833</i><br>
	 * @deprecated use the safer methods {@link #dwarf_pubtype_name_offsets(libdwarf.LibdwarfLibrary.Dwarf_Type, com.sun.jna.ptr.PointerByReference, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_pubtype_name_offsets(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_pubtype_name_offsets(Pointer Dwarf_Type1, PointerByReference charPtrPtr1, LongByReference Dwarf_OffPtr1, LongByReference Dwarf_OffPtr2, Pointer Dwarf_ErrorPtr1);
	/**
	 * type<br>
	 * Original signature : <code>int dwarf_pubtype_name_offsets(Dwarf_Type, char**, Dwarf_Off*, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2833</i>
	 */
	int dwarf_pubtype_name_offsets(LibdwarfLibrary.Dwarf_Type Dwarf_Type1, PointerByReference charPtrPtr1, LongBuffer Dwarf_OffPtr1, LongBuffer Dwarf_OffPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * type<br>
	 * Original signature : <code>int dwarf_pubtype_name_offsets(Dwarf_Type, char**, Dwarf_Off*, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2833</i>
	 */
	int dwarf_pubtype_name_offsets(Pointer Dwarf_Type1, PointerByReference charPtrPtr1, LongByReference Dwarf_OffPtr1, LongByReference Dwarf_OffPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * File-scope static variable name operations.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_vars(Dwarf_Debug, Dwarf_Var**, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2840</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_vars(libdwarf.LibdwarfLibrary.Dwarf_Debug, com.sun.jna.ptr.PointerByReference, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_vars(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_vars(Pointer Dwarf_Debug1, PointerByReference Dwarf_VarPtrPtr1, LongByReference Dwarf_SignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * File-scope static variable name operations.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_vars(Dwarf_Debug, Dwarf_Var**, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2840</i>
	 */
	int dwarf_get_vars(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, PointerByReference Dwarf_VarPtrPtr1, LongBuffer Dwarf_SignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * File-scope static variable name operations.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_vars(Dwarf_Debug, Dwarf_Var**, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2840</i>
	 */
	int dwarf_get_vars(Pointer Dwarf_Debug1, PointerByReference Dwarf_VarPtrPtr1, LongByReference Dwarf_SignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>void dwarf_vars_dealloc(Dwarf_Debug, Dwarf_Var*, Dwarf_Signed)</code><br>
	 * <i>native declaration : line 2844</i><br>
	 * @deprecated use the safer methods {@link #dwarf_vars_dealloc(libdwarf.LibdwarfLibrary.Dwarf_Debug, com.sun.jna.ptr.PointerByReference, long)} and {@link #dwarf_vars_dealloc(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, long)} instead
	 */
	@Deprecated 
	void dwarf_vars_dealloc(Pointer Dwarf_Debug1, Pointer Dwarf_VarPtr1, long Dwarf_Signed1);
	/**
	 * dbg<br>
	 * Original signature : <code>void dwarf_vars_dealloc(Dwarf_Debug, Dwarf_Var*, Dwarf_Signed)</code><br>
	 * <i>native declaration : line 2844</i>
	 */
	void dwarf_vars_dealloc(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, PointerByReference Dwarf_VarPtr1, long Dwarf_Signed1);
	/**
	 * dbg<br>
	 * Original signature : <code>void dwarf_vars_dealloc(Dwarf_Debug, Dwarf_Var*, Dwarf_Signed)</code><br>
	 * <i>native declaration : line 2844</i>
	 */
	void dwarf_vars_dealloc(Pointer Dwarf_Debug1, PointerByReference Dwarf_VarPtr1, long Dwarf_Signed1);
	/**
	 * var<br>
	 * Original signature : <code>int dwarf_varname(Dwarf_Var, char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2849</i><br>
	 * @deprecated use the safer methods {@link #dwarf_varname(libdwarf.LibdwarfLibrary.Dwarf_Var, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_varname(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_varname(Pointer Dwarf_Var1, PointerByReference charPtrPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * var<br>
	 * Original signature : <code>int dwarf_varname(Dwarf_Var, char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2849</i>
	 */
	int dwarf_varname(LibdwarfLibrary.Dwarf_Var Dwarf_Var1, PointerByReference charPtrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * var<br>
	 * Original signature : <code>int dwarf_varname(Dwarf_Var, char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2849</i>
	 */
	int dwarf_varname(Pointer Dwarf_Var1, PointerByReference charPtrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * var<br>
	 * Original signature : <code>int dwarf_var_die_offset(Dwarf_Var, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2853</i><br>
	 * @deprecated use the safer methods {@link #dwarf_var_die_offset(libdwarf.LibdwarfLibrary.Dwarf_Var, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_var_die_offset(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_var_die_offset(Pointer Dwarf_Var1, LongByReference Dwarf_OffPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * var<br>
	 * Original signature : <code>int dwarf_var_die_offset(Dwarf_Var, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2853</i>
	 */
	int dwarf_var_die_offset(LibdwarfLibrary.Dwarf_Var Dwarf_Var1, LongBuffer Dwarf_OffPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * var<br>
	 * Original signature : <code>int dwarf_var_die_offset(Dwarf_Var, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2853</i>
	 */
	int dwarf_var_die_offset(Pointer Dwarf_Var1, LongByReference Dwarf_OffPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * var<br>
	 * Original signature : <code>int dwarf_var_cu_offset(Dwarf_Var, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2857</i><br>
	 * @deprecated use the safer methods {@link #dwarf_var_cu_offset(libdwarf.LibdwarfLibrary.Dwarf_Var, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_var_cu_offset(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_var_cu_offset(Pointer Dwarf_Var1, LongByReference Dwarf_OffPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * var<br>
	 * Original signature : <code>int dwarf_var_cu_offset(Dwarf_Var, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2857</i>
	 */
	int dwarf_var_cu_offset(LibdwarfLibrary.Dwarf_Var Dwarf_Var1, LongBuffer Dwarf_OffPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * var<br>
	 * Original signature : <code>int dwarf_var_cu_offset(Dwarf_Var, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2857</i>
	 */
	int dwarf_var_cu_offset(Pointer Dwarf_Var1, LongByReference Dwarf_OffPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * var<br>
	 * Original signature : <code>int dwarf_var_name_offsets(Dwarf_Var, char**, Dwarf_Off*, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2861</i><br>
	 * @deprecated use the safer methods {@link #dwarf_var_name_offsets(libdwarf.LibdwarfLibrary.Dwarf_Var, com.sun.jna.ptr.PointerByReference, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_var_name_offsets(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_var_name_offsets(Pointer Dwarf_Var1, PointerByReference charPtrPtr1, LongByReference Dwarf_OffPtr1, LongByReference Dwarf_OffPtr2, Pointer Dwarf_ErrorPtr1);
	/**
	 * var<br>
	 * Original signature : <code>int dwarf_var_name_offsets(Dwarf_Var, char**, Dwarf_Off*, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2861</i>
	 */
	int dwarf_var_name_offsets(LibdwarfLibrary.Dwarf_Var Dwarf_Var1, PointerByReference charPtrPtr1, LongBuffer Dwarf_OffPtr1, LongBuffer Dwarf_OffPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * var<br>
	 * Original signature : <code>int dwarf_var_name_offsets(Dwarf_Var, char**, Dwarf_Off*, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2861</i>
	 */
	int dwarf_var_name_offsets(Pointer Dwarf_Var1, PointerByReference charPtrPtr1, LongByReference Dwarf_OffPtr1, LongByReference Dwarf_OffPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * weak name operations.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_weaks(Dwarf_Debug, Dwarf_Weak**, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2868</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_weaks(libdwarf.LibdwarfLibrary.Dwarf_Debug, com.sun.jna.ptr.PointerByReference, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_weaks(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_weaks(Pointer Dwarf_Debug1, PointerByReference Dwarf_WeakPtrPtr1, LongByReference Dwarf_SignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * weak name operations.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_weaks(Dwarf_Debug, Dwarf_Weak**, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2868</i>
	 */
	int dwarf_get_weaks(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, PointerByReference Dwarf_WeakPtrPtr1, LongBuffer Dwarf_SignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * weak name operations.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_weaks(Dwarf_Debug, Dwarf_Weak**, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2868</i>
	 */
	int dwarf_get_weaks(Pointer Dwarf_Debug1, PointerByReference Dwarf_WeakPtrPtr1, LongByReference Dwarf_SignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>void dwarf_weaks_dealloc(Dwarf_Debug, Dwarf_Weak*, Dwarf_Signed)</code><br>
	 * <i>native declaration : line 2872</i><br>
	 * @deprecated use the safer methods {@link #dwarf_weaks_dealloc(libdwarf.LibdwarfLibrary.Dwarf_Debug, com.sun.jna.ptr.PointerByReference, long)} and {@link #dwarf_weaks_dealloc(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, long)} instead
	 */
	@Deprecated 
	void dwarf_weaks_dealloc(Pointer Dwarf_Debug1, Pointer Dwarf_WeakPtr1, long Dwarf_Signed1);
	/**
	 * dbg<br>
	 * Original signature : <code>void dwarf_weaks_dealloc(Dwarf_Debug, Dwarf_Weak*, Dwarf_Signed)</code><br>
	 * <i>native declaration : line 2872</i>
	 */
	void dwarf_weaks_dealloc(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, PointerByReference Dwarf_WeakPtr1, long Dwarf_Signed1);
	/**
	 * dbg<br>
	 * Original signature : <code>void dwarf_weaks_dealloc(Dwarf_Debug, Dwarf_Weak*, Dwarf_Signed)</code><br>
	 * <i>native declaration : line 2872</i>
	 */
	void dwarf_weaks_dealloc(Pointer Dwarf_Debug1, PointerByReference Dwarf_WeakPtr1, long Dwarf_Signed1);
	/**
	 * weak<br>
	 * Original signature : <code>int dwarf_weakname(Dwarf_Weak, char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2877</i><br>
	 * @deprecated use the safer methods {@link #dwarf_weakname(libdwarf.LibdwarfLibrary.Dwarf_Weak, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_weakname(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_weakname(Pointer Dwarf_Weak1, PointerByReference charPtrPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * weak<br>
	 * Original signature : <code>int dwarf_weakname(Dwarf_Weak, char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2877</i>
	 */
	int dwarf_weakname(LibdwarfLibrary.Dwarf_Weak Dwarf_Weak1, PointerByReference charPtrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * weak<br>
	 * Original signature : <code>int dwarf_weakname(Dwarf_Weak, char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2877</i>
	 */
	int dwarf_weakname(Pointer Dwarf_Weak1, PointerByReference charPtrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * weak<br>
	 * Original signature : <code>int dwarf_weak_die_offset(Dwarf_Weak, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2881</i><br>
	 * @deprecated use the safer methods {@link #dwarf_weak_die_offset(libdwarf.LibdwarfLibrary.Dwarf_Weak, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_weak_die_offset(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_weak_die_offset(Pointer Dwarf_Weak1, LongByReference Dwarf_OffPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * weak<br>
	 * Original signature : <code>int dwarf_weak_die_offset(Dwarf_Weak, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2881</i>
	 */
	int dwarf_weak_die_offset(LibdwarfLibrary.Dwarf_Weak Dwarf_Weak1, LongBuffer Dwarf_OffPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * weak<br>
	 * Original signature : <code>int dwarf_weak_die_offset(Dwarf_Weak, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2881</i>
	 */
	int dwarf_weak_die_offset(Pointer Dwarf_Weak1, LongByReference Dwarf_OffPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * weak<br>
	 * Original signature : <code>int dwarf_weak_cu_offset(Dwarf_Weak, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2885</i><br>
	 * @deprecated use the safer methods {@link #dwarf_weak_cu_offset(libdwarf.LibdwarfLibrary.Dwarf_Weak, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_weak_cu_offset(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_weak_cu_offset(Pointer Dwarf_Weak1, LongByReference Dwarf_OffPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * weak<br>
	 * Original signature : <code>int dwarf_weak_cu_offset(Dwarf_Weak, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2885</i>
	 */
	int dwarf_weak_cu_offset(LibdwarfLibrary.Dwarf_Weak Dwarf_Weak1, LongBuffer Dwarf_OffPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * weak<br>
	 * Original signature : <code>int dwarf_weak_cu_offset(Dwarf_Weak, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2885</i>
	 */
	int dwarf_weak_cu_offset(Pointer Dwarf_Weak1, LongByReference Dwarf_OffPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * weak<br>
	 * Original signature : <code>int dwarf_weak_name_offsets(Dwarf_Weak, char**, Dwarf_Off*, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2889</i><br>
	 * @deprecated use the safer methods {@link #dwarf_weak_name_offsets(libdwarf.LibdwarfLibrary.Dwarf_Weak, com.sun.jna.ptr.PointerByReference, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_weak_name_offsets(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_weak_name_offsets(Pointer Dwarf_Weak1, PointerByReference charPtrPtr1, LongByReference Dwarf_OffPtr1, LongByReference Dwarf_OffPtr2, Pointer Dwarf_ErrorPtr1);
	/**
	 * weak<br>
	 * Original signature : <code>int dwarf_weak_name_offsets(Dwarf_Weak, char**, Dwarf_Off*, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2889</i>
	 */
	int dwarf_weak_name_offsets(LibdwarfLibrary.Dwarf_Weak Dwarf_Weak1, PointerByReference charPtrPtr1, LongBuffer Dwarf_OffPtr1, LongBuffer Dwarf_OffPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * weak<br>
	 * Original signature : <code>int dwarf_weak_name_offsets(Dwarf_Weak, char**, Dwarf_Off*, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2889</i>
	 */
	int dwarf_weak_name_offsets(Pointer Dwarf_Weak1, PointerByReference charPtrPtr1, LongByReference Dwarf_OffPtr1, LongByReference Dwarf_OffPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * location list section operation.  (.debug_loc access)<br>
	 * DO NOT USE, it cannot deal with<br>
	 * recent dwarf or CUs with different<br>
	 * address sizes.  Use dwarf_get_locdesc_entry_c() instead.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_loclist_entry(Dwarf_Debug, Dwarf_Unsigned, Dwarf_Addr*, Dwarf_Addr*, Dwarf_Ptr*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2900</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_loclist_entry(libdwarf.LibdwarfLibrary.Dwarf_Debug, long, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_loclist_entry(com.sun.jna.Pointer, long, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_loclist_entry(Pointer Dwarf_Debug1, long Dwarf_Unsigned1, LongByReference Dwarf_AddrPtr1, LongByReference Dwarf_AddrPtr2, PointerByReference Dwarf_PtrPtr1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, Pointer Dwarf_ErrorPtr1);
	/**
	 * location list section operation.  (.debug_loc access)<br>
	 * DO NOT USE, it cannot deal with<br>
	 * recent dwarf or CUs with different<br>
	 * address sizes.  Use dwarf_get_locdesc_entry_c() instead.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_loclist_entry(Dwarf_Debug, Dwarf_Unsigned, Dwarf_Addr*, Dwarf_Addr*, Dwarf_Ptr*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2900</i>
	 */
	int dwarf_get_loclist_entry(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, long Dwarf_Unsigned1, LongBuffer Dwarf_AddrPtr1, LongBuffer Dwarf_AddrPtr2, PointerByReference Dwarf_PtrPtr1, LongBuffer Dwarf_UnsignedPtr1, LongBuffer Dwarf_UnsignedPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * location list section operation.  (.debug_loc access)<br>
	 * DO NOT USE, it cannot deal with<br>
	 * recent dwarf or CUs with different<br>
	 * address sizes.  Use dwarf_get_locdesc_entry_c() instead.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_loclist_entry(Dwarf_Debug, Dwarf_Unsigned, Dwarf_Addr*, Dwarf_Addr*, Dwarf_Ptr*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2900</i>
	 */
	int dwarf_get_loclist_entry(Pointer Dwarf_Debug1, long Dwarf_Unsigned1, LongByReference Dwarf_AddrPtr1, LongByReference Dwarf_AddrPtr2, PointerByReference Dwarf_PtrPtr1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * abbreviation section operations<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_abbrev(Dwarf_Debug, Dwarf_Unsigned, Dwarf_Abbrev*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2910</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_abbrev(libdwarf.LibdwarfLibrary.Dwarf_Debug, long, com.sun.jna.ptr.PointerByReference, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_abbrev(com.sun.jna.Pointer, long, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_abbrev(Pointer Dwarf_Debug1, long Dwarf_Unsigned1, Pointer Dwarf_AbbrevPtr1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, Pointer Dwarf_ErrorPtr1);
	/**
	 * abbreviation section operations<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_abbrev(Dwarf_Debug, Dwarf_Unsigned, Dwarf_Abbrev*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2910</i>
	 */
	int dwarf_get_abbrev(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, long Dwarf_Unsigned1, PointerByReference Dwarf_AbbrevPtr1, LongBuffer Dwarf_UnsignedPtr1, LongBuffer Dwarf_UnsignedPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * abbreviation section operations<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_abbrev(Dwarf_Debug, Dwarf_Unsigned, Dwarf_Abbrev*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2910</i>
	 */
	int dwarf_get_abbrev(Pointer Dwarf_Debug1, long Dwarf_Unsigned1, PointerByReference Dwarf_AbbrevPtr1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * abbrev<br>
	 * Original signature : <code>int dwarf_get_abbrev_tag(Dwarf_Abbrev, Dwarf_Half*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2917</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_abbrev_tag(libdwarf.LibdwarfLibrary.Dwarf_Abbrev, java.nio.ShortBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_abbrev_tag(com.sun.jna.Pointer, com.sun.jna.ptr.ShortByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_abbrev_tag(Pointer Dwarf_Abbrev1, ShortByReference Dwarf_HalfPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * abbrev<br>
	 * Original signature : <code>int dwarf_get_abbrev_tag(Dwarf_Abbrev, Dwarf_Half*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2917</i>
	 */
	int dwarf_get_abbrev_tag(LibdwarfLibrary.Dwarf_Abbrev Dwarf_Abbrev1, ShortBuffer Dwarf_HalfPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * abbrev<br>
	 * Original signature : <code>int dwarf_get_abbrev_tag(Dwarf_Abbrev, Dwarf_Half*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2917</i>
	 */
	int dwarf_get_abbrev_tag(Pointer Dwarf_Abbrev1, ShortByReference Dwarf_HalfPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * abbrev<br>
	 * Original signature : <code>int dwarf_get_abbrev_code(Dwarf_Abbrev, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2920</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_abbrev_code(libdwarf.LibdwarfLibrary.Dwarf_Abbrev, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_abbrev_code(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_abbrev_code(Pointer Dwarf_Abbrev1, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * abbrev<br>
	 * Original signature : <code>int dwarf_get_abbrev_code(Dwarf_Abbrev, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2920</i>
	 */
	int dwarf_get_abbrev_code(LibdwarfLibrary.Dwarf_Abbrev Dwarf_Abbrev1, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * abbrev<br>
	 * Original signature : <code>int dwarf_get_abbrev_code(Dwarf_Abbrev, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2920</i>
	 */
	int dwarf_get_abbrev_code(Pointer Dwarf_Abbrev1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * See comments in dwarf_abbrev.c. Not an entirely safe function.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_abbrev_count(Dwarf_Debug)</code><br>
	 * <i>native declaration : line 2925</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_abbrev_count(libdwarf.LibdwarfLibrary.Dwarf_Debug)} and {@link #dwarf_get_abbrev_count(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int dwarf_get_abbrev_count(Pointer Dwarf_Debug1);
	/**
	 * See comments in dwarf_abbrev.c. Not an entirely safe function.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_abbrev_count(Dwarf_Debug)</code><br>
	 * <i>native declaration : line 2925</i>
	 */
	int dwarf_get_abbrev_count(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1);
	/**
	 * abbrev<br>
	 * Original signature : <code>int dwarf_get_abbrev_children_flag(Dwarf_Abbrev, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2927</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_abbrev_children_flag(libdwarf.LibdwarfLibrary.Dwarf_Abbrev, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_abbrev_children_flag(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_abbrev_children_flag(Pointer Dwarf_Abbrev1, LongByReference Dwarf_SignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * abbrev<br>
	 * Original signature : <code>int dwarf_get_abbrev_children_flag(Dwarf_Abbrev, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2927</i>
	 */
	int dwarf_get_abbrev_children_flag(LibdwarfLibrary.Dwarf_Abbrev Dwarf_Abbrev1, LongBuffer Dwarf_SignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * abbrev<br>
	 * Original signature : <code>int dwarf_get_abbrev_children_flag(Dwarf_Abbrev, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2927</i>
	 */
	int dwarf_get_abbrev_children_flag(Pointer Dwarf_Abbrev1, LongByReference Dwarf_SignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New August 2019.<br>
	 * Most uses will call with filter_outliers non-zero.<br>
	 * In that case impossible values return DW_DLV_ERROR.<br>
	 * Those doing extra things (like dwarfdump) will<br>
	 * call with filter_outliers zero to get the raw data<br>
	 * (effectively);<br>
	 * Original signature : <code>int dwarf_get_abbrev_entry_b(Dwarf_Abbrev, Dwarf_Unsigned, Dwarf_Bool, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Signed*, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2937</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_abbrev_entry_b(libdwarf.LibdwarfLibrary.Dwarf_Abbrev, long, int, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_abbrev_entry_b(com.sun.jna.Pointer, long, int, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_abbrev_entry_b(Pointer abbrev, long indx, int filter_outliers, LongByReference returned_attr_num, LongByReference returned_form, LongByReference returned_implict_const, LongByReference offset, Pointer error);
	/**
	 * New August 2019.<br>
	 * Most uses will call with filter_outliers non-zero.<br>
	 * In that case impossible values return DW_DLV_ERROR.<br>
	 * Those doing extra things (like dwarfdump) will<br>
	 * call with filter_outliers zero to get the raw data<br>
	 * (effectively);<br>
	 * Original signature : <code>int dwarf_get_abbrev_entry_b(Dwarf_Abbrev, Dwarf_Unsigned, Dwarf_Bool, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Signed*, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2937</i>
	 */
	int dwarf_get_abbrev_entry_b(LibdwarfLibrary.Dwarf_Abbrev abbrev, long indx, int filter_outliers, LongBuffer returned_attr_num, LongBuffer returned_form, LongBuffer returned_implict_const, LongBuffer offset, PointerByReference error);
	/**
	 * New August 2019.<br>
	 * Most uses will call with filter_outliers non-zero.<br>
	 * In that case impossible values return DW_DLV_ERROR.<br>
	 * Those doing extra things (like dwarfdump) will<br>
	 * call with filter_outliers zero to get the raw data<br>
	 * (effectively);<br>
	 * Original signature : <code>int dwarf_get_abbrev_entry_b(Dwarf_Abbrev, Dwarf_Unsigned, Dwarf_Bool, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Signed*, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2937</i>
	 */
	int dwarf_get_abbrev_entry_b(Pointer abbrev, long indx, int filter_outliers, LongByReference returned_attr_num, LongByReference returned_form, LongByReference returned_implict_const, LongByReference offset, PointerByReference error);
	/**
	 * Obsolete because it cannot return the<br>
	 * DW_FORM_implicit_const value.<br>
	 * abbrev<br>
	 * Original signature : <code>int dwarf_get_abbrev_entry(Dwarf_Abbrev, Dwarf_Signed, Dwarf_Half*, Dwarf_Signed*, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2948</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_abbrev_entry(libdwarf.LibdwarfLibrary.Dwarf_Abbrev, long, java.nio.ShortBuffer, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_abbrev_entry(com.sun.jna.Pointer, long, com.sun.jna.ptr.ShortByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_abbrev_entry(Pointer Dwarf_Abbrev1, long Dwarf_Signed1, ShortByReference Dwarf_HalfPtr1, LongByReference Dwarf_SignedPtr1, LongByReference Dwarf_OffPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Obsolete because it cannot return the<br>
	 * DW_FORM_implicit_const value.<br>
	 * abbrev<br>
	 * Original signature : <code>int dwarf_get_abbrev_entry(Dwarf_Abbrev, Dwarf_Signed, Dwarf_Half*, Dwarf_Signed*, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2948</i>
	 */
	int dwarf_get_abbrev_entry(LibdwarfLibrary.Dwarf_Abbrev Dwarf_Abbrev1, long Dwarf_Signed1, ShortBuffer Dwarf_HalfPtr1, LongBuffer Dwarf_SignedPtr1, LongBuffer Dwarf_OffPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Obsolete because it cannot return the<br>
	 * DW_FORM_implicit_const value.<br>
	 * abbrev<br>
	 * Original signature : <code>int dwarf_get_abbrev_entry(Dwarf_Abbrev, Dwarf_Signed, Dwarf_Half*, Dwarf_Signed*, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2948</i>
	 */
	int dwarf_get_abbrev_entry(Pointer Dwarf_Abbrev1, long Dwarf_Signed1, ShortByReference Dwarf_HalfPtr1, LongByReference Dwarf_SignedPtr1, LongByReference Dwarf_OffPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_string_section_name(Dwarf_Debug, const char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2955</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_string_section_name(libdwarf.LibdwarfLibrary.Dwarf_Debug, java.lang.String[], com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_string_section_name(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_string_section_name(Pointer Dwarf_Debug1, PointerByReference charPtrPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_string_section_name(Dwarf_Debug, const char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2955</i>
	 */
	int dwarf_get_string_section_name(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, String charPtrPtr1[], PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_string_section_name(Dwarf_Debug, const char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2955</i>
	 */
	int dwarf_get_string_section_name(Pointer Dwarf_Debug1, PointerByReference charPtrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * consumer string section operation<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_str(Dwarf_Debug, Dwarf_Off, char**, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2960</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_str(libdwarf.LibdwarfLibrary.Dwarf_Debug, long, com.sun.jna.ptr.PointerByReference, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_str(com.sun.jna.Pointer, long, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_str(Pointer Dwarf_Debug1, long Dwarf_Off1, PointerByReference charPtrPtr1, LongByReference Dwarf_SignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * consumer string section operation<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_str(Dwarf_Debug, Dwarf_Off, char**, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2960</i>
	 */
	int dwarf_get_str(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, long Dwarf_Off1, PointerByReference charPtrPtr1, LongBuffer Dwarf_SignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * consumer string section operation<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_str(Dwarf_Debug, Dwarf_Off, char**, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2960</i>
	 */
	int dwarf_get_str(Pointer Dwarf_Debug1, long Dwarf_Off1, PointerByReference charPtrPtr1, LongByReference Dwarf_SignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New November 2015<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_frame_section_name(Dwarf_Debug, const char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2967</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_frame_section_name(libdwarf.LibdwarfLibrary.Dwarf_Debug, java.lang.String[], com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_frame_section_name(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_frame_section_name(Pointer Dwarf_Debug1, PointerByReference charPtrPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * New November 2015<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_frame_section_name(Dwarf_Debug, const char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2967</i>
	 */
	int dwarf_get_frame_section_name(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, String charPtrPtr1[], PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New November 2015<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_frame_section_name(Dwarf_Debug, const char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2967</i>
	 */
	int dwarf_get_frame_section_name(Pointer Dwarf_Debug1, PointerByReference charPtrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New November 2015<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_frame_section_name_eh_gnu(Dwarf_Debug, const char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2972</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_frame_section_name_eh_gnu(libdwarf.LibdwarfLibrary.Dwarf_Debug, java.lang.String[], com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_frame_section_name_eh_gnu(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_frame_section_name_eh_gnu(Pointer Dwarf_Debug1, PointerByReference charPtrPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * New November 2015<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_frame_section_name_eh_gnu(Dwarf_Debug, const char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2972</i>
	 */
	int dwarf_get_frame_section_name_eh_gnu(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, String charPtrPtr1[], PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New November 2015<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_frame_section_name_eh_gnu(Dwarf_Debug, const char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2972</i>
	 */
	int dwarf_get_frame_section_name_eh_gnu(Pointer Dwarf_Debug1, PointerByReference charPtrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Consumer op on  gnu .eh_frame info<br>
	 * Original signature : <code>int dwarf_get_fde_list_eh(Dwarf_Debug, Dwarf_Cie**, Dwarf_Signed*, Dwarf_Fde**, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2977</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_fde_list_eh(libdwarf.LibdwarfLibrary.Dwarf_Debug, com.sun.jna.ptr.PointerByReference, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_fde_list_eh(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_fde_list_eh(Pointer Dwarf_Debug1, PointerByReference Dwarf_CiePtrPtr1, LongByReference Dwarf_SignedPtr1, PointerByReference Dwarf_FdePtrPtr1, LongByReference Dwarf_SignedPtr2, Pointer Dwarf_ErrorPtr1);
	/**
	 * Consumer op on  gnu .eh_frame info<br>
	 * Original signature : <code>int dwarf_get_fde_list_eh(Dwarf_Debug, Dwarf_Cie**, Dwarf_Signed*, Dwarf_Fde**, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2977</i>
	 */
	int dwarf_get_fde_list_eh(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, PointerByReference Dwarf_CiePtrPtr1, LongBuffer Dwarf_SignedPtr1, PointerByReference Dwarf_FdePtrPtr1, LongBuffer Dwarf_SignedPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Consumer op on  gnu .eh_frame info<br>
	 * Original signature : <code>int dwarf_get_fde_list_eh(Dwarf_Debug, Dwarf_Cie**, Dwarf_Signed*, Dwarf_Fde**, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2977</i>
	 */
	int dwarf_get_fde_list_eh(Pointer Dwarf_Debug1, PointerByReference Dwarf_CiePtrPtr1, LongByReference Dwarf_SignedPtr1, PointerByReference Dwarf_FdePtrPtr1, LongByReference Dwarf_SignedPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * consumer operations on frame info: .debug_frame<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_fde_list(Dwarf_Debug, Dwarf_Cie**, Dwarf_Signed*, Dwarf_Fde**, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2987</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_fde_list(libdwarf.LibdwarfLibrary.Dwarf_Debug, com.sun.jna.ptr.PointerByReference, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_fde_list(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_fde_list(Pointer Dwarf_Debug1, PointerByReference Dwarf_CiePtrPtr1, LongByReference Dwarf_SignedPtr1, PointerByReference Dwarf_FdePtrPtr1, LongByReference Dwarf_SignedPtr2, Pointer Dwarf_ErrorPtr1);
	/**
	 * consumer operations on frame info: .debug_frame<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_fde_list(Dwarf_Debug, Dwarf_Cie**, Dwarf_Signed*, Dwarf_Fde**, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2987</i>
	 */
	int dwarf_get_fde_list(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, PointerByReference Dwarf_CiePtrPtr1, LongBuffer Dwarf_SignedPtr1, PointerByReference Dwarf_FdePtrPtr1, LongBuffer Dwarf_SignedPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * consumer operations on frame info: .debug_frame<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_fde_list(Dwarf_Debug, Dwarf_Cie**, Dwarf_Signed*, Dwarf_Fde**, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 2987</i>
	 */
	int dwarf_get_fde_list(Pointer Dwarf_Debug1, PointerByReference Dwarf_CiePtrPtr1, LongByReference Dwarf_SignedPtr1, PointerByReference Dwarf_FdePtrPtr1, LongByReference Dwarf_SignedPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Release storage gotten by dwarf_get_fde_list_eh() or<br>
	 * dwarf_get_fde_list()<br>
	 * dbg<br>
	 * Original signature : <code>void dwarf_fde_cie_list_dealloc(Dwarf_Debug, Dwarf_Cie*, Dwarf_Signed, Dwarf_Fde*, Dwarf_Signed)</code><br>
	 * <i>native declaration : line 2996</i><br>
	 * @deprecated use the safer methods {@link #dwarf_fde_cie_list_dealloc(libdwarf.LibdwarfLibrary.Dwarf_Debug, com.sun.jna.ptr.PointerByReference, long, com.sun.jna.ptr.PointerByReference, long)} and {@link #dwarf_fde_cie_list_dealloc(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, long, com.sun.jna.ptr.PointerByReference, long)} instead
	 */
	@Deprecated 
	void dwarf_fde_cie_list_dealloc(Pointer Dwarf_Debug1, Pointer Dwarf_CiePtr1, long Dwarf_Signed1, Pointer Dwarf_FdePtr1, long Dwarf_Signed2);
	/**
	 * Release storage gotten by dwarf_get_fde_list_eh() or<br>
	 * dwarf_get_fde_list()<br>
	 * dbg<br>
	 * Original signature : <code>void dwarf_fde_cie_list_dealloc(Dwarf_Debug, Dwarf_Cie*, Dwarf_Signed, Dwarf_Fde*, Dwarf_Signed)</code><br>
	 * <i>native declaration : line 2996</i>
	 */
	void dwarf_fde_cie_list_dealloc(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, PointerByReference Dwarf_CiePtr1, long Dwarf_Signed1, PointerByReference Dwarf_FdePtr1, long Dwarf_Signed2);
	/**
	 * Release storage gotten by dwarf_get_fde_list_eh() or<br>
	 * dwarf_get_fde_list()<br>
	 * dbg<br>
	 * Original signature : <code>void dwarf_fde_cie_list_dealloc(Dwarf_Debug, Dwarf_Cie*, Dwarf_Signed, Dwarf_Fde*, Dwarf_Signed)</code><br>
	 * <i>native declaration : line 2996</i>
	 */
	void dwarf_fde_cie_list_dealloc(Pointer Dwarf_Debug1, PointerByReference Dwarf_CiePtr1, long Dwarf_Signed1, PointerByReference Dwarf_FdePtr1, long Dwarf_Signed2);
	/**
	 * fde<br>
	 * Original signature : <code>int dwarf_get_fde_range(Dwarf_Fde, Dwarf_Addr*, Dwarf_Unsigned*, Dwarf_Ptr*, Dwarf_Unsigned*, Dwarf_Off*, Dwarf_Signed*, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3004</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_fde_range(libdwarf.LibdwarfLibrary.Dwarf_Fde, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_fde_range(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_fde_range(Pointer Dwarf_Fde1, LongByReference Dwarf_AddrPtr1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_PtrPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_OffPtr1, LongByReference Dwarf_SignedPtr1, LongByReference Dwarf_OffPtr2, Pointer Dwarf_ErrorPtr1);
	/**
	 * fde<br>
	 * Original signature : <code>int dwarf_get_fde_range(Dwarf_Fde, Dwarf_Addr*, Dwarf_Unsigned*, Dwarf_Ptr*, Dwarf_Unsigned*, Dwarf_Off*, Dwarf_Signed*, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3004</i>
	 */
	int dwarf_get_fde_range(LibdwarfLibrary.Dwarf_Fde Dwarf_Fde1, LongBuffer Dwarf_AddrPtr1, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_PtrPtr1, LongBuffer Dwarf_UnsignedPtr2, LongBuffer Dwarf_OffPtr1, LongBuffer Dwarf_SignedPtr1, LongBuffer Dwarf_OffPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * fde<br>
	 * Original signature : <code>int dwarf_get_fde_range(Dwarf_Fde, Dwarf_Addr*, Dwarf_Unsigned*, Dwarf_Ptr*, Dwarf_Unsigned*, Dwarf_Off*, Dwarf_Signed*, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3004</i>
	 */
	int dwarf_get_fde_range(Pointer Dwarf_Fde1, LongByReference Dwarf_AddrPtr1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_PtrPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_OffPtr1, LongByReference Dwarf_SignedPtr1, LongByReference Dwarf_OffPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Useful for IRIX only:  see dwarf_get_cie_augmentation_data()<br>
	 * dwarf_get_fde_augmentation_data() for GNU .eh_frame.<br>
	 * fde<br>
	 * Original signature : <code>int dwarf_get_fde_exception_info(Dwarf_Fde, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3016</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_fde_exception_info(libdwarf.LibdwarfLibrary.Dwarf_Fde, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_fde_exception_info(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_fde_exception_info(Pointer Dwarf_Fde1, LongByReference Dwarf_SignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Useful for IRIX only:  see dwarf_get_cie_augmentation_data()<br>
	 * dwarf_get_fde_augmentation_data() for GNU .eh_frame.<br>
	 * fde<br>
	 * Original signature : <code>int dwarf_get_fde_exception_info(Dwarf_Fde, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3016</i>
	 */
	int dwarf_get_fde_exception_info(LibdwarfLibrary.Dwarf_Fde Dwarf_Fde1, LongBuffer Dwarf_SignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Useful for IRIX only:  see dwarf_get_cie_augmentation_data()<br>
	 * dwarf_get_fde_augmentation_data() for GNU .eh_frame.<br>
	 * fde<br>
	 * Original signature : <code>int dwarf_get_fde_exception_info(Dwarf_Fde, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3016</i>
	 */
	int dwarf_get_fde_exception_info(Pointer Dwarf_Fde1, LongByReference Dwarf_SignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * fde<br>
	 * Original signature : <code>int dwarf_get_cie_of_fde(Dwarf_Fde, Dwarf_Cie*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3021</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_cie_of_fde(libdwarf.LibdwarfLibrary.Dwarf_Fde, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_cie_of_fde(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_cie_of_fde(Pointer Dwarf_Fde1, Pointer Dwarf_CiePtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * fde<br>
	 * Original signature : <code>int dwarf_get_cie_of_fde(Dwarf_Fde, Dwarf_Cie*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3021</i>
	 */
	int dwarf_get_cie_of_fde(LibdwarfLibrary.Dwarf_Fde Dwarf_Fde1, PointerByReference Dwarf_CiePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * fde<br>
	 * Original signature : <code>int dwarf_get_cie_of_fde(Dwarf_Fde, Dwarf_Cie*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3021</i>
	 */
	int dwarf_get_cie_of_fde(Pointer Dwarf_Fde1, PointerByReference Dwarf_CiePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * cie<br>
	 * Original signature : <code>int dwarf_get_cie_info_b(Dwarf_Cie, Dwarf_Unsigned*, Dwarf_Small*, char**, Dwarf_Unsigned*, Dwarf_Signed*, Dwarf_Half*, Dwarf_Ptr*, Dwarf_Unsigned*, Dwarf_Half*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3025</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_cie_info_b(libdwarf.LibdwarfLibrary.Dwarf_Cie, java.nio.LongBuffer, java.nio.ByteBuffer, com.sun.jna.ptr.PointerByReference, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.ShortBuffer, com.sun.jna.ptr.PointerByReference, java.nio.LongBuffer, java.nio.ShortBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_cie_info_b(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.ShortByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.ShortByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_cie_info_b(Pointer Dwarf_Cie1, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_SmallPtr1, PointerByReference charPtrPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_SignedPtr1, ShortByReference Dwarf_HalfPtr1, PointerByReference Dwarf_PtrPtr1, LongByReference Dwarf_UnsignedPtr3, ShortByReference Dwarf_HalfPtr2, Pointer Dwarf_ErrorPtr1);
	/**
	 * cie<br>
	 * Original signature : <code>int dwarf_get_cie_info_b(Dwarf_Cie, Dwarf_Unsigned*, Dwarf_Small*, char**, Dwarf_Unsigned*, Dwarf_Signed*, Dwarf_Half*, Dwarf_Ptr*, Dwarf_Unsigned*, Dwarf_Half*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3025</i>
	 */
	int dwarf_get_cie_info_b(LibdwarfLibrary.Dwarf_Cie Dwarf_Cie1, LongBuffer Dwarf_UnsignedPtr1, ByteBuffer Dwarf_SmallPtr1, PointerByReference charPtrPtr1, LongBuffer Dwarf_UnsignedPtr2, LongBuffer Dwarf_SignedPtr1, ShortBuffer Dwarf_HalfPtr1, PointerByReference Dwarf_PtrPtr1, LongBuffer Dwarf_UnsignedPtr3, ShortBuffer Dwarf_HalfPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * cie<br>
	 * Original signature : <code>int dwarf_get_cie_info_b(Dwarf_Cie, Dwarf_Unsigned*, Dwarf_Small*, char**, Dwarf_Unsigned*, Dwarf_Signed*, Dwarf_Half*, Dwarf_Ptr*, Dwarf_Unsigned*, Dwarf_Half*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3025</i>
	 */
	int dwarf_get_cie_info_b(Pointer Dwarf_Cie1, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_SmallPtr1, PointerByReference charPtrPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_SignedPtr1, ShortByReference Dwarf_HalfPtr1, PointerByReference Dwarf_PtrPtr1, LongByReference Dwarf_UnsignedPtr3, ShortByReference Dwarf_HalfPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * cie<br>
	 * Original signature : <code>int dwarf_get_cie_info(Dwarf_Cie, Dwarf_Unsigned*, Dwarf_Small*, char**, Dwarf_Unsigned*, Dwarf_Signed*, Dwarf_Half*, Dwarf_Ptr*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3036</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_cie_info(libdwarf.LibdwarfLibrary.Dwarf_Cie, java.nio.LongBuffer, java.nio.ByteBuffer, com.sun.jna.ptr.PointerByReference, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.ShortBuffer, com.sun.jna.ptr.PointerByReference, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_cie_info(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.ShortByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_cie_info(Pointer Dwarf_Cie1, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_SmallPtr1, PointerByReference charPtrPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_SignedPtr1, ShortByReference Dwarf_HalfPtr1, PointerByReference Dwarf_PtrPtr1, LongByReference Dwarf_UnsignedPtr3, Pointer Dwarf_ErrorPtr1);
	/**
	 * cie<br>
	 * Original signature : <code>int dwarf_get_cie_info(Dwarf_Cie, Dwarf_Unsigned*, Dwarf_Small*, char**, Dwarf_Unsigned*, Dwarf_Signed*, Dwarf_Half*, Dwarf_Ptr*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3036</i>
	 */
	int dwarf_get_cie_info(LibdwarfLibrary.Dwarf_Cie Dwarf_Cie1, LongBuffer Dwarf_UnsignedPtr1, ByteBuffer Dwarf_SmallPtr1, PointerByReference charPtrPtr1, LongBuffer Dwarf_UnsignedPtr2, LongBuffer Dwarf_SignedPtr1, ShortBuffer Dwarf_HalfPtr1, PointerByReference Dwarf_PtrPtr1, LongBuffer Dwarf_UnsignedPtr3, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * cie<br>
	 * Original signature : <code>int dwarf_get_cie_info(Dwarf_Cie, Dwarf_Unsigned*, Dwarf_Small*, char**, Dwarf_Unsigned*, Dwarf_Signed*, Dwarf_Half*, Dwarf_Ptr*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3036</i>
	 */
	int dwarf_get_cie_info(Pointer Dwarf_Cie1, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_SmallPtr1, PointerByReference charPtrPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_SignedPtr1, ShortByReference Dwarf_HalfPtr1, PointerByReference Dwarf_PtrPtr1, LongByReference Dwarf_UnsignedPtr3, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dwarf_get_cie_index new September 2009.<br>
	 * Original signature : <code>int dwarf_get_cie_index(Dwarf_Cie, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3048</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_cie_index(libdwarf.LibdwarfLibrary.Dwarf_Cie, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_cie_index(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_cie_index(Pointer Dwarf_Cie1, LongByReference Dwarf_SignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * dwarf_get_cie_index new September 2009.<br>
	 * Original signature : <code>int dwarf_get_cie_index(Dwarf_Cie, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3048</i>
	 */
	int dwarf_get_cie_index(LibdwarfLibrary.Dwarf_Cie Dwarf_Cie1, LongBuffer Dwarf_SignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dwarf_get_cie_index new September 2009.<br>
	 * Original signature : <code>int dwarf_get_cie_index(Dwarf_Cie, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3048</i>
	 */
	int dwarf_get_cie_index(Pointer Dwarf_Cie1, LongByReference Dwarf_SignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * fde<br>
	 * Original signature : <code>int dwarf_get_fde_instr_bytes(Dwarf_Fde, Dwarf_Ptr*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * @param Dwarf_PtrPtr1 outlen<br>
	 * <i>native declaration : line 3054</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_fde_instr_bytes(libdwarf.LibdwarfLibrary.Dwarf_Fde, com.sun.jna.ptr.PointerByReference, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_fde_instr_bytes(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_fde_instr_bytes(Pointer Dwarf_Fde1, PointerByReference Dwarf_PtrPtr1, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * fde<br>
	 * Original signature : <code>int dwarf_get_fde_instr_bytes(Dwarf_Fde, Dwarf_Ptr*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * @param Dwarf_PtrPtr1 outlen<br>
	 * <i>native declaration : line 3054</i>
	 */
	int dwarf_get_fde_instr_bytes(LibdwarfLibrary.Dwarf_Fde Dwarf_Fde1, PointerByReference Dwarf_PtrPtr1, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * fde<br>
	 * Original signature : <code>int dwarf_get_fde_instr_bytes(Dwarf_Fde, Dwarf_Ptr*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * @param Dwarf_PtrPtr1 outlen<br>
	 * <i>native declaration : line 3054</i>
	 */
	int dwarf_get_fde_instr_bytes(Pointer Dwarf_Fde1, PointerByReference Dwarf_PtrPtr1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * fde<br>
	 * Original signature : <code>int dwarf_get_fde_info_for_all_regs(Dwarf_Fde, Dwarf_Addr, Dwarf_Regtable*, Dwarf_Addr*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3058</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_fde_info_for_all_regs(libdwarf.LibdwarfLibrary.Dwarf_Fde, long, libdwarf.Dwarf_Regtable_s, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_fde_info_for_all_regs(com.sun.jna.Pointer, long, libdwarf.Dwarf_Regtable_s, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_fde_info_for_all_regs(Pointer Dwarf_Fde1, long Dwarf_Addr1, Dwarf_Regtable_s Dwarf_RegtablePtr1, LongByReference Dwarf_AddrPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * fde<br>
	 * Original signature : <code>int dwarf_get_fde_info_for_all_regs(Dwarf_Fde, Dwarf_Addr, Dwarf_Regtable*, Dwarf_Addr*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3058</i>
	 */
	int dwarf_get_fde_info_for_all_regs(LibdwarfLibrary.Dwarf_Fde Dwarf_Fde1, long Dwarf_Addr1, Dwarf_Regtable_s Dwarf_RegtablePtr1, LongBuffer Dwarf_AddrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * fde<br>
	 * Original signature : <code>int dwarf_get_fde_info_for_all_regs(Dwarf_Fde, Dwarf_Addr, Dwarf_Regtable*, Dwarf_Addr*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3058</i>
	 */
	int dwarf_get_fde_info_for_all_regs(Pointer Dwarf_Fde1, long Dwarf_Addr1, Dwarf_Regtable_s Dwarf_RegtablePtr1, LongByReference Dwarf_AddrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * fde<br>
	 * Original signature : <code>int dwarf_get_fde_info_for_all_regs3(Dwarf_Fde, Dwarf_Addr, Dwarf_Regtable3*, Dwarf_Addr*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3064</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_fde_info_for_all_regs3(libdwarf.LibdwarfLibrary.Dwarf_Fde, long, libdwarf.Dwarf_Regtable3_s, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_fde_info_for_all_regs3(com.sun.jna.Pointer, long, libdwarf.Dwarf_Regtable3_s, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_fde_info_for_all_regs3(Pointer Dwarf_Fde1, long Dwarf_Addr1, Dwarf_Regtable3_s Dwarf_Regtable3Ptr1, LongByReference Dwarf_AddrPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * fde<br>
	 * Original signature : <code>int dwarf_get_fde_info_for_all_regs3(Dwarf_Fde, Dwarf_Addr, Dwarf_Regtable3*, Dwarf_Addr*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3064</i>
	 */
	int dwarf_get_fde_info_for_all_regs3(LibdwarfLibrary.Dwarf_Fde Dwarf_Fde1, long Dwarf_Addr1, Dwarf_Regtable3_s Dwarf_Regtable3Ptr1, LongBuffer Dwarf_AddrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * fde<br>
	 * Original signature : <code>int dwarf_get_fde_info_for_all_regs3(Dwarf_Fde, Dwarf_Addr, Dwarf_Regtable3*, Dwarf_Addr*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3064</i>
	 */
	int dwarf_get_fde_info_for_all_regs3(Pointer Dwarf_Fde1, long Dwarf_Addr1, Dwarf_Regtable3_s Dwarf_Regtable3Ptr1, LongByReference Dwarf_AddrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * In this older interface DW_FRAME_CFA_COL is a meaningful<br>
	 * column (which does not work well with DWARF3 or<br>
	 * non-MIPS architectures).<br>
	 * fde<br>
	 * Original signature : <code>int dwarf_get_fde_info_for_reg(Dwarf_Fde, Dwarf_Half, Dwarf_Addr, Dwarf_Signed*, Dwarf_Signed*, Dwarf_Signed*, Dwarf_Addr*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3073</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_fde_info_for_reg(libdwarf.LibdwarfLibrary.Dwarf_Fde, short, long, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_fde_info_for_reg(com.sun.jna.Pointer, short, long, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_fde_info_for_reg(Pointer Dwarf_Fde1, short Dwarf_Half1, long Dwarf_Addr1, LongByReference Dwarf_SignedPtr1, LongByReference Dwarf_SignedPtr2, LongByReference Dwarf_SignedPtr3, LongByReference Dwarf_AddrPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * In this older interface DW_FRAME_CFA_COL is a meaningful<br>
	 * column (which does not work well with DWARF3 or<br>
	 * non-MIPS architectures).<br>
	 * fde<br>
	 * Original signature : <code>int dwarf_get_fde_info_for_reg(Dwarf_Fde, Dwarf_Half, Dwarf_Addr, Dwarf_Signed*, Dwarf_Signed*, Dwarf_Signed*, Dwarf_Addr*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3073</i>
	 */
	int dwarf_get_fde_info_for_reg(LibdwarfLibrary.Dwarf_Fde Dwarf_Fde1, short Dwarf_Half1, long Dwarf_Addr1, LongBuffer Dwarf_SignedPtr1, LongBuffer Dwarf_SignedPtr2, LongBuffer Dwarf_SignedPtr3, LongBuffer Dwarf_AddrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * In this older interface DW_FRAME_CFA_COL is a meaningful<br>
	 * column (which does not work well with DWARF3 or<br>
	 * non-MIPS architectures).<br>
	 * fde<br>
	 * Original signature : <code>int dwarf_get_fde_info_for_reg(Dwarf_Fde, Dwarf_Half, Dwarf_Addr, Dwarf_Signed*, Dwarf_Signed*, Dwarf_Signed*, Dwarf_Addr*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3073</i>
	 */
	int dwarf_get_fde_info_for_reg(Pointer Dwarf_Fde1, short Dwarf_Half1, long Dwarf_Addr1, LongByReference Dwarf_SignedPtr1, LongByReference Dwarf_SignedPtr2, LongByReference Dwarf_SignedPtr3, LongByReference Dwarf_AddrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dwarf_get_fde_info_for_reg3 is useful on a single column, but<br>
	 * it is inefficient to iterate across all table_columns using this<br>
	 * function.  Instead call dwarf_get_fde_info_for_all_regs3() and index<br>
	 * into the table it fills in.<br>
	 * fde<br>
	 * Original signature : <code>int dwarf_get_fde_info_for_reg3(Dwarf_Fde, Dwarf_Half, Dwarf_Addr, Dwarf_Small*, Dwarf_Signed*, Dwarf_Signed*, Dwarf_Signed*, Dwarf_Ptr*, Dwarf_Addr*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3090</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_fde_info_for_reg3(libdwarf.LibdwarfLibrary.Dwarf_Fde, short, long, java.nio.ByteBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_fde_info_for_reg3(com.sun.jna.Pointer, short, long, com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_fde_info_for_reg3(Pointer Dwarf_Fde1, short Dwarf_Half1, long Dwarf_Addr1, Pointer Dwarf_SmallPtr1, LongByReference Dwarf_SignedPtr1, LongByReference Dwarf_SignedPtr2, LongByReference Dwarf_SignedPtr3, PointerByReference Dwarf_PtrPtr1, LongByReference Dwarf_AddrPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * dwarf_get_fde_info_for_reg3 is useful on a single column, but<br>
	 * it is inefficient to iterate across all table_columns using this<br>
	 * function.  Instead call dwarf_get_fde_info_for_all_regs3() and index<br>
	 * into the table it fills in.<br>
	 * fde<br>
	 * Original signature : <code>int dwarf_get_fde_info_for_reg3(Dwarf_Fde, Dwarf_Half, Dwarf_Addr, Dwarf_Small*, Dwarf_Signed*, Dwarf_Signed*, Dwarf_Signed*, Dwarf_Ptr*, Dwarf_Addr*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3090</i>
	 */
	int dwarf_get_fde_info_for_reg3(LibdwarfLibrary.Dwarf_Fde Dwarf_Fde1, short Dwarf_Half1, long Dwarf_Addr1, ByteBuffer Dwarf_SmallPtr1, LongBuffer Dwarf_SignedPtr1, LongBuffer Dwarf_SignedPtr2, LongBuffer Dwarf_SignedPtr3, PointerByReference Dwarf_PtrPtr1, LongBuffer Dwarf_AddrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dwarf_get_fde_info_for_reg3 is useful on a single column, but<br>
	 * it is inefficient to iterate across all table_columns using this<br>
	 * function.  Instead call dwarf_get_fde_info_for_all_regs3() and index<br>
	 * into the table it fills in.<br>
	 * fde<br>
	 * Original signature : <code>int dwarf_get_fde_info_for_reg3(Dwarf_Fde, Dwarf_Half, Dwarf_Addr, Dwarf_Small*, Dwarf_Signed*, Dwarf_Signed*, Dwarf_Signed*, Dwarf_Ptr*, Dwarf_Addr*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3090</i>
	 */
	int dwarf_get_fde_info_for_reg3(Pointer Dwarf_Fde1, short Dwarf_Half1, long Dwarf_Addr1, Pointer Dwarf_SmallPtr1, LongByReference Dwarf_SignedPtr1, LongByReference Dwarf_SignedPtr2, LongByReference Dwarf_SignedPtr3, PointerByReference Dwarf_PtrPtr1, LongByReference Dwarf_AddrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * fde<br>
	 * Original signature : <code>int dwarf_get_fde_info_for_reg3_b(Dwarf_Fde, Dwarf_Half, Dwarf_Addr, Dwarf_Small*, Dwarf_Signed*, Dwarf_Signed*, Dwarf_Signed*, Dwarf_Ptr*, Dwarf_Addr*, Dwarf_Bool*, Dwarf_Addr*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3101</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_fde_info_for_reg3_b(libdwarf.LibdwarfLibrary.Dwarf_Fde, short, long, java.nio.ByteBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference, java.nio.LongBuffer, java.nio.IntBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_fde_info_for_reg3_b(com.sun.jna.Pointer, short, long, com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_fde_info_for_reg3_b(Pointer Dwarf_Fde1, short Dwarf_Half1, long Dwarf_Addr1, Pointer Dwarf_SmallPtr1, LongByReference Dwarf_SignedPtr1, LongByReference Dwarf_SignedPtr2, LongByReference Dwarf_SignedPtr3, PointerByReference Dwarf_PtrPtr1, LongByReference Dwarf_AddrPtr1, IntByReference Dwarf_BoolPtr1, LongByReference Dwarf_AddrPtr2, Pointer Dwarf_ErrorPtr1);
	/**
	 * fde<br>
	 * Original signature : <code>int dwarf_get_fde_info_for_reg3_b(Dwarf_Fde, Dwarf_Half, Dwarf_Addr, Dwarf_Small*, Dwarf_Signed*, Dwarf_Signed*, Dwarf_Signed*, Dwarf_Ptr*, Dwarf_Addr*, Dwarf_Bool*, Dwarf_Addr*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3101</i>
	 */
	int dwarf_get_fde_info_for_reg3_b(LibdwarfLibrary.Dwarf_Fde Dwarf_Fde1, short Dwarf_Half1, long Dwarf_Addr1, ByteBuffer Dwarf_SmallPtr1, LongBuffer Dwarf_SignedPtr1, LongBuffer Dwarf_SignedPtr2, LongBuffer Dwarf_SignedPtr3, PointerByReference Dwarf_PtrPtr1, LongBuffer Dwarf_AddrPtr1, IntBuffer Dwarf_BoolPtr1, LongBuffer Dwarf_AddrPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * fde<br>
	 * Original signature : <code>int dwarf_get_fde_info_for_reg3_b(Dwarf_Fde, Dwarf_Half, Dwarf_Addr, Dwarf_Small*, Dwarf_Signed*, Dwarf_Signed*, Dwarf_Signed*, Dwarf_Ptr*, Dwarf_Addr*, Dwarf_Bool*, Dwarf_Addr*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3101</i>
	 */
	int dwarf_get_fde_info_for_reg3_b(Pointer Dwarf_Fde1, short Dwarf_Half1, long Dwarf_Addr1, Pointer Dwarf_SmallPtr1, LongByReference Dwarf_SignedPtr1, LongByReference Dwarf_SignedPtr2, LongByReference Dwarf_SignedPtr3, PointerByReference Dwarf_PtrPtr1, LongByReference Dwarf_AddrPtr1, IntByReference Dwarf_BoolPtr1, LongByReference Dwarf_AddrPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Use this or the next function to get the cfa.<br>
	 * New function, June 11, 2016<br>
	 * fde<br>
	 * Original signature : <code>int dwarf_get_fde_info_for_cfa_reg3_b(Dwarf_Fde, Dwarf_Addr, Dwarf_Small*, Dwarf_Signed*, Dwarf_Signed*, Dwarf_Signed*, Dwarf_Ptr*, Dwarf_Addr*, Dwarf_Bool*, Dwarf_Addr*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3116</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_fde_info_for_cfa_reg3_b(libdwarf.LibdwarfLibrary.Dwarf_Fde, long, java.nio.ByteBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference, java.nio.LongBuffer, java.nio.IntBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_fde_info_for_cfa_reg3_b(com.sun.jna.Pointer, long, com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_fde_info_for_cfa_reg3_b(Pointer Dwarf_Fde1, long Dwarf_Addr1, Pointer Dwarf_SmallPtr1, LongByReference Dwarf_SignedPtr1, LongByReference Dwarf_SignedPtr2, LongByReference Dwarf_SignedPtr3, PointerByReference Dwarf_PtrPtr1, LongByReference Dwarf_AddrPtr1, IntByReference Dwarf_BoolPtr1, LongByReference Dwarf_AddrPtr2, Pointer Dwarf_ErrorPtr1);
	/**
	 * Use this or the next function to get the cfa.<br>
	 * New function, June 11, 2016<br>
	 * fde<br>
	 * Original signature : <code>int dwarf_get_fde_info_for_cfa_reg3_b(Dwarf_Fde, Dwarf_Addr, Dwarf_Small*, Dwarf_Signed*, Dwarf_Signed*, Dwarf_Signed*, Dwarf_Ptr*, Dwarf_Addr*, Dwarf_Bool*, Dwarf_Addr*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3116</i>
	 */
	int dwarf_get_fde_info_for_cfa_reg3_b(LibdwarfLibrary.Dwarf_Fde Dwarf_Fde1, long Dwarf_Addr1, ByteBuffer Dwarf_SmallPtr1, LongBuffer Dwarf_SignedPtr1, LongBuffer Dwarf_SignedPtr2, LongBuffer Dwarf_SignedPtr3, PointerByReference Dwarf_PtrPtr1, LongBuffer Dwarf_AddrPtr1, IntBuffer Dwarf_BoolPtr1, LongBuffer Dwarf_AddrPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Use this or the next function to get the cfa.<br>
	 * New function, June 11, 2016<br>
	 * fde<br>
	 * Original signature : <code>int dwarf_get_fde_info_for_cfa_reg3_b(Dwarf_Fde, Dwarf_Addr, Dwarf_Small*, Dwarf_Signed*, Dwarf_Signed*, Dwarf_Signed*, Dwarf_Ptr*, Dwarf_Addr*, Dwarf_Bool*, Dwarf_Addr*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3116</i>
	 */
	int dwarf_get_fde_info_for_cfa_reg3_b(Pointer Dwarf_Fde1, long Dwarf_Addr1, Pointer Dwarf_SmallPtr1, LongByReference Dwarf_SignedPtr1, LongByReference Dwarf_SignedPtr2, LongByReference Dwarf_SignedPtr3, PointerByReference Dwarf_PtrPtr1, LongByReference Dwarf_AddrPtr1, IntByReference Dwarf_BoolPtr1, LongByReference Dwarf_AddrPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Use this to get the cfa. Or the above function.<br>
	 * fde<br>
	 * Original signature : <code>int dwarf_get_fde_info_for_cfa_reg3(Dwarf_Fde, Dwarf_Addr, Dwarf_Small*, Dwarf_Signed*, Dwarf_Signed*, Dwarf_Signed*, Dwarf_Ptr*, Dwarf_Addr*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3128</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_fde_info_for_cfa_reg3(libdwarf.LibdwarfLibrary.Dwarf_Fde, long, java.nio.ByteBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_fde_info_for_cfa_reg3(com.sun.jna.Pointer, long, com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_fde_info_for_cfa_reg3(Pointer Dwarf_Fde1, long Dwarf_Addr1, Pointer Dwarf_SmallPtr1, LongByReference Dwarf_SignedPtr1, LongByReference Dwarf_SignedPtr2, LongByReference Dwarf_SignedPtr3, PointerByReference Dwarf_PtrPtr1, LongByReference Dwarf_AddrPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Use this to get the cfa. Or the above function.<br>
	 * fde<br>
	 * Original signature : <code>int dwarf_get_fde_info_for_cfa_reg3(Dwarf_Fde, Dwarf_Addr, Dwarf_Small*, Dwarf_Signed*, Dwarf_Signed*, Dwarf_Signed*, Dwarf_Ptr*, Dwarf_Addr*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3128</i>
	 */
	int dwarf_get_fde_info_for_cfa_reg3(LibdwarfLibrary.Dwarf_Fde Dwarf_Fde1, long Dwarf_Addr1, ByteBuffer Dwarf_SmallPtr1, LongBuffer Dwarf_SignedPtr1, LongBuffer Dwarf_SignedPtr2, LongBuffer Dwarf_SignedPtr3, PointerByReference Dwarf_PtrPtr1, LongBuffer Dwarf_AddrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Use this to get the cfa. Or the above function.<br>
	 * fde<br>
	 * Original signature : <code>int dwarf_get_fde_info_for_cfa_reg3(Dwarf_Fde, Dwarf_Addr, Dwarf_Small*, Dwarf_Signed*, Dwarf_Signed*, Dwarf_Signed*, Dwarf_Ptr*, Dwarf_Addr*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3128</i>
	 */
	int dwarf_get_fde_info_for_cfa_reg3(Pointer Dwarf_Fde1, long Dwarf_Addr1, Pointer Dwarf_SmallPtr1, LongByReference Dwarf_SignedPtr1, LongByReference Dwarf_SignedPtr2, LongByReference Dwarf_SignedPtr3, PointerByReference Dwarf_PtrPtr1, LongByReference Dwarf_AddrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_fde_for_die(Dwarf_Debug, Dwarf_Die, Dwarf_Fde*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3138</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_fde_for_die(libdwarf.LibdwarfLibrary.Dwarf_Debug, libdwarf.LibdwarfLibrary.Dwarf_Die, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_fde_for_die(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_fde_for_die(Pointer Dwarf_Debug1, Pointer Dwarf_Die1, Pointer Dwarf_FdePtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_fde_for_die(Dwarf_Debug, Dwarf_Die, Dwarf_Fde*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3138</i>
	 */
	int dwarf_get_fde_for_die(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, LibdwarfLibrary.Dwarf_Die Dwarf_Die1, PointerByReference Dwarf_FdePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_fde_for_die(Dwarf_Debug, Dwarf_Die, Dwarf_Fde*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3138</i>
	 */
	int dwarf_get_fde_for_die(Pointer Dwarf_Debug1, Pointer Dwarf_Die1, PointerByReference Dwarf_FdePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * fde_data<br>
	 * Original signature : <code>int dwarf_get_fde_n(Dwarf_Fde*, Dwarf_Unsigned, Dwarf_Fde*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3143</i><br>
	 * @deprecated use the safer method {@link #dwarf_get_fde_n(com.sun.jna.ptr.PointerByReference, long, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_fde_n(Pointer Dwarf_FdePtr1, long Dwarf_Unsigned1, Pointer Dwarf_FdePtr2, Pointer Dwarf_ErrorPtr1);
	/**
	 * fde_data<br>
	 * Original signature : <code>int dwarf_get_fde_n(Dwarf_Fde*, Dwarf_Unsigned, Dwarf_Fde*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3143</i>
	 */
	int dwarf_get_fde_n(PointerByReference Dwarf_FdePtr1, long Dwarf_Unsigned1, PointerByReference Dwarf_FdePtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * fde_data<br>
	 * Original signature : <code>int dwarf_get_fde_at_pc(Dwarf_Fde*, Dwarf_Addr, Dwarf_Fde*, Dwarf_Addr*, Dwarf_Addr*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3148</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_fde_at_pc(com.sun.jna.ptr.PointerByReference, long, com.sun.jna.ptr.PointerByReference, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_fde_at_pc(com.sun.jna.ptr.PointerByReference, long, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_fde_at_pc(Pointer Dwarf_FdePtr1, long Dwarf_Addr1, Pointer Dwarf_FdePtr2, LongByReference Dwarf_AddrPtr1, LongByReference Dwarf_AddrPtr2, Pointer Dwarf_ErrorPtr1);
	/**
	 * fde_data<br>
	 * Original signature : <code>int dwarf_get_fde_at_pc(Dwarf_Fde*, Dwarf_Addr, Dwarf_Fde*, Dwarf_Addr*, Dwarf_Addr*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3148</i>
	 */
	int dwarf_get_fde_at_pc(PointerByReference Dwarf_FdePtr1, long Dwarf_Addr1, PointerByReference Dwarf_FdePtr2, LongBuffer Dwarf_AddrPtr1, LongBuffer Dwarf_AddrPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * fde_data<br>
	 * Original signature : <code>int dwarf_get_fde_at_pc(Dwarf_Fde*, Dwarf_Addr, Dwarf_Fde*, Dwarf_Addr*, Dwarf_Addr*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3148</i>
	 */
	int dwarf_get_fde_at_pc(PointerByReference Dwarf_FdePtr1, long Dwarf_Addr1, PointerByReference Dwarf_FdePtr2, LongByReference Dwarf_AddrPtr1, LongByReference Dwarf_AddrPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * GNU .eh_frame augmentation information, raw form, see<br>
	 * Linux Standard Base Core Specification version 3.0 .<br>
	 * cie<br>
	 * Original signature : <code>int dwarf_get_cie_augmentation_data(Dwarf_Cie, Dwarf_Small**, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3157</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_cie_augmentation_data(libdwarf.LibdwarfLibrary.Dwarf_Cie, com.sun.jna.ptr.PointerByReference, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_cie_augmentation_data(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_cie_augmentation_data(Pointer Dwarf_Cie1, PointerByReference Dwarf_SmallPtrPtr1, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * GNU .eh_frame augmentation information, raw form, see<br>
	 * Linux Standard Base Core Specification version 3.0 .<br>
	 * cie<br>
	 * Original signature : <code>int dwarf_get_cie_augmentation_data(Dwarf_Cie, Dwarf_Small**, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3157</i>
	 */
	int dwarf_get_cie_augmentation_data(LibdwarfLibrary.Dwarf_Cie Dwarf_Cie1, PointerByReference Dwarf_SmallPtrPtr1, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * GNU .eh_frame augmentation information, raw form, see<br>
	 * Linux Standard Base Core Specification version 3.0 .<br>
	 * cie<br>
	 * Original signature : <code>int dwarf_get_cie_augmentation_data(Dwarf_Cie, Dwarf_Small**, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3157</i>
	 */
	int dwarf_get_cie_augmentation_data(Pointer Dwarf_Cie1, PointerByReference Dwarf_SmallPtrPtr1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * GNU .eh_frame augmentation information, raw form, see<br>
	 * Linux Standard Base Core Specification version 3.0 .<br>
	 * fde<br>
	 * Original signature : <code>int dwarf_get_fde_augmentation_data(Dwarf_Fde, Dwarf_Small**, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3163</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_fde_augmentation_data(libdwarf.LibdwarfLibrary.Dwarf_Fde, com.sun.jna.ptr.PointerByReference, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_fde_augmentation_data(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_fde_augmentation_data(Pointer Dwarf_Fde1, PointerByReference Dwarf_SmallPtrPtr1, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * GNU .eh_frame augmentation information, raw form, see<br>
	 * Linux Standard Base Core Specification version 3.0 .<br>
	 * fde<br>
	 * Original signature : <code>int dwarf_get_fde_augmentation_data(Dwarf_Fde, Dwarf_Small**, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3163</i>
	 */
	int dwarf_get_fde_augmentation_data(LibdwarfLibrary.Dwarf_Fde Dwarf_Fde1, PointerByReference Dwarf_SmallPtrPtr1, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * GNU .eh_frame augmentation information, raw form, see<br>
	 * Linux Standard Base Core Specification version 3.0 .<br>
	 * fde<br>
	 * Original signature : <code>int dwarf_get_fde_augmentation_data(Dwarf_Fde, Dwarf_Small**, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3163</i>
	 */
	int dwarf_get_fde_augmentation_data(Pointer Dwarf_Fde1, PointerByReference Dwarf_SmallPtrPtr1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * cie<br>
	 * Original signature : <code>int dwarf_expand_frame_instructions(Dwarf_Cie, Dwarf_Ptr, Dwarf_Unsigned, Dwarf_Frame_Op**, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3168</i><br>
	 * @deprecated use the safer methods {@link #dwarf_expand_frame_instructions(libdwarf.LibdwarfLibrary.Dwarf_Cie, com.sun.jna.Pointer, long, libdwarf.Dwarf_Frame_Op.ByReference[], java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_expand_frame_instructions(com.sun.jna.Pointer, com.sun.jna.Pointer, long, libdwarf.Dwarf_Frame_Op.ByReference[], com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_expand_frame_instructions(Pointer Dwarf_Cie1, Pointer Dwarf_Ptr1, long Dwarf_Unsigned1, PointerByReference Dwarf_Frame_OpPtrPtr1, LongByReference Dwarf_SignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * cie<br>
	 * Original signature : <code>int dwarf_expand_frame_instructions(Dwarf_Cie, Dwarf_Ptr, Dwarf_Unsigned, Dwarf_Frame_Op**, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3168</i>
	 */
	int dwarf_expand_frame_instructions(LibdwarfLibrary.Dwarf_Cie Dwarf_Cie1, Pointer Dwarf_Ptr1, long Dwarf_Unsigned1, libdwarf.Dwarf_Frame_Op.ByReference Dwarf_Frame_OpPtrPtr1[], LongBuffer Dwarf_SignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * cie<br>
	 * Original signature : <code>int dwarf_expand_frame_instructions(Dwarf_Cie, Dwarf_Ptr, Dwarf_Unsigned, Dwarf_Frame_Op**, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3168</i>
	 */
	int dwarf_expand_frame_instructions(Pointer Dwarf_Cie1, Pointer Dwarf_Ptr1, long Dwarf_Unsigned1, libdwarf.Dwarf_Frame_Op.ByReference Dwarf_Frame_OpPtrPtr1[], LongByReference Dwarf_SignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Operations on .debug_aranges.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_aranges(Dwarf_Debug, Dwarf_Arange**, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3176</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_aranges(libdwarf.LibdwarfLibrary.Dwarf_Debug, com.sun.jna.ptr.PointerByReference, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_aranges(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_aranges(Pointer Dwarf_Debug1, PointerByReference Dwarf_ArangePtrPtr1, LongByReference Dwarf_SignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Operations on .debug_aranges.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_aranges(Dwarf_Debug, Dwarf_Arange**, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3176</i>
	 */
	int dwarf_get_aranges(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, PointerByReference Dwarf_ArangePtrPtr1, LongBuffer Dwarf_SignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Operations on .debug_aranges.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_aranges(Dwarf_Debug, Dwarf_Arange**, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3176</i>
	 */
	int dwarf_get_aranges(Pointer Dwarf_Debug1, PointerByReference Dwarf_ArangePtrPtr1, LongByReference Dwarf_SignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_ranges_section_name(Dwarf_Debug, const char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3181</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_ranges_section_name(libdwarf.LibdwarfLibrary.Dwarf_Debug, java.lang.String[], com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_ranges_section_name(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_ranges_section_name(Pointer Dwarf_Debug1, PointerByReference charPtrPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_ranges_section_name(Dwarf_Debug, const char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3181</i>
	 */
	int dwarf_get_ranges_section_name(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, String charPtrPtr1[], PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_ranges_section_name(Dwarf_Debug, const char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3181</i>
	 */
	int dwarf_get_ranges_section_name(Pointer Dwarf_Debug1, PointerByReference charPtrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_aranges_section_name(Dwarf_Debug, const char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3185</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_aranges_section_name(libdwarf.LibdwarfLibrary.Dwarf_Debug, java.lang.String[], com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_aranges_section_name(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_aranges_section_name(Pointer Dwarf_Debug1, PointerByReference charPtrPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_aranges_section_name(Dwarf_Debug, const char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3185</i>
	 */
	int dwarf_get_aranges_section_name(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, String charPtrPtr1[], PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_aranges_section_name(Dwarf_Debug, const char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3185</i>
	 */
	int dwarf_get_aranges_section_name(Pointer Dwarf_Debug1, PointerByReference charPtrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>int dwarf_get_arange(Dwarf_Arange*, Dwarf_Unsigned, Dwarf_Addr, Dwarf_Arange*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3191</i><br>
	 * @deprecated use the safer method {@link #dwarf_get_arange(com.sun.jna.ptr.PointerByReference, long, long, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_arange(Pointer Dwarf_ArangePtr1, long Dwarf_Unsigned1, long Dwarf_Addr1, Pointer Dwarf_ArangePtr2, Pointer Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>int dwarf_get_arange(Dwarf_Arange*, Dwarf_Unsigned, Dwarf_Addr, Dwarf_Arange*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3191</i>
	 */
	int dwarf_get_arange(PointerByReference Dwarf_ArangePtr1, long Dwarf_Unsigned1, long Dwarf_Addr1, PointerByReference Dwarf_ArangePtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>int dwarf_get_cu_die_offset(Dwarf_Arange, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3198</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_cu_die_offset(libdwarf.LibdwarfLibrary.Dwarf_Arange, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_cu_die_offset(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_cu_die_offset(Pointer Dwarf_Arange1, LongByReference Dwarf_OffPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>int dwarf_get_cu_die_offset(Dwarf_Arange, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3198</i>
	 */
	int dwarf_get_cu_die_offset(LibdwarfLibrary.Dwarf_Arange Dwarf_Arange1, LongBuffer Dwarf_OffPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>int dwarf_get_cu_die_offset(Dwarf_Arange, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3198</i>
	 */
	int dwarf_get_cu_die_offset(Pointer Dwarf_Arange1, LongByReference Dwarf_OffPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>int dwarf_get_arange_cu_header_offset(Dwarf_Arange, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3203</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_arange_cu_header_offset(libdwarf.LibdwarfLibrary.Dwarf_Arange, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_arange_cu_header_offset(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_arange_cu_header_offset(Pointer Dwarf_Arange1, LongByReference Dwarf_OffPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>int dwarf_get_arange_cu_header_offset(Dwarf_Arange, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3203</i>
	 */
	int dwarf_get_arange_cu_header_offset(LibdwarfLibrary.Dwarf_Arange Dwarf_Arange1, LongBuffer Dwarf_OffPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>int dwarf_get_arange_cu_header_offset(Dwarf_Arange, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3203</i>
	 */
	int dwarf_get_arange_cu_header_offset(Pointer Dwarf_Arange1, LongByReference Dwarf_OffPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * DWARF2,3 interface. No longer really adequate (it was never<br>
	 * right for segmented address spaces, please switch<br>
	 * to using dwarf_get_arange_info_b instead.<br>
	 * There is no effective difference between these<br>
	 * functions  if the address space<br>
	 * of the target is not segmented.<br>
	 * Original signature : <code>int dwarf_get_arange_info(Dwarf_Arange, Dwarf_Addr*, Dwarf_Unsigned*, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3217</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_arange_info(libdwarf.LibdwarfLibrary.Dwarf_Arange, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_arange_info(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_arange_info(Pointer Dwarf_Arange1, LongByReference Dwarf_AddrPtr1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_OffPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * DWARF2,3 interface. No longer really adequate (it was never<br>
	 * right for segmented address spaces, please switch<br>
	 * to using dwarf_get_arange_info_b instead.<br>
	 * There is no effective difference between these<br>
	 * functions  if the address space<br>
	 * of the target is not segmented.<br>
	 * Original signature : <code>int dwarf_get_arange_info(Dwarf_Arange, Dwarf_Addr*, Dwarf_Unsigned*, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3217</i>
	 */
	int dwarf_get_arange_info(LibdwarfLibrary.Dwarf_Arange Dwarf_Arange1, LongBuffer Dwarf_AddrPtr1, LongBuffer Dwarf_UnsignedPtr1, LongBuffer Dwarf_OffPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * DWARF2,3 interface. No longer really adequate (it was never<br>
	 * right for segmented address spaces, please switch<br>
	 * to using dwarf_get_arange_info_b instead.<br>
	 * There is no effective difference between these<br>
	 * functions  if the address space<br>
	 * of the target is not segmented.<br>
	 * Original signature : <code>int dwarf_get_arange_info(Dwarf_Arange, Dwarf_Addr*, Dwarf_Unsigned*, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3217</i>
	 */
	int dwarf_get_arange_info(Pointer Dwarf_Arange1, LongByReference Dwarf_AddrPtr1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_OffPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New for DWARF4, entries may have segment information.<br>
	 * segment is only meaningful if *segment_entry_size is non-zero.<br>
	 * Original signature : <code>int dwarf_get_arange_info_b(Dwarf_Arange, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Addr*, Dwarf_Unsigned*, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3226</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_arange_info_b(libdwarf.LibdwarfLibrary.Dwarf_Arange, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_arange_info_b(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_arange_info_b(Pointer Dwarf_Arange1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_AddrPtr1, LongByReference Dwarf_UnsignedPtr3, LongByReference Dwarf_OffPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * New for DWARF4, entries may have segment information.<br>
	 * segment is only meaningful if *segment_entry_size is non-zero.<br>
	 * Original signature : <code>int dwarf_get_arange_info_b(Dwarf_Arange, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Addr*, Dwarf_Unsigned*, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3226</i>
	 */
	int dwarf_get_arange_info_b(LibdwarfLibrary.Dwarf_Arange Dwarf_Arange1, LongBuffer Dwarf_UnsignedPtr1, LongBuffer Dwarf_UnsignedPtr2, LongBuffer Dwarf_AddrPtr1, LongBuffer Dwarf_UnsignedPtr3, LongBuffer Dwarf_OffPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New for DWARF4, entries may have segment information.<br>
	 * segment is only meaningful if *segment_entry_size is non-zero.<br>
	 * Original signature : <code>int dwarf_get_arange_info_b(Dwarf_Arange, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Addr*, Dwarf_Unsigned*, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3226</i>
	 */
	int dwarf_get_arange_info_b(Pointer Dwarf_Arange1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_AddrPtr1, LongByReference Dwarf_UnsignedPtr3, LongByReference Dwarf_OffPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * BEGIN: DWARF5 .debug_macro  interfaces<br>
	 * NEW November 2015.<br>
	 * die<br>
	 * Original signature : <code>int dwarf_get_macro_context(Dwarf_Die, Dwarf_Unsigned*, Dwarf_Macro_Context*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3237</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_macro_context(libdwarf.LibdwarfLibrary.Dwarf_Die, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_macro_context(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_macro_context(Pointer Dwarf_Die1, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_Macro_ContextPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, LongByReference Dwarf_UnsignedPtr4, Pointer Dwarf_ErrorPtr1);
	/**
	 * BEGIN: DWARF5 .debug_macro  interfaces<br>
	 * NEW November 2015.<br>
	 * die<br>
	 * Original signature : <code>int dwarf_get_macro_context(Dwarf_Die, Dwarf_Unsigned*, Dwarf_Macro_Context*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3237</i>
	 */
	int dwarf_get_macro_context(LibdwarfLibrary.Dwarf_Die Dwarf_Die1, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_Macro_ContextPtr1, LongBuffer Dwarf_UnsignedPtr2, LongBuffer Dwarf_UnsignedPtr3, LongBuffer Dwarf_UnsignedPtr4, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * BEGIN: DWARF5 .debug_macro  interfaces<br>
	 * NEW November 2015.<br>
	 * die<br>
	 * Original signature : <code>int dwarf_get_macro_context(Dwarf_Die, Dwarf_Unsigned*, Dwarf_Macro_Context*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3237</i>
	 */
	int dwarf_get_macro_context(Pointer Dwarf_Die1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_Macro_ContextPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, LongByReference Dwarf_UnsignedPtr4, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Just like dwarf_get_macro_context, but instead of using<br>
	 * DW_AT_macros or DW_AT_GNU_macros to get the offset we just<br>
	 * take the offset given.<br>
	 * die<br>
	 * Original signature : <code>int dwarf_get_macro_context_by_offset(Dwarf_Die, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Macro_Context*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3248</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_macro_context_by_offset(libdwarf.LibdwarfLibrary.Dwarf_Die, long, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_macro_context_by_offset(com.sun.jna.Pointer, long, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_macro_context_by_offset(Pointer Dwarf_Die1, long Dwarf_Unsigned1, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_Macro_ContextPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, Pointer Dwarf_ErrorPtr1);
	/**
	 * Just like dwarf_get_macro_context, but instead of using<br>
	 * DW_AT_macros or DW_AT_GNU_macros to get the offset we just<br>
	 * take the offset given.<br>
	 * die<br>
	 * Original signature : <code>int dwarf_get_macro_context_by_offset(Dwarf_Die, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Macro_Context*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3248</i>
	 */
	int dwarf_get_macro_context_by_offset(LibdwarfLibrary.Dwarf_Die Dwarf_Die1, long Dwarf_Unsigned1, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_Macro_ContextPtr1, LongBuffer Dwarf_UnsignedPtr2, LongBuffer Dwarf_UnsignedPtr3, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Just like dwarf_get_macro_context, but instead of using<br>
	 * DW_AT_macros or DW_AT_GNU_macros to get the offset we just<br>
	 * take the offset given.<br>
	 * die<br>
	 * Original signature : <code>int dwarf_get_macro_context_by_offset(Dwarf_Die, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Macro_Context*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3248</i>
	 */
	int dwarf_get_macro_context_by_offset(Pointer Dwarf_Die1, long Dwarf_Unsigned1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_Macro_ContextPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * mc<br>
	 * Original signature : <code>void dwarf_dealloc_macro_context(Dwarf_Macro_Context)</code><br>
	 * <i>native declaration : line 3256</i><br>
	 * @deprecated use the safer methods {@link #dwarf_dealloc_macro_context(libdwarf.LibdwarfLibrary.Dwarf_Macro_Context)} and {@link #dwarf_dealloc_macro_context(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void dwarf_dealloc_macro_context(Pointer Dwarf_Macro_Context1);
	/**
	 * mc<br>
	 * Original signature : <code>void dwarf_dealloc_macro_context(Dwarf_Macro_Context)</code><br>
	 * <i>native declaration : line 3256</i>
	 */
	void dwarf_dealloc_macro_context(LibdwarfLibrary.Dwarf_Macro_Context Dwarf_Macro_Context1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_macro_section_name(Dwarf_Debug, const char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3257</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_macro_section_name(libdwarf.LibdwarfLibrary.Dwarf_Debug, java.lang.String[], com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_macro_section_name(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_macro_section_name(Pointer Dwarf_Debug1, PointerByReference charPtrPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_macro_section_name(Dwarf_Debug, const char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3257</i>
	 */
	int dwarf_get_macro_section_name(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, String charPtrPtr1[], PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_macro_section_name(Dwarf_Debug, const char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3257</i>
	 */
	int dwarf_get_macro_section_name(Pointer Dwarf_Debug1, PointerByReference charPtrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * head<br>
	 * Original signature : <code>int dwarf_macro_context_head(Dwarf_Macro_Context, Dwarf_Half*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, unsigned int*, Dwarf_Bool*, Dwarf_Unsigned*, Dwarf_Bool*, Dwarf_Bool*, Dwarf_Half*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3261</i><br>
	 * @deprecated use the safer methods {@link #dwarf_macro_context_head(libdwarf.LibdwarfLibrary.Dwarf_Macro_Context, java.nio.ShortBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.LongBuffer, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.ShortBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_macro_context_head(com.sun.jna.Pointer, com.sun.jna.ptr.ShortByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.ShortByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_macro_context_head(Pointer Dwarf_Macro_Context1, ShortByReference Dwarf_HalfPtr1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, IntByReference intPtr1, IntByReference Dwarf_BoolPtr1, LongByReference Dwarf_UnsignedPtr4, IntByReference Dwarf_BoolPtr2, IntByReference Dwarf_BoolPtr3, ShortByReference Dwarf_HalfPtr2, Pointer Dwarf_ErrorPtr1);
	/**
	 * head<br>
	 * Original signature : <code>int dwarf_macro_context_head(Dwarf_Macro_Context, Dwarf_Half*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, unsigned int*, Dwarf_Bool*, Dwarf_Unsigned*, Dwarf_Bool*, Dwarf_Bool*, Dwarf_Half*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3261</i>
	 */
	int dwarf_macro_context_head(LibdwarfLibrary.Dwarf_Macro_Context Dwarf_Macro_Context1, ShortBuffer Dwarf_HalfPtr1, LongBuffer Dwarf_UnsignedPtr1, LongBuffer Dwarf_UnsignedPtr2, LongBuffer Dwarf_UnsignedPtr3, IntBuffer intPtr1, IntBuffer Dwarf_BoolPtr1, LongBuffer Dwarf_UnsignedPtr4, IntBuffer Dwarf_BoolPtr2, IntBuffer Dwarf_BoolPtr3, ShortBuffer Dwarf_HalfPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * head<br>
	 * Original signature : <code>int dwarf_macro_context_head(Dwarf_Macro_Context, Dwarf_Half*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, unsigned int*, Dwarf_Bool*, Dwarf_Unsigned*, Dwarf_Bool*, Dwarf_Bool*, Dwarf_Half*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3261</i>
	 */
	int dwarf_macro_context_head(Pointer Dwarf_Macro_Context1, ShortByReference Dwarf_HalfPtr1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, IntByReference intPtr1, IntByReference Dwarf_BoolPtr1, LongByReference Dwarf_UnsignedPtr4, IntByReference Dwarf_BoolPtr2, IntByReference Dwarf_BoolPtr3, ShortByReference Dwarf_HalfPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Returns data from the operands table<br>
	 * in the macro unit header.<br>
	 * head<br>
	 * Original signature : <code>int dwarf_macro_operands_table(Dwarf_Macro_Context, Dwarf_Half, Dwarf_Half*, Dwarf_Half*, const Dwarf_Small**, Dwarf_Error*)</code><br>
	 * @param Dwarf_Half1 0 to opcode_count -1<br>
	 * <i>native declaration : line 3276</i><br>
	 * @deprecated use the safer methods {@link #dwarf_macro_operands_table(libdwarf.LibdwarfLibrary.Dwarf_Macro_Context, short, java.nio.ShortBuffer, java.nio.ShortBuffer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_macro_operands_table(com.sun.jna.Pointer, short, com.sun.jna.ptr.ShortByReference, com.sun.jna.ptr.ShortByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_macro_operands_table(Pointer Dwarf_Macro_Context1, short Dwarf_Half1, ShortByReference Dwarf_HalfPtr1, ShortByReference Dwarf_HalfPtr2, PointerByReference Dwarf_SmallPtrPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Returns data from the operands table<br>
	 * in the macro unit header.<br>
	 * head<br>
	 * Original signature : <code>int dwarf_macro_operands_table(Dwarf_Macro_Context, Dwarf_Half, Dwarf_Half*, Dwarf_Half*, const Dwarf_Small**, Dwarf_Error*)</code><br>
	 * @param Dwarf_Half1 0 to opcode_count -1<br>
	 * <i>native declaration : line 3276</i>
	 */
	int dwarf_macro_operands_table(LibdwarfLibrary.Dwarf_Macro_Context Dwarf_Macro_Context1, short Dwarf_Half1, ShortBuffer Dwarf_HalfPtr1, ShortBuffer Dwarf_HalfPtr2, PointerByReference Dwarf_SmallPtrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Returns data from the operands table<br>
	 * in the macro unit header.<br>
	 * head<br>
	 * Original signature : <code>int dwarf_macro_operands_table(Dwarf_Macro_Context, Dwarf_Half, Dwarf_Half*, Dwarf_Half*, const Dwarf_Small**, Dwarf_Error*)</code><br>
	 * @param Dwarf_Half1 0 to opcode_count -1<br>
	 * <i>native declaration : line 3276</i>
	 */
	int dwarf_macro_operands_table(Pointer Dwarf_Macro_Context1, short Dwarf_Half1, ShortByReference Dwarf_HalfPtr1, ShortByReference Dwarf_HalfPtr2, PointerByReference Dwarf_SmallPtrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Access to the macro operations, 0 to macro_ops_count_out-1<br>
	 * Where the last of these will have macro_operator 0 (which appears<br>
	 * in the ops data and means end-of-ops).<br>
	 * op_start_section_offset is the section offset of<br>
	 * the macro operator (which is a single unsigned byte,<br>
	 * and is followed by the macro operand data).<br>
	 * macro_context<br>
	 * Original signature : <code>int dwarf_get_macro_op(Dwarf_Macro_Context, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Half*, Dwarf_Half*, const Dwarf_Small**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3289</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_macro_op(libdwarf.LibdwarfLibrary.Dwarf_Macro_Context, long, java.nio.LongBuffer, java.nio.ShortBuffer, java.nio.ShortBuffer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_macro_op(com.sun.jna.Pointer, long, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.ShortByReference, com.sun.jna.ptr.ShortByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_macro_op(Pointer Dwarf_Macro_Context1, long Dwarf_Unsigned1, LongByReference Dwarf_UnsignedPtr1, ShortByReference Dwarf_HalfPtr1, ShortByReference Dwarf_HalfPtr2, PointerByReference Dwarf_SmallPtrPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Access to the macro operations, 0 to macro_ops_count_out-1<br>
	 * Where the last of these will have macro_operator 0 (which appears<br>
	 * in the ops data and means end-of-ops).<br>
	 * op_start_section_offset is the section offset of<br>
	 * the macro operator (which is a single unsigned byte,<br>
	 * and is followed by the macro operand data).<br>
	 * macro_context<br>
	 * Original signature : <code>int dwarf_get_macro_op(Dwarf_Macro_Context, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Half*, Dwarf_Half*, const Dwarf_Small**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3289</i>
	 */
	int dwarf_get_macro_op(LibdwarfLibrary.Dwarf_Macro_Context Dwarf_Macro_Context1, long Dwarf_Unsigned1, LongBuffer Dwarf_UnsignedPtr1, ShortBuffer Dwarf_HalfPtr1, ShortBuffer Dwarf_HalfPtr2, PointerByReference Dwarf_SmallPtrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Access to the macro operations, 0 to macro_ops_count_out-1<br>
	 * Where the last of these will have macro_operator 0 (which appears<br>
	 * in the ops data and means end-of-ops).<br>
	 * op_start_section_offset is the section offset of<br>
	 * the macro operator (which is a single unsigned byte,<br>
	 * and is followed by the macro operand data).<br>
	 * macro_context<br>
	 * Original signature : <code>int dwarf_get_macro_op(Dwarf_Macro_Context, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Half*, Dwarf_Half*, const Dwarf_Small**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3289</i>
	 */
	int dwarf_get_macro_op(Pointer Dwarf_Macro_Context1, long Dwarf_Unsigned1, LongByReference Dwarf_UnsignedPtr1, ShortByReference Dwarf_HalfPtr1, ShortByReference Dwarf_HalfPtr2, PointerByReference Dwarf_SmallPtrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * macro_context<br>
	 * Original signature : <code>int dwarf_get_macro_defundef(Dwarf_Macro_Context, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Half*, const char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3297</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_macro_defundef(libdwarf.LibdwarfLibrary.Dwarf_Macro_Context, long, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.ShortBuffer, java.lang.String[], com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_macro_defundef(com.sun.jna.Pointer, long, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.ShortByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_macro_defundef(Pointer Dwarf_Macro_Context1, long Dwarf_Unsigned1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, ShortByReference Dwarf_HalfPtr1, PointerByReference charPtrPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * macro_context<br>
	 * Original signature : <code>int dwarf_get_macro_defundef(Dwarf_Macro_Context, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Half*, const char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3297</i>
	 */
	int dwarf_get_macro_defundef(LibdwarfLibrary.Dwarf_Macro_Context Dwarf_Macro_Context1, long Dwarf_Unsigned1, LongBuffer Dwarf_UnsignedPtr1, LongBuffer Dwarf_UnsignedPtr2, LongBuffer Dwarf_UnsignedPtr3, ShortBuffer Dwarf_HalfPtr1, String charPtrPtr1[], PointerByReference Dwarf_ErrorPtr1);
	/**
	 * macro_context<br>
	 * Original signature : <code>int dwarf_get_macro_defundef(Dwarf_Macro_Context, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Half*, const char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3297</i>
	 */
	int dwarf_get_macro_defundef(Pointer Dwarf_Macro_Context1, long Dwarf_Unsigned1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, ShortByReference Dwarf_HalfPtr1, PointerByReference charPtrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * macro_context<br>
	 * Original signature : <code>int dwarf_get_macro_startend_file(Dwarf_Macro_Context, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, const char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3305</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_macro_startend_file(libdwarf.LibdwarfLibrary.Dwarf_Macro_Context, long, java.nio.LongBuffer, java.nio.LongBuffer, java.lang.String[], com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_macro_startend_file(com.sun.jna.Pointer, long, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_macro_startend_file(Pointer Dwarf_Macro_Context1, long Dwarf_Unsigned1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, PointerByReference charPtrPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * macro_context<br>
	 * Original signature : <code>int dwarf_get_macro_startend_file(Dwarf_Macro_Context, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, const char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3305</i>
	 */
	int dwarf_get_macro_startend_file(LibdwarfLibrary.Dwarf_Macro_Context Dwarf_Macro_Context1, long Dwarf_Unsigned1, LongBuffer Dwarf_UnsignedPtr1, LongBuffer Dwarf_UnsignedPtr2, String charPtrPtr1[], PointerByReference Dwarf_ErrorPtr1);
	/**
	 * macro_context<br>
	 * Original signature : <code>int dwarf_get_macro_startend_file(Dwarf_Macro_Context, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, const char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3305</i>
	 */
	int dwarf_get_macro_startend_file(Pointer Dwarf_Macro_Context1, long Dwarf_Unsigned1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, PointerByReference charPtrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * macro_context<br>
	 * Original signature : <code>int dwarf_get_macro_import(Dwarf_Macro_Context, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3311</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_macro_import(libdwarf.LibdwarfLibrary.Dwarf_Macro_Context, long, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_macro_import(com.sun.jna.Pointer, long, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_macro_import(Pointer Dwarf_Macro_Context1, long Dwarf_Unsigned1, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * macro_context<br>
	 * Original signature : <code>int dwarf_get_macro_import(Dwarf_Macro_Context, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3311</i>
	 */
	int dwarf_get_macro_import(LibdwarfLibrary.Dwarf_Macro_Context Dwarf_Macro_Context1, long Dwarf_Unsigned1, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * macro_context<br>
	 * Original signature : <code>int dwarf_get_macro_import(Dwarf_Macro_Context, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3311</i>
	 */
	int dwarf_get_macro_import(Pointer Dwarf_Macro_Context1, long Dwarf_Unsigned1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dwarf_print_lines is for use by dwarfdump: it prints<br>
	 * line info to stdout.<br>
	 * The _dwarf name is obsolete. Use dwarf_ instead.<br>
	 * Added extra argnument 2/2009 for better checking.<br>
	 * cu_die<br>
	 * Original signature : <code>int _dwarf_print_lines(Dwarf_Die, Dwarf_Error*)</code><br>
	 * @param Dwarf_Die1 error<br>
	 * <i>native declaration : line 3339</i><br>
	 * @deprecated use the safer methods {@link #_dwarf_print_lines(libdwarf.LibdwarfLibrary.Dwarf_Die, com.sun.jna.ptr.PointerByReference)} and {@link #_dwarf_print_lines(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int _dwarf_print_lines(Pointer Dwarf_Die1, Pointer Dwarf_ErrorPtr1);
	/**
	 * dwarf_print_lines is for use by dwarfdump: it prints<br>
	 * line info to stdout.<br>
	 * The _dwarf name is obsolete. Use dwarf_ instead.<br>
	 * Added extra argnument 2/2009 for better checking.<br>
	 * cu_die<br>
	 * Original signature : <code>int _dwarf_print_lines(Dwarf_Die, Dwarf_Error*)</code><br>
	 * @param Dwarf_Die1 error<br>
	 * <i>native declaration : line 3339</i>
	 */
	int _dwarf_print_lines(LibdwarfLibrary.Dwarf_Die Dwarf_Die1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dwarf_print_lines is for use by dwarfdump: it prints<br>
	 * line info to stdout.<br>
	 * The _dwarf name is obsolete. Use dwarf_ instead.<br>
	 * Added extra argnument 2/2009 for better checking.<br>
	 * cu_die<br>
	 * Original signature : <code>int _dwarf_print_lines(Dwarf_Die, Dwarf_Error*)</code><br>
	 * @param Dwarf_Die1 error<br>
	 * <i>native declaration : line 3339</i>
	 */
	int _dwarf_print_lines(Pointer Dwarf_Die1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * cu_die<br>
	 * Original signature : <code>int dwarf_print_lines(Dwarf_Die, Dwarf_Error*, int*)</code><br>
	 * @param Dwarf_Die1 error<br>
	 * <i>native declaration : line 3340</i><br>
	 * @deprecated use the safer methods {@link #dwarf_print_lines(libdwarf.LibdwarfLibrary.Dwarf_Die, com.sun.jna.ptr.PointerByReference, java.nio.IntBuffer)} and {@link #dwarf_print_lines(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int dwarf_print_lines(Pointer Dwarf_Die1, Pointer Dwarf_ErrorPtr1, IntByReference intPtr1);
	/**
	 * cu_die<br>
	 * Original signature : <code>int dwarf_print_lines(Dwarf_Die, Dwarf_Error*, int*)</code><br>
	 * @param Dwarf_Die1 error<br>
	 * <i>native declaration : line 3340</i>
	 */
	int dwarf_print_lines(LibdwarfLibrary.Dwarf_Die Dwarf_Die1, PointerByReference Dwarf_ErrorPtr1, IntBuffer intPtr1);
	/**
	 * cu_die<br>
	 * Original signature : <code>int dwarf_print_lines(Dwarf_Die, Dwarf_Error*, int*)</code><br>
	 * @param Dwarf_Die1 error<br>
	 * <i>native declaration : line 3340</i>
	 */
	int dwarf_print_lines(Pointer Dwarf_Die1, PointerByReference Dwarf_ErrorPtr1, IntByReference intPtr1);
	/**
	 * If called with a NULL newvalues pointer, it simply returns<br>
	 * the current set of values for this Dwarf_Debug.<br>
	 * Original signature : <code>Dwarf_Printf_Callback_Info_s dwarf_register_printf_callback(Dwarf_Debug, Dwarf_Printf_Callback_Info_s*)</code><br>
	 * <i>native declaration : line 3371</i><br>
	 * @deprecated use the safer methods {@link #dwarf_register_printf_callback(libdwarf.LibdwarfLibrary.Dwarf_Debug, libdwarf.Dwarf_Printf_Callback_Info_s)} and {@link #dwarf_register_printf_callback(com.sun.jna.Pointer, libdwarf.Dwarf_Printf_Callback_Info_s)} instead
	 */
	@Deprecated 
	Dwarf_Printf_Callback_Info_s.ByValue dwarf_register_printf_callback(Pointer Dwarf_Debug1, Dwarf_Printf_Callback_Info_s Dwarf_Printf_Callback_Info_sPtr1);
	/**
	 * If called with a NULL newvalues pointer, it simply returns<br>
	 * the current set of values for this Dwarf_Debug.<br>
	 * Original signature : <code>Dwarf_Printf_Callback_Info_s dwarf_register_printf_callback(Dwarf_Debug, Dwarf_Printf_Callback_Info_s*)</code><br>
	 * <i>native declaration : line 3371</i>
	 */
	Dwarf_Printf_Callback_Info_s.ByValue dwarf_register_printf_callback(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, Dwarf_Printf_Callback_Info_s Dwarf_Printf_Callback_Info_sPtr1);
	/**
	 * dwarf_check_lineheader lets dwarfdump get detailed messages<br>
	 * about some compiler errors we detect.<br>
	 * We return the count of detected errors through the<br>
	 * pointer.<br>
	 * Use dwarf_check_lineheader_b() (new 14 April 2020)<br>
	 * in place of dwarf_check_lineheader().<br>
	 * cu_die<br>
	 * Original signature : <code>int dwarf_check_lineheader_b(Dwarf_Die, int*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3384</i><br>
	 * @deprecated use the safer methods {@link #dwarf_check_lineheader_b(libdwarf.LibdwarfLibrary.Dwarf_Die, java.nio.IntBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_check_lineheader_b(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_check_lineheader_b(Pointer Dwarf_Die1, IntByReference intPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * dwarf_check_lineheader lets dwarfdump get detailed messages<br>
	 * about some compiler errors we detect.<br>
	 * We return the count of detected errors through the<br>
	 * pointer.<br>
	 * Use dwarf_check_lineheader_b() (new 14 April 2020)<br>
	 * in place of dwarf_check_lineheader().<br>
	 * cu_die<br>
	 * Original signature : <code>int dwarf_check_lineheader_b(Dwarf_Die, int*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3384</i>
	 */
	int dwarf_check_lineheader_b(LibdwarfLibrary.Dwarf_Die Dwarf_Die1, IntBuffer intPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dwarf_check_lineheader lets dwarfdump get detailed messages<br>
	 * about some compiler errors we detect.<br>
	 * We return the count of detected errors through the<br>
	 * pointer.<br>
	 * Use dwarf_check_lineheader_b() (new 14 April 2020)<br>
	 * in place of dwarf_check_lineheader().<br>
	 * cu_die<br>
	 * Original signature : <code>int dwarf_check_lineheader_b(Dwarf_Die, int*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3384</i>
	 */
	int dwarf_check_lineheader_b(Pointer Dwarf_Die1, IntByReference intPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * cu_die<br>
	 * Original signature : <code>void dwarf_check_lineheader(Dwarf_Die, int*)</code><br>
	 * <i>native declaration : line 3387</i><br>
	 * @deprecated use the safer methods {@link #dwarf_check_lineheader(libdwarf.LibdwarfLibrary.Dwarf_Die, java.nio.IntBuffer)} and {@link #dwarf_check_lineheader(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	void dwarf_check_lineheader(Pointer Dwarf_Die1, IntByReference intPtr1);
	/**
	 * cu_die<br>
	 * Original signature : <code>void dwarf_check_lineheader(Dwarf_Die, int*)</code><br>
	 * <i>native declaration : line 3387</i>
	 */
	void dwarf_check_lineheader(LibdwarfLibrary.Dwarf_Die Dwarf_Die1, IntBuffer intPtr1);
	/**
	 * dwarf_ld_sort_lines helps SGI IRIX ld<br>
	 * rearrange lines in .debug_line in a .o created with a text<br>
	 * section per function.<br>
	 * -OPT:procedure_reorder=ON<br>
	 * where ld-cord (cord(1)ing by ld,<br>
	 * not by cord(1)) may have changed the function order.<br>
	 * The _dwarf name is obsolete. Use dwarf_ instead.<br>
	 * Original signature : <code>int _dwarf_ld_sort_lines(void*, unsigned long, int, int*, int*)</code><br>
	 * <i>native declaration : line 3398</i><br>
	 * @deprecated use the safer methods {@link #_dwarf_ld_sort_lines(com.sun.jna.Pointer, com.sun.jna.NativeLong, int, java.nio.IntBuffer, java.nio.IntBuffer)} and {@link #_dwarf_ld_sort_lines(com.sun.jna.Pointer, com.sun.jna.NativeLong, int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int _dwarf_ld_sort_lines(Pointer voidPtr1, NativeLong u1, int int1, IntByReference intPtr1, IntByReference intPtr2);
	/**
	 * dwarf_ld_sort_lines helps SGI IRIX ld<br>
	 * rearrange lines in .debug_line in a .o created with a text<br>
	 * section per function.<br>
	 * -OPT:procedure_reorder=ON<br>
	 * where ld-cord (cord(1)ing by ld,<br>
	 * not by cord(1)) may have changed the function order.<br>
	 * The _dwarf name is obsolete. Use dwarf_ instead.<br>
	 * Original signature : <code>int _dwarf_ld_sort_lines(void*, unsigned long, int, int*, int*)</code><br>
	 * <i>native declaration : line 3398</i>
	 */
	int _dwarf_ld_sort_lines(Pointer voidPtr1, NativeLong u1, int int1, IntBuffer intPtr1, IntBuffer intPtr2);
	/**
	 * Original signature : <code>int dwarf_ld_sort_lines(void*, unsigned long, int, int*, int*)</code><br>
	 * <i>native declaration : line 3404</i><br>
	 * @deprecated use the safer methods {@link #dwarf_ld_sort_lines(com.sun.jna.Pointer, com.sun.jna.NativeLong, int, java.nio.IntBuffer, java.nio.IntBuffer)} and {@link #dwarf_ld_sort_lines(com.sun.jna.Pointer, com.sun.jna.NativeLong, int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int dwarf_ld_sort_lines(Pointer voidPtr1, NativeLong u1, int int1, IntByReference intPtr1, IntByReference intPtr2);
	/**
	 * Original signature : <code>int dwarf_ld_sort_lines(void*, unsigned long, int, int*, int*)</code><br>
	 * <i>native declaration : line 3404</i>
	 */
	int dwarf_ld_sort_lines(Pointer voidPtr1, NativeLong u1, int int1, IntBuffer intPtr1, IntBuffer intPtr2);
	/**
	 * Used by dwarfdump -v to print fde offsets from debugging<br>
	 * info.<br>
	 * The _dwarf name is obsolete. Use dwarf_ instead.<br>
	 * dbg<br>
	 * Original signature : <code>int _dwarf_fde_section_offset(Dwarf_Debug, Dwarf_Fde, Dwarf_Off*, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3415</i><br>
	 * @deprecated use the safer methods {@link #_dwarf_fde_section_offset(libdwarf.LibdwarfLibrary.Dwarf_Debug, libdwarf.LibdwarfLibrary.Dwarf_Fde, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #_dwarf_fde_section_offset(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int _dwarf_fde_section_offset(Pointer Dwarf_Debug1, Pointer Dwarf_Fde1, LongByReference Dwarf_OffPtr1, LongByReference Dwarf_OffPtr2, Pointer Dwarf_ErrorPtr1);
	/**
	 * Used by dwarfdump -v to print fde offsets from debugging<br>
	 * info.<br>
	 * The _dwarf name is obsolete. Use dwarf_ instead.<br>
	 * dbg<br>
	 * Original signature : <code>int _dwarf_fde_section_offset(Dwarf_Debug, Dwarf_Fde, Dwarf_Off*, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3415</i>
	 */
	int _dwarf_fde_section_offset(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, LibdwarfLibrary.Dwarf_Fde Dwarf_Fde1, LongBuffer Dwarf_OffPtr1, LongBuffer Dwarf_OffPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Used by dwarfdump -v to print fde offsets from debugging<br>
	 * info.<br>
	 * The _dwarf name is obsolete. Use dwarf_ instead.<br>
	 * dbg<br>
	 * Original signature : <code>int _dwarf_fde_section_offset(Dwarf_Debug, Dwarf_Fde, Dwarf_Off*, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3415</i>
	 */
	int _dwarf_fde_section_offset(Pointer Dwarf_Debug1, Pointer Dwarf_Fde1, LongByReference Dwarf_OffPtr1, LongByReference Dwarf_OffPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_fde_section_offset(Dwarf_Debug, Dwarf_Fde, Dwarf_Off*, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3421</i><br>
	 * @deprecated use the safer methods {@link #dwarf_fde_section_offset(libdwarf.LibdwarfLibrary.Dwarf_Debug, libdwarf.LibdwarfLibrary.Dwarf_Fde, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_fde_section_offset(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_fde_section_offset(Pointer Dwarf_Debug1, Pointer Dwarf_Fde1, LongByReference Dwarf_OffPtr1, LongByReference Dwarf_OffPtr2, Pointer Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_fde_section_offset(Dwarf_Debug, Dwarf_Fde, Dwarf_Off*, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3421</i>
	 */
	int dwarf_fde_section_offset(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, LibdwarfLibrary.Dwarf_Fde Dwarf_Fde1, LongBuffer Dwarf_OffPtr1, LongBuffer Dwarf_OffPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_fde_section_offset(Dwarf_Debug, Dwarf_Fde, Dwarf_Off*, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3421</i>
	 */
	int dwarf_fde_section_offset(Pointer Dwarf_Debug1, Pointer Dwarf_Fde1, LongByReference Dwarf_OffPtr1, LongByReference Dwarf_OffPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Used by dwarfdump -v to print cie offsets from debugging<br>
	 * info.<br>
	 * The _dwarf name is obsolete. Use dwarf_ instead.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_cie_section_offset(Dwarf_Debug, Dwarf_Cie, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3431</i><br>
	 * @deprecated use the safer methods {@link #dwarf_cie_section_offset(libdwarf.LibdwarfLibrary.Dwarf_Debug, libdwarf.LibdwarfLibrary.Dwarf_Cie, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_cie_section_offset(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_cie_section_offset(Pointer Dwarf_Debug1, Pointer Dwarf_Cie1, LongByReference Dwarf_OffPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Used by dwarfdump -v to print cie offsets from debugging<br>
	 * info.<br>
	 * The _dwarf name is obsolete. Use dwarf_ instead.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_cie_section_offset(Dwarf_Debug, Dwarf_Cie, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3431</i>
	 */
	int dwarf_cie_section_offset(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, LibdwarfLibrary.Dwarf_Cie Dwarf_Cie1, LongBuffer Dwarf_OffPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Used by dwarfdump -v to print cie offsets from debugging<br>
	 * info.<br>
	 * The _dwarf name is obsolete. Use dwarf_ instead.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_cie_section_offset(Dwarf_Debug, Dwarf_Cie, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3431</i>
	 */
	int dwarf_cie_section_offset(Pointer Dwarf_Debug1, Pointer Dwarf_Cie1, LongByReference Dwarf_OffPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int _dwarf_cie_section_offset(Dwarf_Debug, Dwarf_Cie, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3435</i><br>
	 * @deprecated use the safer methods {@link #_dwarf_cie_section_offset(libdwarf.LibdwarfLibrary.Dwarf_Debug, libdwarf.LibdwarfLibrary.Dwarf_Cie, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #_dwarf_cie_section_offset(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int _dwarf_cie_section_offset(Pointer Dwarf_Debug1, Pointer Dwarf_Cie1, LongByReference Dwarf_OffPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int _dwarf_cie_section_offset(Dwarf_Debug, Dwarf_Cie, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3435</i>
	 */
	int _dwarf_cie_section_offset(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, LibdwarfLibrary.Dwarf_Cie Dwarf_Cie1, LongBuffer Dwarf_OffPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int _dwarf_cie_section_offset(Dwarf_Debug, Dwarf_Cie, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3435</i>
	 */
	int _dwarf_cie_section_offset(Pointer Dwarf_Debug1, Pointer Dwarf_Cie1, LongByReference Dwarf_OffPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * macro_string<br>
	 * Original signature : <code>char* dwarf_find_macro_value_start(char*)</code><br>
	 * <i>native declaration : line 3442</i><br>
	 * @deprecated use the safer methods {@link #dwarf_find_macro_value_start(java.nio.ByteBuffer)} and {@link #dwarf_find_macro_value_start(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer dwarf_find_macro_value_start(Pointer charPtr1);
	/**
	 * macro_string<br>
	 * Original signature : <code>char* dwarf_find_macro_value_start(char*)</code><br>
	 * <i>native declaration : line 3442</i>
	 */
	Pointer dwarf_find_macro_value_start(ByteBuffer charPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_macro_details(Dwarf_Debug, Dwarf_Off, Dwarf_Unsigned, Dwarf_Signed*, Dwarf_Macro_Details**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3444</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_macro_details(libdwarf.LibdwarfLibrary.Dwarf_Debug, long, long, java.nio.LongBuffer, libdwarf.Dwarf_Macro_Details_s.ByReference[], com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_macro_details(com.sun.jna.Pointer, long, long, com.sun.jna.ptr.LongByReference, libdwarf.Dwarf_Macro_Details_s.ByReference[], com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_macro_details(Pointer Dwarf_Debug1, long Dwarf_Off1, long Dwarf_Unsigned1, LongByReference Dwarf_SignedPtr1, PointerByReference Dwarf_Macro_DetailsPtrPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_macro_details(Dwarf_Debug, Dwarf_Off, Dwarf_Unsigned, Dwarf_Signed*, Dwarf_Macro_Details**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3444</i>
	 */
	int dwarf_get_macro_details(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, long Dwarf_Off1, long Dwarf_Unsigned1, LongBuffer Dwarf_SignedPtr1, libdwarf.Dwarf_Macro_Details_s.ByReference Dwarf_Macro_DetailsPtrPtr1[], PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_macro_details(Dwarf_Debug, Dwarf_Off, Dwarf_Unsigned, Dwarf_Signed*, Dwarf_Macro_Details**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3444</i>
	 */
	int dwarf_get_macro_details(Pointer Dwarf_Debug1, long Dwarf_Off1, long Dwarf_Unsigned1, LongByReference Dwarf_SignedPtr1, libdwarf.Dwarf_Macro_Details_s.ByReference Dwarf_Macro_DetailsPtrPtr1[], PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dwarf_get_offset_size() New October 2015<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_offset_size(Dwarf_Debug, Dwarf_Half*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3453</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_offset_size(libdwarf.LibdwarfLibrary.Dwarf_Debug, java.nio.ShortBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_offset_size(com.sun.jna.Pointer, com.sun.jna.ptr.ShortByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_offset_size(Pointer Dwarf_Debug1, ShortByReference Dwarf_HalfPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * dwarf_get_offset_size() New October 2015<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_offset_size(Dwarf_Debug, Dwarf_Half*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3453</i>
	 */
	int dwarf_get_offset_size(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, ShortBuffer Dwarf_HalfPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dwarf_get_offset_size() New October 2015<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_offset_size(Dwarf_Debug, Dwarf_Half*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3453</i>
	 */
	int dwarf_get_offset_size(Pointer Dwarf_Debug1, ShortByReference Dwarf_HalfPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_address_size(Dwarf_Debug, Dwarf_Half*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3456</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_address_size(libdwarf.LibdwarfLibrary.Dwarf_Debug, java.nio.ShortBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_address_size(com.sun.jna.Pointer, com.sun.jna.ptr.ShortByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_address_size(Pointer Dwarf_Debug1, ShortByReference Dwarf_HalfPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_address_size(Dwarf_Debug, Dwarf_Half*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3456</i>
	 */
	int dwarf_get_address_size(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, ShortBuffer Dwarf_HalfPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_address_size(Dwarf_Debug, Dwarf_Half*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3456</i>
	 */
	int dwarf_get_address_size(Pointer Dwarf_Debug1, ShortByReference Dwarf_HalfPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * die<br>
	 * Original signature : <code>int dwarf_get_die_address_size(Dwarf_Die, Dwarf_Half*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3459</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_die_address_size(libdwarf.LibdwarfLibrary.Dwarf_Die, java.nio.ShortBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_die_address_size(com.sun.jna.Pointer, com.sun.jna.ptr.ShortByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_die_address_size(Pointer Dwarf_Die1, ShortByReference Dwarf_HalfPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * die<br>
	 * Original signature : <code>int dwarf_get_die_address_size(Dwarf_Die, Dwarf_Half*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3459</i>
	 */
	int dwarf_get_die_address_size(LibdwarfLibrary.Dwarf_Die Dwarf_Die1, ShortBuffer Dwarf_HalfPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * die<br>
	 * Original signature : <code>int dwarf_get_die_address_size(Dwarf_Die, Dwarf_Half*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3459</i>
	 */
	int dwarf_get_die_address_size(Pointer Dwarf_Die1, ShortByReference Dwarf_HalfPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>Dwarf_Form_Class dwarf_get_form_class(Dwarf_Half, Dwarf_Half, Dwarf_Half, Dwarf_Half)</code><br>
	 * <i>native declaration : line 3463</i>
	 */
	int dwarf_get_form_class(short Dwarf_Half1, short Dwarf_Half2, short Dwarf_Half3, short Dwarf_Half4);
	/**
	 * Creates a Dwarf_Gdbindex, returning it and<br>
	 * its values through the pointers.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_gdbindex_header(Dwarf_Debug, Dwarf_Gdbindex*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, const char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3489</i><br>
	 * @deprecated use the safer methods {@link #dwarf_gdbindex_header(libdwarf.LibdwarfLibrary.Dwarf_Debug, com.sun.jna.ptr.PointerByReference, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.lang.String[], com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_gdbindex_header(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_gdbindex_header(Pointer Dwarf_Debug1, Pointer Dwarf_GdbindexPtr1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, LongByReference Dwarf_UnsignedPtr4, LongByReference Dwarf_UnsignedPtr5, LongByReference Dwarf_UnsignedPtr6, LongByReference Dwarf_UnsignedPtr7, LongByReference Dwarf_UnsignedPtr8, PointerByReference charPtrPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Creates a Dwarf_Gdbindex, returning it and<br>
	 * its values through the pointers.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_gdbindex_header(Dwarf_Debug, Dwarf_Gdbindex*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, const char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3489</i>
	 */
	int dwarf_gdbindex_header(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, PointerByReference Dwarf_GdbindexPtr1, LongBuffer Dwarf_UnsignedPtr1, LongBuffer Dwarf_UnsignedPtr2, LongBuffer Dwarf_UnsignedPtr3, LongBuffer Dwarf_UnsignedPtr4, LongBuffer Dwarf_UnsignedPtr5, LongBuffer Dwarf_UnsignedPtr6, LongBuffer Dwarf_UnsignedPtr7, LongBuffer Dwarf_UnsignedPtr8, String charPtrPtr1[], PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Creates a Dwarf_Gdbindex, returning it and<br>
	 * its values through the pointers.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_gdbindex_header(Dwarf_Debug, Dwarf_Gdbindex*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, const char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3489</i>
	 */
	int dwarf_gdbindex_header(Pointer Dwarf_Debug1, PointerByReference Dwarf_GdbindexPtr1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, LongByReference Dwarf_UnsignedPtr4, LongByReference Dwarf_UnsignedPtr5, LongByReference Dwarf_UnsignedPtr6, LongByReference Dwarf_UnsignedPtr7, LongByReference Dwarf_UnsignedPtr8, PointerByReference charPtrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * gdbindexptr<br>
	 * Original signature : <code>int dwarf_gdbindex_culist_array(Dwarf_Gdbindex, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3502</i><br>
	 * @deprecated use the safer methods {@link #dwarf_gdbindex_culist_array(libdwarf.LibdwarfLibrary.Dwarf_Gdbindex, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_gdbindex_culist_array(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_gdbindex_culist_array(Pointer Dwarf_Gdbindex1, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * gdbindexptr<br>
	 * Original signature : <code>int dwarf_gdbindex_culist_array(Dwarf_Gdbindex, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3502</i>
	 */
	int dwarf_gdbindex_culist_array(LibdwarfLibrary.Dwarf_Gdbindex Dwarf_Gdbindex1, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * gdbindexptr<br>
	 * Original signature : <code>int dwarf_gdbindex_culist_array(Dwarf_Gdbindex, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3502</i>
	 */
	int dwarf_gdbindex_culist_array(Pointer Dwarf_Gdbindex1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * entryindex: 0 to list_length-1<br>
	 * gdbindexptr<br>
	 * Original signature : <code>int dwarf_gdbindex_culist_entry(Dwarf_Gdbindex, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3507</i><br>
	 * @deprecated use the safer methods {@link #dwarf_gdbindex_culist_entry(libdwarf.LibdwarfLibrary.Dwarf_Gdbindex, long, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_gdbindex_culist_entry(com.sun.jna.Pointer, long, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_gdbindex_culist_entry(Pointer Dwarf_Gdbindex1, long Dwarf_Unsigned1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, Pointer Dwarf_ErrorPtr1);
	/**
	 * entryindex: 0 to list_length-1<br>
	 * gdbindexptr<br>
	 * Original signature : <code>int dwarf_gdbindex_culist_entry(Dwarf_Gdbindex, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3507</i>
	 */
	int dwarf_gdbindex_culist_entry(LibdwarfLibrary.Dwarf_Gdbindex Dwarf_Gdbindex1, long Dwarf_Unsigned1, LongBuffer Dwarf_UnsignedPtr1, LongBuffer Dwarf_UnsignedPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * entryindex: 0 to list_length-1<br>
	 * gdbindexptr<br>
	 * Original signature : <code>int dwarf_gdbindex_culist_entry(Dwarf_Gdbindex, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3507</i>
	 */
	int dwarf_gdbindex_culist_entry(Pointer Dwarf_Gdbindex1, long Dwarf_Unsigned1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * gdbindexptr<br>
	 * Original signature : <code>int dwarf_gdbindex_types_culist_array(Dwarf_Gdbindex, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3513</i><br>
	 * @deprecated use the safer methods {@link #dwarf_gdbindex_types_culist_array(libdwarf.LibdwarfLibrary.Dwarf_Gdbindex, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_gdbindex_types_culist_array(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_gdbindex_types_culist_array(Pointer Dwarf_Gdbindex1, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * gdbindexptr<br>
	 * Original signature : <code>int dwarf_gdbindex_types_culist_array(Dwarf_Gdbindex, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3513</i>
	 */
	int dwarf_gdbindex_types_culist_array(LibdwarfLibrary.Dwarf_Gdbindex Dwarf_Gdbindex1, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * gdbindexptr<br>
	 * Original signature : <code>int dwarf_gdbindex_types_culist_array(Dwarf_Gdbindex, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3513</i>
	 */
	int dwarf_gdbindex_types_culist_array(Pointer Dwarf_Gdbindex1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * entryindex: 0 to types_list_length -1<br>
	 * Original signature : <code>int dwarf_gdbindex_types_culist_entry(Dwarf_Gdbindex, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3518</i><br>
	 * @deprecated use the safer methods {@link #dwarf_gdbindex_types_culist_entry(libdwarf.LibdwarfLibrary.Dwarf_Gdbindex, long, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_gdbindex_types_culist_entry(com.sun.jna.Pointer, long, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_gdbindex_types_culist_entry(Pointer Dwarf_Gdbindex1, long Dwarf_Unsigned1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, Pointer Dwarf_ErrorPtr1);
	/**
	 * entryindex: 0 to types_list_length -1<br>
	 * Original signature : <code>int dwarf_gdbindex_types_culist_entry(Dwarf_Gdbindex, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3518</i>
	 */
	int dwarf_gdbindex_types_culist_entry(LibdwarfLibrary.Dwarf_Gdbindex Dwarf_Gdbindex1, long Dwarf_Unsigned1, LongBuffer Dwarf_UnsignedPtr1, LongBuffer Dwarf_UnsignedPtr2, LongBuffer Dwarf_UnsignedPtr3, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * entryindex: 0 to types_list_length -1<br>
	 * Original signature : <code>int dwarf_gdbindex_types_culist_entry(Dwarf_Gdbindex, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3518</i>
	 */
	int dwarf_gdbindex_types_culist_entry(Pointer Dwarf_Gdbindex1, long Dwarf_Unsigned1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * gdbindexptr<br>
	 * Original signature : <code>int dwarf_gdbindex_addressarea(Dwarf_Gdbindex, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3526</i><br>
	 * @deprecated use the safer methods {@link #dwarf_gdbindex_addressarea(libdwarf.LibdwarfLibrary.Dwarf_Gdbindex, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_gdbindex_addressarea(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_gdbindex_addressarea(Pointer Dwarf_Gdbindex1, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * gdbindexptr<br>
	 * Original signature : <code>int dwarf_gdbindex_addressarea(Dwarf_Gdbindex, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3526</i>
	 */
	int dwarf_gdbindex_addressarea(LibdwarfLibrary.Dwarf_Gdbindex Dwarf_Gdbindex1, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * gdbindexptr<br>
	 * Original signature : <code>int dwarf_gdbindex_addressarea(Dwarf_Gdbindex, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3526</i>
	 */
	int dwarf_gdbindex_addressarea(Pointer Dwarf_Gdbindex1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * entryindex: 0 to addressarea_list_length-1<br>
	 * Original signature : <code>int dwarf_gdbindex_addressarea_entry(Dwarf_Gdbindex, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3531</i><br>
	 * @deprecated use the safer methods {@link #dwarf_gdbindex_addressarea_entry(libdwarf.LibdwarfLibrary.Dwarf_Gdbindex, long, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_gdbindex_addressarea_entry(com.sun.jna.Pointer, long, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_gdbindex_addressarea_entry(Pointer Dwarf_Gdbindex1, long Dwarf_Unsigned1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, Pointer Dwarf_ErrorPtr1);
	/**
	 * entryindex: 0 to addressarea_list_length-1<br>
	 * Original signature : <code>int dwarf_gdbindex_addressarea_entry(Dwarf_Gdbindex, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3531</i>
	 */
	int dwarf_gdbindex_addressarea_entry(LibdwarfLibrary.Dwarf_Gdbindex Dwarf_Gdbindex1, long Dwarf_Unsigned1, LongBuffer Dwarf_UnsignedPtr1, LongBuffer Dwarf_UnsignedPtr2, LongBuffer Dwarf_UnsignedPtr3, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * entryindex: 0 to addressarea_list_length-1<br>
	 * Original signature : <code>int dwarf_gdbindex_addressarea_entry(Dwarf_Gdbindex, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3531</i>
	 */
	int dwarf_gdbindex_addressarea_entry(Pointer Dwarf_Gdbindex1, long Dwarf_Unsigned1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * gdbindexptr<br>
	 * Original signature : <code>int dwarf_gdbindex_symboltable_array(Dwarf_Gdbindex, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3539</i><br>
	 * @deprecated use the safer methods {@link #dwarf_gdbindex_symboltable_array(libdwarf.LibdwarfLibrary.Dwarf_Gdbindex, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_gdbindex_symboltable_array(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_gdbindex_symboltable_array(Pointer Dwarf_Gdbindex1, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * gdbindexptr<br>
	 * Original signature : <code>int dwarf_gdbindex_symboltable_array(Dwarf_Gdbindex, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3539</i>
	 */
	int dwarf_gdbindex_symboltable_array(LibdwarfLibrary.Dwarf_Gdbindex Dwarf_Gdbindex1, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * gdbindexptr<br>
	 * Original signature : <code>int dwarf_gdbindex_symboltable_array(Dwarf_Gdbindex, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3539</i>
	 */
	int dwarf_gdbindex_symboltable_array(Pointer Dwarf_Gdbindex1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * entryindex: 0 to symtab_list_length-1<br>
	 * Original signature : <code>int dwarf_gdbindex_symboltable_entry(Dwarf_Gdbindex, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3544</i><br>
	 * @deprecated use the safer methods {@link #dwarf_gdbindex_symboltable_entry(libdwarf.LibdwarfLibrary.Dwarf_Gdbindex, long, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_gdbindex_symboltable_entry(com.sun.jna.Pointer, long, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_gdbindex_symboltable_entry(Pointer Dwarf_Gdbindex1, long Dwarf_Unsigned1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, Pointer Dwarf_ErrorPtr1);
	/**
	 * entryindex: 0 to symtab_list_length-1<br>
	 * Original signature : <code>int dwarf_gdbindex_symboltable_entry(Dwarf_Gdbindex, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3544</i>
	 */
	int dwarf_gdbindex_symboltable_entry(LibdwarfLibrary.Dwarf_Gdbindex Dwarf_Gdbindex1, long Dwarf_Unsigned1, LongBuffer Dwarf_UnsignedPtr1, LongBuffer Dwarf_UnsignedPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * entryindex: 0 to symtab_list_length-1<br>
	 * Original signature : <code>int dwarf_gdbindex_symboltable_entry(Dwarf_Gdbindex, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3544</i>
	 */
	int dwarf_gdbindex_symboltable_entry(Pointer Dwarf_Gdbindex1, long Dwarf_Unsigned1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * gdbindex<br>
	 * Original signature : <code>int dwarf_gdbindex_cuvector_length(Dwarf_Gdbindex, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3551</i><br>
	 * @deprecated use the safer methods {@link #dwarf_gdbindex_cuvector_length(libdwarf.LibdwarfLibrary.Dwarf_Gdbindex, long, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_gdbindex_cuvector_length(com.sun.jna.Pointer, long, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_gdbindex_cuvector_length(Pointer Dwarf_Gdbindex1, long Dwarf_Unsigned1, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * gdbindex<br>
	 * Original signature : <code>int dwarf_gdbindex_cuvector_length(Dwarf_Gdbindex, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3551</i>
	 */
	int dwarf_gdbindex_cuvector_length(LibdwarfLibrary.Dwarf_Gdbindex Dwarf_Gdbindex1, long Dwarf_Unsigned1, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * gdbindex<br>
	 * Original signature : <code>int dwarf_gdbindex_cuvector_length(Dwarf_Gdbindex, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3551</i>
	 */
	int dwarf_gdbindex_cuvector_length(Pointer Dwarf_Gdbindex1, long Dwarf_Unsigned1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * gdbindex<br>
	 * Original signature : <code>int dwarf_gdbindex_cuvector_inner_attributes(Dwarf_Gdbindex, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3557</i><br>
	 * @deprecated use the safer methods {@link #dwarf_gdbindex_cuvector_inner_attributes(libdwarf.LibdwarfLibrary.Dwarf_Gdbindex, long, long, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_gdbindex_cuvector_inner_attributes(com.sun.jna.Pointer, long, long, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_gdbindex_cuvector_inner_attributes(Pointer Dwarf_Gdbindex1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * gdbindex<br>
	 * Original signature : <code>int dwarf_gdbindex_cuvector_inner_attributes(Dwarf_Gdbindex, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3557</i>
	 */
	int dwarf_gdbindex_cuvector_inner_attributes(LibdwarfLibrary.Dwarf_Gdbindex Dwarf_Gdbindex1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * gdbindex<br>
	 * Original signature : <code>int dwarf_gdbindex_cuvector_inner_attributes(Dwarf_Gdbindex, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3557</i>
	 */
	int dwarf_gdbindex_cuvector_inner_attributes(Pointer Dwarf_Gdbindex1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>int dwarf_gdbindex_cuvector_instance_expand_value(Dwarf_Gdbindex, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3565</i><br>
	 * @deprecated use the safer methods {@link #dwarf_gdbindex_cuvector_instance_expand_value(libdwarf.LibdwarfLibrary.Dwarf_Gdbindex, long, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_gdbindex_cuvector_instance_expand_value(com.sun.jna.Pointer, long, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_gdbindex_cuvector_instance_expand_value(Pointer Dwarf_Gdbindex1, long Dwarf_Unsigned1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, LongByReference Dwarf_UnsignedPtr4, Pointer Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>int dwarf_gdbindex_cuvector_instance_expand_value(Dwarf_Gdbindex, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3565</i>
	 */
	int dwarf_gdbindex_cuvector_instance_expand_value(LibdwarfLibrary.Dwarf_Gdbindex Dwarf_Gdbindex1, long Dwarf_Unsigned1, LongBuffer Dwarf_UnsignedPtr1, LongBuffer Dwarf_UnsignedPtr2, LongBuffer Dwarf_UnsignedPtr3, LongBuffer Dwarf_UnsignedPtr4, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>int dwarf_gdbindex_cuvector_instance_expand_value(Dwarf_Gdbindex, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3565</i>
	 */
	int dwarf_gdbindex_cuvector_instance_expand_value(Pointer Dwarf_Gdbindex1, long Dwarf_Unsigned1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, LongByReference Dwarf_UnsignedPtr4, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * gdbindexptr<br>
	 * Original signature : <code>int dwarf_gdbindex_string_by_offset(Dwarf_Gdbindex, Dwarf_Unsigned, const char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3578</i><br>
	 * @deprecated use the safer methods {@link #dwarf_gdbindex_string_by_offset(libdwarf.LibdwarfLibrary.Dwarf_Gdbindex, long, java.lang.String[], com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_gdbindex_string_by_offset(com.sun.jna.Pointer, long, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_gdbindex_string_by_offset(Pointer Dwarf_Gdbindex1, long Dwarf_Unsigned1, PointerByReference charPtrPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * gdbindexptr<br>
	 * Original signature : <code>int dwarf_gdbindex_string_by_offset(Dwarf_Gdbindex, Dwarf_Unsigned, const char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3578</i>
	 */
	int dwarf_gdbindex_string_by_offset(LibdwarfLibrary.Dwarf_Gdbindex Dwarf_Gdbindex1, long Dwarf_Unsigned1, String charPtrPtr1[], PointerByReference Dwarf_ErrorPtr1);
	/**
	 * gdbindexptr<br>
	 * Original signature : <code>int dwarf_gdbindex_string_by_offset(Dwarf_Gdbindex, Dwarf_Unsigned, const char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3578</i>
	 */
	int dwarf_gdbindex_string_by_offset(Pointer Dwarf_Gdbindex1, long Dwarf_Unsigned1, PointerByReference charPtrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * gdbindexptr<br>
	 * Original signature : <code>void dwarf_gdbindex_free(Dwarf_Gdbindex)</code><br>
	 * <i>native declaration : line 3583</i><br>
	 * @deprecated use the safer methods {@link #dwarf_gdbindex_free(libdwarf.LibdwarfLibrary.Dwarf_Gdbindex)} and {@link #dwarf_gdbindex_free(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void dwarf_gdbindex_free(Pointer Dwarf_Gdbindex1);
	/**
	 * gdbindexptr<br>
	 * Original signature : <code>void dwarf_gdbindex_free(Dwarf_Gdbindex)</code><br>
	 * <i>native declaration : line 3583</i>
	 */
	void dwarf_gdbindex_free(LibdwarfLibrary.Dwarf_Gdbindex Dwarf_Gdbindex1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_xu_index_header(Dwarf_Debug, const char*, Dwarf_Xu_Index_Header*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, const char**, Dwarf_Error*)</code><br>
	 * @param section_type "tu" or "cu"<br>
	 * <i>native declaration : line 3589</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_xu_index_header(libdwarf.LibdwarfLibrary.Dwarf_Debug, java.lang.String, com.sun.jna.ptr.PointerByReference, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.lang.String[], com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_xu_index_header(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_xu_index_header(Pointer Dwarf_Debug1, Pointer section_type, Pointer Dwarf_Xu_Index_HeaderPtr1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, LongByReference Dwarf_UnsignedPtr4, PointerByReference charPtrPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_xu_index_header(Dwarf_Debug, const char*, Dwarf_Xu_Index_Header*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, const char**, Dwarf_Error*)</code><br>
	 * @param section_type "tu" or "cu"<br>
	 * <i>native declaration : line 3589</i>
	 */
	int dwarf_get_xu_index_header(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, String section_type, PointerByReference Dwarf_Xu_Index_HeaderPtr1, LongBuffer Dwarf_UnsignedPtr1, LongBuffer Dwarf_UnsignedPtr2, LongBuffer Dwarf_UnsignedPtr3, LongBuffer Dwarf_UnsignedPtr4, String charPtrPtr1[], PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_xu_index_header(Dwarf_Debug, const char*, Dwarf_Xu_Index_Header*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, const char**, Dwarf_Error*)</code><br>
	 * @param section_type "tu" or "cu"<br>
	 * <i>native declaration : line 3589</i>
	 */
	int dwarf_get_xu_index_header(Pointer Dwarf_Debug1, Pointer section_type, PointerByReference Dwarf_Xu_Index_HeaderPtr1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, LongByReference Dwarf_UnsignedPtr4, PointerByReference charPtrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * xuhdr<br>
	 * Original signature : <code>int dwarf_get_xu_index_section_type(Dwarf_Xu_Index_Header, const char**, const char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3599</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_xu_index_section_type(libdwarf.LibdwarfLibrary.Dwarf_Xu_Index_Header, java.lang.String[], java.lang.String[], com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_xu_index_section_type(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_xu_index_section_type(Pointer Dwarf_Xu_Index_Header1, PointerByReference charPtrPtr1, PointerByReference charPtrPtr2, Pointer Dwarf_ErrorPtr1);
	/**
	 * xuhdr<br>
	 * Original signature : <code>int dwarf_get_xu_index_section_type(Dwarf_Xu_Index_Header, const char**, const char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3599</i>
	 */
	int dwarf_get_xu_index_section_type(LibdwarfLibrary.Dwarf_Xu_Index_Header Dwarf_Xu_Index_Header1, String charPtrPtr1[], String charPtrPtr2[], PointerByReference Dwarf_ErrorPtr1);
	/**
	 * xuhdr<br>
	 * Original signature : <code>int dwarf_get_xu_index_section_type(Dwarf_Xu_Index_Header, const char**, const char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3599</i>
	 */
	int dwarf_get_xu_index_section_type(Pointer Dwarf_Xu_Index_Header1, PointerByReference charPtrPtr1, PointerByReference charPtrPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Index values 0 to M-1 are valid.<br>
	 * xuhdr<br>
	 * Original signature : <code>int dwarf_get_xu_hash_entry(Dwarf_Xu_Index_Header, Dwarf_Unsigned, Dwarf_Sig8*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3610</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_xu_hash_entry(libdwarf.LibdwarfLibrary.Dwarf_Xu_Index_Header, long, libdwarf.Dwarf_Sig8_s, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_xu_hash_entry(com.sun.jna.Pointer, long, libdwarf.Dwarf_Sig8_s, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_xu_hash_entry(Pointer Dwarf_Xu_Index_Header1, long Dwarf_Unsigned1, Dwarf_Sig8_s Dwarf_Sig8Ptr1, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Index values 0 to M-1 are valid.<br>
	 * xuhdr<br>
	 * Original signature : <code>int dwarf_get_xu_hash_entry(Dwarf_Xu_Index_Header, Dwarf_Unsigned, Dwarf_Sig8*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3610</i>
	 */
	int dwarf_get_xu_hash_entry(LibdwarfLibrary.Dwarf_Xu_Index_Header Dwarf_Xu_Index_Header1, long Dwarf_Unsigned1, Dwarf_Sig8_s Dwarf_Sig8Ptr1, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Index values 0 to M-1 are valid.<br>
	 * xuhdr<br>
	 * Original signature : <code>int dwarf_get_xu_hash_entry(Dwarf_Xu_Index_Header, Dwarf_Unsigned, Dwarf_Sig8*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3610</i>
	 */
	int dwarf_get_xu_hash_entry(Pointer Dwarf_Xu_Index_Header1, long Dwarf_Unsigned1, Dwarf_Sig8_s Dwarf_Sig8Ptr1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Columns 0 to L-1,  valid.<br>
	 * xuhdr<br>
	 * Original signature : <code>int dwarf_get_xu_section_names(Dwarf_Xu_Index_Header, Dwarf_Unsigned, Dwarf_Unsigned*, const char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3621</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_xu_section_names(libdwarf.LibdwarfLibrary.Dwarf_Xu_Index_Header, long, java.nio.LongBuffer, java.lang.String[], com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_xu_section_names(com.sun.jna.Pointer, long, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_xu_section_names(Pointer Dwarf_Xu_Index_Header1, long Dwarf_Unsigned1, LongByReference Dwarf_UnsignedPtr1, PointerByReference charPtrPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Columns 0 to L-1,  valid.<br>
	 * xuhdr<br>
	 * Original signature : <code>int dwarf_get_xu_section_names(Dwarf_Xu_Index_Header, Dwarf_Unsigned, Dwarf_Unsigned*, const char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3621</i>
	 */
	int dwarf_get_xu_section_names(LibdwarfLibrary.Dwarf_Xu_Index_Header Dwarf_Xu_Index_Header1, long Dwarf_Unsigned1, LongBuffer Dwarf_UnsignedPtr1, String charPtrPtr1[], PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Columns 0 to L-1,  valid.<br>
	 * xuhdr<br>
	 * Original signature : <code>int dwarf_get_xu_section_names(Dwarf_Xu_Index_Header, Dwarf_Unsigned, Dwarf_Unsigned*, const char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3621</i>
	 */
	int dwarf_get_xu_section_names(Pointer Dwarf_Xu_Index_Header1, long Dwarf_Unsigned1, LongByReference Dwarf_UnsignedPtr1, PointerByReference charPtrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Rows 1 to N col 0 to L-1  are valid<br>
	 * xuhdr<br>
	 * Original signature : <code>int dwarf_get_xu_section_offset(Dwarf_Xu_Index_Header, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3629</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_xu_section_offset(libdwarf.LibdwarfLibrary.Dwarf_Xu_Index_Header, long, long, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_xu_section_offset(com.sun.jna.Pointer, long, long, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_xu_section_offset(Pointer Dwarf_Xu_Index_Header1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, Pointer Dwarf_ErrorPtr1);
	/**
	 * Rows 1 to N col 0 to L-1  are valid<br>
	 * xuhdr<br>
	 * Original signature : <code>int dwarf_get_xu_section_offset(Dwarf_Xu_Index_Header, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3629</i>
	 */
	int dwarf_get_xu_section_offset(LibdwarfLibrary.Dwarf_Xu_Index_Header Dwarf_Xu_Index_Header1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, LongBuffer Dwarf_UnsignedPtr1, LongBuffer Dwarf_UnsignedPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Rows 1 to N col 0 to L-1  are valid<br>
	 * xuhdr<br>
	 * Original signature : <code>int dwarf_get_xu_section_offset(Dwarf_Xu_Index_Header, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3629</i>
	 */
	int dwarf_get_xu_section_offset(Pointer Dwarf_Xu_Index_Header1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * xuhdr<br>
	 * Original signature : <code>void dwarf_xu_header_free(Dwarf_Xu_Index_Header)</code><br>
	 * <i>native declaration : line 3636</i><br>
	 * @deprecated use the safer methods {@link #dwarf_xu_header_free(libdwarf.LibdwarfLibrary.Dwarf_Xu_Index_Header)} and {@link #dwarf_xu_header_free(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void dwarf_xu_header_free(Pointer Dwarf_Xu_Index_Header1);
	/**
	 * xuhdr<br>
	 * Original signature : <code>void dwarf_xu_header_free(Dwarf_Xu_Index_Header)</code><br>
	 * <i>native declaration : line 3636</i>
	 */
	void dwarf_xu_header_free(LibdwarfLibrary.Dwarf_Xu_Index_Header Dwarf_Xu_Index_Header1);
	/**
	 * For any Dwarf_Die in a compilation unit, return<br>
	 * the debug fission table data through<br>
	 * percu_out.   Usually applications<br>
	 * will pass in the CU die.<br>
	 * Calling code should zero all of the<br>
	 * struct Dwarf_Debug_Fission_Per_CU_s before calling this.<br>
	 * If there is no debugfission data this returns<br>
	 * DW_DLV_NO_ENTRY (only .dwp objects have debugfission data).<br>
	 * die<br>
	 * Original signature : <code>int dwarf_get_debugfission_for_die(Dwarf_Die, Dwarf_Debug_Fission_Per_CU*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3677</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_debugfission_for_die(libdwarf.LibdwarfLibrary.Dwarf_Die, libdwarf.Dwarf_Debug_Fission_Per_CU_s, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_debugfission_for_die(com.sun.jna.Pointer, libdwarf.Dwarf_Debug_Fission_Per_CU_s, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_debugfission_for_die(Pointer Dwarf_Die1, Dwarf_Debug_Fission_Per_CU_s Dwarf_Debug_Fission_Per_CUPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * For any Dwarf_Die in a compilation unit, return<br>
	 * the debug fission table data through<br>
	 * percu_out.   Usually applications<br>
	 * will pass in the CU die.<br>
	 * Calling code should zero all of the<br>
	 * struct Dwarf_Debug_Fission_Per_CU_s before calling this.<br>
	 * If there is no debugfission data this returns<br>
	 * DW_DLV_NO_ENTRY (only .dwp objects have debugfission data).<br>
	 * die<br>
	 * Original signature : <code>int dwarf_get_debugfission_for_die(Dwarf_Die, Dwarf_Debug_Fission_Per_CU*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3677</i>
	 */
	int dwarf_get_debugfission_for_die(LibdwarfLibrary.Dwarf_Die Dwarf_Die1, Dwarf_Debug_Fission_Per_CU_s Dwarf_Debug_Fission_Per_CUPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * For any Dwarf_Die in a compilation unit, return<br>
	 * the debug fission table data through<br>
	 * percu_out.   Usually applications<br>
	 * will pass in the CU die.<br>
	 * Calling code should zero all of the<br>
	 * struct Dwarf_Debug_Fission_Per_CU_s before calling this.<br>
	 * If there is no debugfission data this returns<br>
	 * DW_DLV_NO_ENTRY (only .dwp objects have debugfission data).<br>
	 * die<br>
	 * Original signature : <code>int dwarf_get_debugfission_for_die(Dwarf_Die, Dwarf_Debug_Fission_Per_CU*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3677</i>
	 */
	int dwarf_get_debugfission_for_die(Pointer Dwarf_Die1, Dwarf_Debug_Fission_Per_CU_s Dwarf_Debug_Fission_Per_CUPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Given a key (hash signature)  from a .o, find the per-cu information<br>
	 * for the CU with that key.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_debugfission_for_key(Dwarf_Debug, Dwarf_Sig8*, const char*, Dwarf_Debug_Fission_Per_CU*, Dwarf_Error*)</code><br>
	 * @param key_type "cu" or "tu"<br>
	 * <i>native declaration : line 3683</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_debugfission_for_key(libdwarf.LibdwarfLibrary.Dwarf_Debug, libdwarf.Dwarf_Sig8_s, java.lang.String, libdwarf.Dwarf_Debug_Fission_Per_CU_s, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_debugfission_for_key(com.sun.jna.Pointer, libdwarf.Dwarf_Sig8_s, com.sun.jna.Pointer, libdwarf.Dwarf_Debug_Fission_Per_CU_s, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_debugfission_for_key(Pointer Dwarf_Debug1, Dwarf_Sig8_s Dwarf_Sig8Ptr1, Pointer key_type, Dwarf_Debug_Fission_Per_CU_s Dwarf_Debug_Fission_Per_CUPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Given a key (hash signature)  from a .o, find the per-cu information<br>
	 * for the CU with that key.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_debugfission_for_key(Dwarf_Debug, Dwarf_Sig8*, const char*, Dwarf_Debug_Fission_Per_CU*, Dwarf_Error*)</code><br>
	 * @param key_type "cu" or "tu"<br>
	 * <i>native declaration : line 3683</i>
	 */
	int dwarf_get_debugfission_for_key(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, Dwarf_Sig8_s Dwarf_Sig8Ptr1, String key_type, Dwarf_Debug_Fission_Per_CU_s Dwarf_Debug_Fission_Per_CUPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Given a key (hash signature)  from a .o, find the per-cu information<br>
	 * for the CU with that key.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_debugfission_for_key(Dwarf_Debug, Dwarf_Sig8*, const char*, Dwarf_Debug_Fission_Per_CU*, Dwarf_Error*)</code><br>
	 * @param key_type "cu" or "tu"<br>
	 * <i>native declaration : line 3683</i>
	 */
	int dwarf_get_debugfission_for_key(Pointer Dwarf_Debug1, Dwarf_Sig8_s Dwarf_Sig8Ptr1, Pointer key_type, Dwarf_Debug_Fission_Per_CU_s Dwarf_Debug_Fission_Per_CUPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Utility operations<br>
	 * error<br>
	 * Original signature : <code>Dwarf_Unsigned dwarf_errno(Dwarf_Error)</code><br>
	 * <i>native declaration : line 3693</i><br>
	 * @deprecated use the safer methods {@link #dwarf_errno(libdwarf.LibdwarfLibrary.Dwarf_Error)} and {@link #dwarf_errno(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	long dwarf_errno(Pointer Dwarf_Error1);
	/**
	 * Utility operations<br>
	 * error<br>
	 * Original signature : <code>Dwarf_Unsigned dwarf_errno(Dwarf_Error)</code><br>
	 * <i>native declaration : line 3693</i>
	 */
	long dwarf_errno(LibdwarfLibrary.Dwarf_Error Dwarf_Error1);
	/**
	 * error<br>
	 * Original signature : <code>char* dwarf_errmsg(Dwarf_Error)</code><br>
	 * <i>native declaration : line 3694</i><br>
	 * @deprecated use the safer methods {@link #dwarf_errmsg(libdwarf.LibdwarfLibrary.Dwarf_Error)} and {@link #dwarf_errmsg(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	String dwarf_errmsg(Pointer Dwarf_Error1);
	/**
	 * error<br>
	 * Original signature : <code>char* dwarf_errmsg(Dwarf_Error)</code><br>
	 * <i>native declaration : line 3694</i>
	 */
	String dwarf_errmsg(LibdwarfLibrary.Dwarf_Error Dwarf_Error1);
	/**
	 * errornum<br>
	 * Original signature : <code>char* dwarf_errmsg_by_number(Dwarf_Unsigned)</code><br>
	 * <i>native declaration : line 3695</i>
	 */
	Pointer dwarf_errmsg_by_number(long Dwarf_Unsigned1);
	/**
	 * dbg<br>
	 * Original signature : <code>void dwarf_error_creation(Dwarf_Debug, Dwarf_Error*, char*)</code><br>
	 * @param Dwarf_ErrorPtr1 errmsg<br>
	 * <i>native declaration : line 3696</i><br>
	 * @deprecated use the safer methods {@link #dwarf_error_creation(libdwarf.LibdwarfLibrary.Dwarf_Debug, com.sun.jna.ptr.PointerByReference, java.nio.ByteBuffer)} and {@link #dwarf_error_creation(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void dwarf_error_creation(Pointer Dwarf_Debug1, Pointer Dwarf_ErrorPtr1, Pointer charPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>void dwarf_error_creation(Dwarf_Debug, Dwarf_Error*, char*)</code><br>
	 * @param Dwarf_ErrorPtr1 errmsg<br>
	 * <i>native declaration : line 3696</i>
	 */
	void dwarf_error_creation(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, PointerByReference Dwarf_ErrorPtr1, ByteBuffer charPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>void dwarf_error_creation(Dwarf_Debug, Dwarf_Error*, char*)</code><br>
	 * @param Dwarf_ErrorPtr1 errmsg<br>
	 * <i>native declaration : line 3696</i>
	 */
	void dwarf_error_creation(Pointer Dwarf_Debug1, PointerByReference Dwarf_ErrorPtr1, Pointer charPtr1);
	/**
	 * stringcheck zero is default and means do all<br>
	 * string length validity checks.<br>
	 * Call with parameter value 1 to turn off many such checks (and<br>
	 * increase performance).<br>
	 * Call with zero for safest running.<br>
	 * Actual value saved and returned is only 8 bits! Upper bits<br>
	 * ignored by libdwarf (and zero on return).<br>
	 * Returns previous value.<br>
	 * stringcheck<br>
	 * Original signature : <code>int dwarf_set_stringcheck(int)</code><br>
	 * <i>native declaration : line 3708</i>
	 */
	int dwarf_set_stringcheck(int int1);
	/**
	 * 'apply' defaults to 1 and means do all<br>
	 * 'rela' relocations on reading in a dwarf object section with<br>
	 * such relocations.<br>
	 * Call with parameter value 0 to turn off application of<br>
	 * such relocations.<br>
	 * Since the static linker leaves 'bogus' data in object sections<br>
	 * with a 'rela' relocation section such data cannot be read<br>
	 * sensibly without processing the relocations.  Such relocations<br>
	 * do not exist in executables and shared objects (.so), the<br>
	 * relocations only exist in plain .o relocatable object files.<br>
	 * Actual value saved and returned is only 8 bits! Upper bits<br>
	 * ignored by libdwarf (and zero on return).<br>
	 * Returns previous value.<br>
	 * apply<br>
	 * Original signature : <code>int dwarf_set_reloc_application(int)</code><br>
	 * <i>native declaration : line 3723</i>
	 */
	int dwarf_set_reloc_application(int int1);
	/**
	 * Never Implemented<br>
	 * dbg<br>
	 * Original signature : <code>Dwarf_Handler dwarf_seterrhand(Dwarf_Debug, Dwarf_Handler)</code><br>
	 * <i>native declaration : line 3726</i><br>
	 * @deprecated use the safer methods {@link #dwarf_seterrhand(libdwarf.LibdwarfLibrary.Dwarf_Debug, libdwarf.LibdwarfLibrary.Dwarf_Handler)} and {@link #dwarf_seterrhand(com.sun.jna.Pointer, libdwarf.LibdwarfLibrary.Dwarf_Handler)} instead
	 */
	@Deprecated 
	LibdwarfLibrary.Dwarf_Handler dwarf_seterrhand(Pointer Dwarf_Debug1, LibdwarfLibrary.Dwarf_Handler Dwarf_Handler1);
	/**
	 * Never Implemented<br>
	 * dbg<br>
	 * Original signature : <code>Dwarf_Handler dwarf_seterrhand(Dwarf_Debug, Dwarf_Handler)</code><br>
	 * <i>native declaration : line 3726</i>
	 */
	LibdwarfLibrary.Dwarf_Handler dwarf_seterrhand(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, LibdwarfLibrary.Dwarf_Handler Dwarf_Handler1);
	/**
	 * Unimplemented<br>
	 * dbg<br>
	 * Original signature : <code>Dwarf_Ptr dwarf_seterrarg(Dwarf_Debug, Dwarf_Ptr)</code><br>
	 * @param Dwarf_Debug1 errarg<br>
	 * <i>native declaration : line 3730</i><br>
	 * @deprecated use the safer methods {@link #dwarf_seterrarg(libdwarf.LibdwarfLibrary.Dwarf_Debug, com.sun.jna.Pointer)} and {@link #dwarf_seterrarg(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer dwarf_seterrarg(Pointer Dwarf_Debug1, Pointer Dwarf_Ptr1);
	/**
	 * Unimplemented<br>
	 * dbg<br>
	 * Original signature : <code>Dwarf_Ptr dwarf_seterrarg(Dwarf_Debug, Dwarf_Ptr)</code><br>
	 * @param Dwarf_Debug1 errarg<br>
	 * <i>native declaration : line 3730</i>
	 */
	Pointer dwarf_seterrarg(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, Pointer Dwarf_Ptr1);
	/**
	 * dbg<br>
	 * Original signature : <code>void dwarf_dealloc(Dwarf_Debug, void*, Dwarf_Unsigned)</code><br>
	 * @param Dwarf_Debug1 space<br>
	 * <i>native declaration : line 3732</i><br>
	 * @deprecated use the safer methods {@link #dwarf_dealloc(libdwarf.LibdwarfLibrary.Dwarf_Debug, com.sun.jna.Pointer, long)} and {@link #dwarf_dealloc(com.sun.jna.Pointer, com.sun.jna.Pointer, long)} instead
	 */
	@Deprecated 
	void dwarf_dealloc(Pointer Dwarf_Debug1, Pointer voidPtr1, long Dwarf_Unsigned1);
	/**
	 * dbg<br>
	 * Original signature : <code>void dwarf_dealloc(Dwarf_Debug, void*, Dwarf_Unsigned)</code><br>
	 * @param Dwarf_Debug1 space<br>
	 * <i>native declaration : line 3732</i>
	 */
	void dwarf_dealloc(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, Pointer voidPtr1, long Dwarf_Unsigned1);
	/**
	 * These convenience functions allow type checking at the call,<br>
	 * whereas dwarf_dealloc itself uses void * so ...<br>
	 * easy to misuse.<br>
	 * dbg<br>
	 * Original signature : <code>void dwarf_dealloc_error(Dwarf_Debug, Dwarf_Error)</code><br>
	 * @param Dwarf_Debug1 err<br>
	 * <i>native declaration : line 3737</i><br>
	 * @deprecated use the safer methods {@link #dwarf_dealloc_error(libdwarf.LibdwarfLibrary.Dwarf_Debug, libdwarf.LibdwarfLibrary.Dwarf_Error)} and {@link #dwarf_dealloc_error(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void dwarf_dealloc_error(Pointer Dwarf_Debug1, Pointer Dwarf_Error1);
	/**
	 * These convenience functions allow type checking at the call,<br>
	 * whereas dwarf_dealloc itself uses void * so ...<br>
	 * easy to misuse.<br>
	 * dbg<br>
	 * Original signature : <code>void dwarf_dealloc_error(Dwarf_Debug, Dwarf_Error)</code><br>
	 * @param Dwarf_Debug1 err<br>
	 * <i>native declaration : line 3737</i>
	 */
	void dwarf_dealloc_error(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, LibdwarfLibrary.Dwarf_Error Dwarf_Error1);
	/**
	 * die<br>
	 * Original signature : <code>void dwarf_dealloc_die(Dwarf_Die)</code><br>
	 * <i>native declaration : line 3738</i><br>
	 * @deprecated use the safer methods {@link #dwarf_dealloc_die(libdwarf.LibdwarfLibrary.Dwarf_Die)} and {@link #dwarf_dealloc_die(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void dwarf_dealloc_die(Pointer Dwarf_Die1);
	/**
	 * die<br>
	 * Original signature : <code>void dwarf_dealloc_die(Dwarf_Die)</code><br>
	 * <i>native declaration : line 3738</i>
	 */
	void dwarf_dealloc_die(LibdwarfLibrary.Dwarf_Die Dwarf_Die1);
	/**
	 * attr<br>
	 * Original signature : <code>void dwarf_dealloc_attribute(Dwarf_Attribute)</code><br>
	 * <i>native declaration : line 3739</i><br>
	 * @deprecated use the safer methods {@link #dwarf_dealloc_attribute(libdwarf.LibdwarfLibrary.Dwarf_Attribute)} and {@link #dwarf_dealloc_attribute(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void dwarf_dealloc_attribute(Pointer Dwarf_Attribute1);
	/**
	 * attr<br>
	 * Original signature : <code>void dwarf_dealloc_attribute(Dwarf_Attribute)</code><br>
	 * <i>native declaration : line 3739</i>
	 */
	void dwarf_dealloc_attribute(LibdwarfLibrary.Dwarf_Attribute Dwarf_Attribute1);
	/**
	 * Returns DW_DLV_OK or DW_DLV_ERROR and<br>
	 * if DW_DLV_OK returns the Dwarf_P_Debug<br>
	 * pointer through the dbg_returned argument.<br>
	 * Original signature : <code>int dwarf_producer_init(Dwarf_Unsigned, Dwarf_Callback_Func, Dwarf_Handler, Dwarf_Ptr, void*, const char*, const char*, const char*, Dwarf_P_Debug*, Dwarf_Error*)</code><br>
	 * @param isa_name See isa/abi names in pro_init.c<br>
	 * @param dwarf_version V2 V3 V4 or V5.<br>
	 * @param extra Extra input strings, comma separated.<br>
	 * @param Dwarf_P_DebugPtr1 dbg_returned<br>
	 * <i>native declaration : line 3759</i><br>
	 * @deprecated use the safer methods {@link #dwarf_producer_init(long, libdwarf.LibdwarfLibrary.Dwarf_Callback_Func, libdwarf.LibdwarfLibrary.Dwarf_Handler, com.sun.jna.Pointer, com.sun.jna.Pointer, java.lang.String, java.lang.String, java.lang.String, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_producer_init(long, libdwarf.LibdwarfLibrary.Dwarf_Callback_Func, libdwarf.LibdwarfLibrary.Dwarf_Handler, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_producer_init(long Dwarf_Unsigned1, LibdwarfLibrary.Dwarf_Callback_Func Dwarf_Callback_Func1, LibdwarfLibrary.Dwarf_Handler Dwarf_Handler1, Pointer Dwarf_Ptr1, Pointer voidPtr1, Pointer isa_name, Pointer dwarf_version, Pointer extra, Pointer Dwarf_P_DebugPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Returns DW_DLV_OK or DW_DLV_ERROR and<br>
	 * if DW_DLV_OK returns the Dwarf_P_Debug<br>
	 * pointer through the dbg_returned argument.<br>
	 * Original signature : <code>int dwarf_producer_init(Dwarf_Unsigned, Dwarf_Callback_Func, Dwarf_Handler, Dwarf_Ptr, void*, const char*, const char*, const char*, Dwarf_P_Debug*, Dwarf_Error*)</code><br>
	 * @param isa_name See isa/abi names in pro_init.c<br>
	 * @param dwarf_version V2 V3 V4 or V5.<br>
	 * @param extra Extra input strings, comma separated.<br>
	 * @param Dwarf_P_DebugPtr1 dbg_returned<br>
	 * <i>native declaration : line 3759</i>
	 */
	int dwarf_producer_init(long Dwarf_Unsigned1, LibdwarfLibrary.Dwarf_Callback_Func Dwarf_Callback_Func1, LibdwarfLibrary.Dwarf_Handler Dwarf_Handler1, Pointer Dwarf_Ptr1, Pointer voidPtr1, String isa_name, String dwarf_version, String extra, PointerByReference Dwarf_P_DebugPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Returns DW_DLV_OK or DW_DLV_ERROR and<br>
	 * if DW_DLV_OK returns the Dwarf_P_Debug<br>
	 * pointer through the dbg_returned argument.<br>
	 * Original signature : <code>int dwarf_producer_init(Dwarf_Unsigned, Dwarf_Callback_Func, Dwarf_Handler, Dwarf_Ptr, void*, const char*, const char*, const char*, Dwarf_P_Debug*, Dwarf_Error*)</code><br>
	 * @param isa_name See isa/abi names in pro_init.c<br>
	 * @param dwarf_version V2 V3 V4 or V5.<br>
	 * @param extra Extra input strings, comma separated.<br>
	 * @param Dwarf_P_DebugPtr1 dbg_returned<br>
	 * <i>native declaration : line 3759</i>
	 */
	int dwarf_producer_init(long Dwarf_Unsigned1, LibdwarfLibrary.Dwarf_Callback_Func Dwarf_Callback_Func1, LibdwarfLibrary.Dwarf_Handler Dwarf_Handler1, Pointer Dwarf_Ptr1, Pointer voidPtr1, Pointer isa_name, Pointer dwarf_version, Pointer extra, PointerByReference Dwarf_P_DebugPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Returns DW_DLV_OK or DW_DLV_ERROR.<br>
	 * The desired form must be DW_FORM_string (the default)<br>
	 * or DW_FORM_strp.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_pro_set_default_string_form(Dwarf_P_Debug, int, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3774</i><br>
	 * @deprecated use the safer methods {@link #dwarf_pro_set_default_string_form(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, int, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_pro_set_default_string_form(com.sun.jna.Pointer, int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_pro_set_default_string_form(Pointer Dwarf_P_Debug1, int int1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Returns DW_DLV_OK or DW_DLV_ERROR.<br>
	 * The desired form must be DW_FORM_string (the default)<br>
	 * or DW_FORM_strp.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_pro_set_default_string_form(Dwarf_P_Debug, int, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3774</i>
	 */
	int dwarf_pro_set_default_string_form(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, int int1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Returns DW_DLV_OK or DW_DLV_ERROR.<br>
	 * The desired form must be DW_FORM_string (the default)<br>
	 * or DW_FORM_strp.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_pro_set_default_string_form(Dwarf_P_Debug, int, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3774</i>
	 */
	int dwarf_pro_set_default_string_form(Pointer Dwarf_P_Debug1, int int1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * the old interface. Still supported.<br>
	 * dbg<br>
	 * Original signature : <code>Dwarf_Signed dwarf_transform_to_disk_form(Dwarf_P_Debug, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3779</i><br>
	 * @deprecated use the safer methods {@link #dwarf_transform_to_disk_form(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_transform_to_disk_form(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	long dwarf_transform_to_disk_form(Pointer Dwarf_P_Debug1, Pointer Dwarf_ErrorPtr1);
	/**
	 * the old interface. Still supported.<br>
	 * dbg<br>
	 * Original signature : <code>Dwarf_Signed dwarf_transform_to_disk_form(Dwarf_P_Debug, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3779</i>
	 */
	long dwarf_transform_to_disk_form(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * the old interface. Still supported.<br>
	 * dbg<br>
	 * Original signature : <code>Dwarf_Signed dwarf_transform_to_disk_form(Dwarf_P_Debug, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3779</i>
	 */
	long dwarf_transform_to_disk_form(Pointer Dwarf_P_Debug1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New September 2016. The preferred interface.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_transform_to_disk_form_a(Dwarf_P_Debug, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3782</i><br>
	 * @deprecated use the safer methods {@link #dwarf_transform_to_disk_form_a(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_transform_to_disk_form_a(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_transform_to_disk_form_a(Pointer Dwarf_P_Debug1, LongByReference Dwarf_SignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * New September 2016. The preferred interface.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_transform_to_disk_form_a(Dwarf_P_Debug, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3782</i>
	 */
	int dwarf_transform_to_disk_form_a(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, LongBuffer Dwarf_SignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New September 2016. The preferred interface.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_transform_to_disk_form_a(Dwarf_P_Debug, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3782</i>
	 */
	int dwarf_transform_to_disk_form_a(Pointer Dwarf_P_Debug1, LongByReference Dwarf_SignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New September 2016. Preferred.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_section_bytes_a(Dwarf_P_Debug, Dwarf_Signed, Dwarf_Signed*, Dwarf_Unsigned*, Dwarf_Ptr*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3787</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_section_bytes_a(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, long, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_section_bytes_a(com.sun.jna.Pointer, long, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_section_bytes_a(Pointer Dwarf_P_Debug1, long Dwarf_Signed1, LongByReference Dwarf_SignedPtr1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_PtrPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * New September 2016. Preferred.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_section_bytes_a(Dwarf_P_Debug, Dwarf_Signed, Dwarf_Signed*, Dwarf_Unsigned*, Dwarf_Ptr*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3787</i>
	 */
	int dwarf_get_section_bytes_a(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, long Dwarf_Signed1, LongBuffer Dwarf_SignedPtr1, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_PtrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New September 2016. Preferred.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_section_bytes_a(Dwarf_P_Debug, Dwarf_Signed, Dwarf_Signed*, Dwarf_Unsigned*, Dwarf_Ptr*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3787</i>
	 */
	int dwarf_get_section_bytes_a(Pointer Dwarf_P_Debug1, long Dwarf_Signed1, LongByReference Dwarf_SignedPtr1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_PtrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original function.  Checking for error is difficult.<br>
	 * dbg<br>
	 * Original signature : <code>Dwarf_Ptr dwarf_get_section_bytes(Dwarf_P_Debug, Dwarf_Signed, Dwarf_Signed*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3795</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_section_bytes(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, long, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_section_bytes(com.sun.jna.Pointer, long, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	Pointer dwarf_get_section_bytes(Pointer Dwarf_P_Debug1, long Dwarf_Signed1, LongByReference Dwarf_SignedPtr1, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Original function.  Checking for error is difficult.<br>
	 * dbg<br>
	 * Original signature : <code>Dwarf_Ptr dwarf_get_section_bytes(Dwarf_P_Debug, Dwarf_Signed, Dwarf_Signed*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3795</i>
	 */
	Pointer dwarf_get_section_bytes(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, long Dwarf_Signed1, LongBuffer Dwarf_SignedPtr1, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original function.  Checking for error is difficult.<br>
	 * dbg<br>
	 * Original signature : <code>Dwarf_Ptr dwarf_get_section_bytes(Dwarf_P_Debug, Dwarf_Signed, Dwarf_Signed*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3795</i>
	 */
	Pointer dwarf_get_section_bytes(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, long Dwarf_Signed1, LongByReference Dwarf_SignedPtr1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original function.  Checking for error is difficult.<br>
	 * dbg<br>
	 * Original signature : <code>Dwarf_Ptr dwarf_get_section_bytes(Dwarf_P_Debug, Dwarf_Signed, Dwarf_Signed*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3795</i>
	 */
	Pointer dwarf_get_section_bytes(Pointer Dwarf_P_Debug1, long Dwarf_Signed1, LongByReference Dwarf_SignedPtr1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>int dwarf_get_relocation_info_count(Dwarf_P_Debug, Dwarf_Unsigned*, int*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3801</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_relocation_info_count(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, java.nio.LongBuffer, java.nio.IntBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_relocation_info_count(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_relocation_info_count(Pointer Dwarf_P_Debug1, LongByReference Dwarf_UnsignedPtr1, IntByReference intPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>int dwarf_get_relocation_info_count(Dwarf_P_Debug, Dwarf_Unsigned*, int*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3801</i>
	 */
	int dwarf_get_relocation_info_count(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, LongBuffer Dwarf_UnsignedPtr1, IntBuffer intPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>int dwarf_get_relocation_info_count(Dwarf_P_Debug, Dwarf_Unsigned*, int*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3801</i>
	 */
	int dwarf_get_relocation_info_count(Pointer Dwarf_P_Debug1, LongByReference Dwarf_UnsignedPtr1, IntByReference intPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>int dwarf_get_relocation_info(Dwarf_P_Debug, Dwarf_Signed*, Dwarf_Signed*, Dwarf_Unsigned*, Dwarf_Relocation_Data*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3807</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_relocation_info(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, libdwarf.Dwarf_Relocation_Data_s.ByReference[], com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_relocation_info(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, libdwarf.Dwarf_Relocation_Data_s.ByReference[], com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_relocation_info(Pointer Dwarf_P_Debug1, LongByReference Dwarf_SignedPtr1, LongByReference Dwarf_SignedPtr2, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_Relocation_DataPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>int dwarf_get_relocation_info(Dwarf_P_Debug, Dwarf_Signed*, Dwarf_Signed*, Dwarf_Unsigned*, Dwarf_Relocation_Data*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3807</i>
	 */
	int dwarf_get_relocation_info(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, LongBuffer Dwarf_SignedPtr1, LongBuffer Dwarf_SignedPtr2, LongBuffer Dwarf_UnsignedPtr1, libdwarf.Dwarf_Relocation_Data_s.ByReference Dwarf_Relocation_DataPtr1[], PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>int dwarf_get_relocation_info(Dwarf_P_Debug, Dwarf_Signed*, Dwarf_Signed*, Dwarf_Unsigned*, Dwarf_Relocation_Data*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3807</i>
	 */
	int dwarf_get_relocation_info(Pointer Dwarf_P_Debug1, LongByReference Dwarf_SignedPtr1, LongByReference Dwarf_SignedPtr2, LongByReference Dwarf_UnsignedPtr1, libdwarf.Dwarf_Relocation_Data_s.ByReference Dwarf_Relocation_DataPtr1[], PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Markers are not written  to DWARF2/3/4, they are user<br>
	 * defined and may be used for any purpose.<br>
	 * Original signature : <code>Dwarf_Signed dwarf_get_die_markers(Dwarf_P_Debug, Dwarf_P_Marker*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3822</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_die_markers(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, libdwarf.Dwarf_P_Marker_s.ByReference[], java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_die_markers(com.sun.jna.Pointer, libdwarf.Dwarf_P_Marker_s.ByReference[], com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	long dwarf_get_die_markers(Pointer Dwarf_P_Debug1, PointerByReference Dwarf_P_MarkerPtr1, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Markers are not written  to DWARF2/3/4, they are user<br>
	 * defined and may be used for any purpose.<br>
	 * Original signature : <code>Dwarf_Signed dwarf_get_die_markers(Dwarf_P_Debug, Dwarf_P_Marker*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3822</i>
	 */
	long dwarf_get_die_markers(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, libdwarf.Dwarf_P_Marker_s.ByReference Dwarf_P_MarkerPtr1[], LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Markers are not written  to DWARF2/3/4, they are user<br>
	 * defined and may be used for any purpose.<br>
	 * Original signature : <code>Dwarf_Signed dwarf_get_die_markers(Dwarf_P_Debug, Dwarf_P_Marker*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3822</i>
	 */
	long dwarf_get_die_markers(Pointer Dwarf_P_Debug1, libdwarf.Dwarf_P_Marker_s.ByReference Dwarf_P_MarkerPtr1[], LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Preferred version December 2018.<br>
	 * Original signature : <code>int dwarf_get_die_markers_a(Dwarf_P_Debug, Dwarf_P_Marker*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3829</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_die_markers_a(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, libdwarf.Dwarf_P_Marker_s.ByReference[], java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_die_markers_a(com.sun.jna.Pointer, libdwarf.Dwarf_P_Marker_s.ByReference[], com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_die_markers_a(Pointer Dwarf_P_Debug1, PointerByReference Dwarf_P_MarkerPtr1, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Preferred version December 2018.<br>
	 * Original signature : <code>int dwarf_get_die_markers_a(Dwarf_P_Debug, Dwarf_P_Marker*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3829</i>
	 */
	int dwarf_get_die_markers_a(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, libdwarf.Dwarf_P_Marker_s.ByReference Dwarf_P_MarkerPtr1[], LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Preferred version December 2018.<br>
	 * Original signature : <code>int dwarf_get_die_markers_a(Dwarf_P_Debug, Dwarf_P_Marker*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3829</i>
	 */
	int dwarf_get_die_markers_a(Pointer Dwarf_P_Debug1, libdwarf.Dwarf_P_Marker_s.ByReference Dwarf_P_MarkerPtr1[], LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>int dwarf_get_string_attributes_count(Dwarf_P_Debug, Dwarf_Unsigned*, int*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3835</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_string_attributes_count(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, java.nio.LongBuffer, java.nio.IntBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_string_attributes_count(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_string_attributes_count(Pointer Dwarf_P_Debug1, LongByReference Dwarf_UnsignedPtr1, IntByReference intPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>int dwarf_get_string_attributes_count(Dwarf_P_Debug, Dwarf_Unsigned*, int*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3835</i>
	 */
	int dwarf_get_string_attributes_count(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, LongBuffer Dwarf_UnsignedPtr1, IntBuffer intPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>int dwarf_get_string_attributes_count(Dwarf_P_Debug, Dwarf_Unsigned*, int*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3835</i>
	 */
	int dwarf_get_string_attributes_count(Pointer Dwarf_P_Debug1, LongByReference Dwarf_UnsignedPtr1, IntByReference intPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>int dwarf_get_string_attributes_info(Dwarf_P_Debug, Dwarf_Signed*, Dwarf_Unsigned*, Dwarf_P_String_Attr*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3840</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_string_attributes_info(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, java.nio.LongBuffer, java.nio.LongBuffer, libdwarf.Dwarf_P_String_Attr_s.ByReference[], com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_string_attributes_info(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, libdwarf.Dwarf_P_String_Attr_s.ByReference[], com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_string_attributes_info(Pointer Dwarf_P_Debug1, LongByReference Dwarf_SignedPtr1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_P_String_AttrPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>int dwarf_get_string_attributes_info(Dwarf_P_Debug, Dwarf_Signed*, Dwarf_Unsigned*, Dwarf_P_String_Attr*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3840</i>
	 */
	int dwarf_get_string_attributes_info(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, LongBuffer Dwarf_SignedPtr1, LongBuffer Dwarf_UnsignedPtr1, libdwarf.Dwarf_P_String_Attr_s.ByReference Dwarf_P_String_AttrPtr1[], PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>int dwarf_get_string_attributes_info(Dwarf_P_Debug, Dwarf_Signed*, Dwarf_Unsigned*, Dwarf_P_String_Attr*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3840</i>
	 */
	int dwarf_get_string_attributes_info(Pointer Dwarf_P_Debug1, LongByReference Dwarf_SignedPtr1, LongByReference Dwarf_UnsignedPtr1, libdwarf.Dwarf_P_String_Attr_s.ByReference Dwarf_P_String_AttrPtr1[], PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>void dwarf_reset_section_bytes(Dwarf_P_Debug)</code><br>
	 * <i>native declaration : line 3846</i><br>
	 * @deprecated use the safer methods {@link #dwarf_reset_section_bytes(libdwarf.LibdwarfLibrary.Dwarf_P_Debug)} and {@link #dwarf_reset_section_bytes(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void dwarf_reset_section_bytes(Pointer Dwarf_P_Debug1);
	/**
	 * dbg<br>
	 * Original signature : <code>void dwarf_reset_section_bytes(Dwarf_P_Debug)</code><br>
	 * <i>native declaration : line 3846</i>
	 */
	void dwarf_reset_section_bytes(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1);
	/**
	 * dbg<br>
	 * Original signature : <code>Dwarf_Unsigned dwarf_producer_finish(Dwarf_P_Debug, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3848</i><br>
	 * @deprecated use the safer methods {@link #dwarf_producer_finish(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_producer_finish(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	long dwarf_producer_finish(Pointer Dwarf_P_Debug1, Pointer Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>Dwarf_Unsigned dwarf_producer_finish(Dwarf_P_Debug, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3848</i>
	 */
	long dwarf_producer_finish(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>Dwarf_Unsigned dwarf_producer_finish(Dwarf_P_Debug, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3848</i>
	 */
	long dwarf_producer_finish(Pointer Dwarf_P_Debug1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Returns DW_DLV_OK or DW_DLV_ERROR<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_producer_finish_a(Dwarf_P_Debug, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3852</i><br>
	 * @deprecated use the safer methods {@link #dwarf_producer_finish_a(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_producer_finish_a(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_producer_finish_a(Pointer Dwarf_P_Debug1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Returns DW_DLV_OK or DW_DLV_ERROR<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_producer_finish_a(Dwarf_P_Debug, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3852</i>
	 */
	int dwarf_producer_finish_a(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Returns DW_DLV_OK or DW_DLV_ERROR<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_producer_finish_a(Dwarf_P_Debug, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3852</i>
	 */
	int dwarf_producer_finish_a(Pointer Dwarf_P_Debug1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New July 2020 for testing DWARF5<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_add_debug_sup(Dwarf_P_Debug, Dwarf_Half, Dwarf_Small, char*, Dwarf_Unsigned, Dwarf_Small*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3856</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_debug_sup(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, short, byte, java.nio.ByteBuffer, long, java.nio.ByteBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_debug_sup(com.sun.jna.Pointer, short, byte, com.sun.jna.Pointer, long, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_add_debug_sup(Pointer Dwarf_P_Debug1, short Dwarf_Half1, byte Dwarf_Small1, Pointer charPtr1, long Dwarf_Unsigned1, Pointer Dwarf_SmallPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * New July 2020 for testing DWARF5<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_add_debug_sup(Dwarf_P_Debug, Dwarf_Half, Dwarf_Small, char*, Dwarf_Unsigned, Dwarf_Small*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3856</i>
	 */
	int dwarf_add_debug_sup(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, short Dwarf_Half1, byte Dwarf_Small1, ByteBuffer charPtr1, long Dwarf_Unsigned1, ByteBuffer Dwarf_SmallPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New July 2020 for testing DWARF5<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_add_debug_sup(Dwarf_P_Debug, Dwarf_Half, Dwarf_Small, char*, Dwarf_Unsigned, Dwarf_Small*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3856</i>
	 */
	int dwarf_add_debug_sup(Pointer Dwarf_P_Debug1, short Dwarf_Half1, byte Dwarf_Small1, Pointer charPtr1, long Dwarf_Unsigned1, Pointer Dwarf_SmallPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Producer attribute addition functions.<br>
	 * dbg<br>
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_targ_address(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, Dwarf_Unsigned, Dwarf_Signed, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3865</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_AT_targ_address(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, libdwarf.LibdwarfLibrary.Dwarf_P_Die, short, long, long, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_AT_targ_address(com.sun.jna.Pointer, com.sun.jna.Pointer, short, long, long, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_targ_address(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, short Dwarf_Half1, long Dwarf_Unsigned1, long Dwarf_Signed1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Producer attribute addition functions.<br>
	 * dbg<br>
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_targ_address(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, Dwarf_Unsigned, Dwarf_Signed, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3865</i>
	 */
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_targ_address(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, short Dwarf_Half1, long Dwarf_Unsigned1, long Dwarf_Signed1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Producer attribute addition functions.<br>
	 * dbg<br>
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_targ_address(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, Dwarf_Unsigned, Dwarf_Signed, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3865</i>
	 */
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_targ_address(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, short Dwarf_Half1, long Dwarf_Unsigned1, long Dwarf_Signed1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_targ_address_b(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3871</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_AT_targ_address_b(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, libdwarf.LibdwarfLibrary.Dwarf_P_Die, short, long, long, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_AT_targ_address_b(com.sun.jna.Pointer, com.sun.jna.Pointer, short, long, long, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_targ_address_b(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, short Dwarf_Half1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, Pointer Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_targ_address_b(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3871</i>
	 */
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_targ_address_b(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, short Dwarf_Half1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_targ_address_b(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3871</i>
	 */
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_targ_address_b(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, short Dwarf_Half1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_add_AT_targ_address_c(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_P_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3879</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_AT_targ_address_c(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, libdwarf.LibdwarfLibrary.Dwarf_P_Die, short, long, long, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_AT_targ_address_c(com.sun.jna.Pointer, com.sun.jna.Pointer, short, long, long, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_add_AT_targ_address_c(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, short Dwarf_Half1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, Pointer Dwarf_P_AttributePtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_add_AT_targ_address_c(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_P_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3879</i>
	 */
	int dwarf_add_AT_targ_address_c(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, short Dwarf_Half1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, PointerByReference Dwarf_P_AttributePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_add_AT_targ_address_c(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_P_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3879</i>
	 */
	int dwarf_add_AT_targ_address_c(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, short Dwarf_Half1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, PointerByReference Dwarf_P_AttributePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_add_AT_block_a(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, Dwarf_Small*, Dwarf_Unsigned, Dwarf_P_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3888</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_AT_block_a(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, libdwarf.LibdwarfLibrary.Dwarf_P_Die, short, java.nio.ByteBuffer, long, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_AT_block_a(com.sun.jna.Pointer, com.sun.jna.Pointer, short, com.sun.jna.Pointer, long, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_add_AT_block_a(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, short Dwarf_Half1, Pointer Dwarf_SmallPtr1, long Dwarf_Unsigned1, Pointer Dwarf_P_AttributePtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_add_AT_block_a(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, Dwarf_Small*, Dwarf_Unsigned, Dwarf_P_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3888</i>
	 */
	int dwarf_add_AT_block_a(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, short Dwarf_Half1, ByteBuffer Dwarf_SmallPtr1, long Dwarf_Unsigned1, PointerByReference Dwarf_P_AttributePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_add_AT_block_a(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, Dwarf_Small*, Dwarf_Unsigned, Dwarf_P_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3888</i>
	 */
	int dwarf_add_AT_block_a(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, short Dwarf_Half1, Pointer Dwarf_SmallPtr1, long Dwarf_Unsigned1, PointerByReference Dwarf_P_AttributePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_block(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, Dwarf_Small*, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3896</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_AT_block(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, libdwarf.LibdwarfLibrary.Dwarf_P_Die, short, java.nio.ByteBuffer, long, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_AT_block(com.sun.jna.Pointer, com.sun.jna.Pointer, short, com.sun.jna.Pointer, long, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_block(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, short Dwarf_Half1, Pointer Dwarf_SmallPtr1, long Dwarf_Unsigned1, Pointer Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_block(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, Dwarf_Small*, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3896</i>
	 */
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_block(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, short Dwarf_Half1, ByteBuffer Dwarf_SmallPtr1, long Dwarf_Unsigned1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_block(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, Dwarf_Small*, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3896</i>
	 */
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_block(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, short Dwarf_Half1, Pointer Dwarf_SmallPtr1, long Dwarf_Unsigned1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_ref_address(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3903</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_AT_ref_address(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, libdwarf.LibdwarfLibrary.Dwarf_P_Die, short, long, long, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_AT_ref_address(com.sun.jna.Pointer, com.sun.jna.Pointer, short, long, long, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_ref_address(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, short Dwarf_Half1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, Pointer Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_ref_address(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3903</i>
	 */
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_ref_address(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, short Dwarf_Half1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_ref_address(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3903</i>
	 */
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_ref_address(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, short Dwarf_Half1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_add_AT_ref_address_a(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_P_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3911</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_AT_ref_address_a(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, libdwarf.LibdwarfLibrary.Dwarf_P_Die, short, long, long, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_AT_ref_address_a(com.sun.jna.Pointer, com.sun.jna.Pointer, short, long, long, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_add_AT_ref_address_a(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, short Dwarf_Half1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, Pointer Dwarf_P_AttributePtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_add_AT_ref_address_a(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_P_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3911</i>
	 */
	int dwarf_add_AT_ref_address_a(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, short Dwarf_Half1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, PointerByReference Dwarf_P_AttributePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_add_AT_ref_address_a(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_P_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3911</i>
	 */
	int dwarf_add_AT_ref_address_a(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, short Dwarf_Half1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, PointerByReference Dwarf_P_AttributePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_unsigned_const(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3919</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_AT_unsigned_const(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, libdwarf.LibdwarfLibrary.Dwarf_P_Die, short, long, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_AT_unsigned_const(com.sun.jna.Pointer, com.sun.jna.Pointer, short, long, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_unsigned_const(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, short Dwarf_Half1, long Dwarf_Unsigned1, Pointer Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_unsigned_const(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3919</i>
	 */
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_unsigned_const(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, short Dwarf_Half1, long Dwarf_Unsigned1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_unsigned_const(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3919</i>
	 */
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_unsigned_const(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, short Dwarf_Half1, long Dwarf_Unsigned1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_add_AT_unsigned_const_a(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, Dwarf_Unsigned, Dwarf_P_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3926</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_AT_unsigned_const_a(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, libdwarf.LibdwarfLibrary.Dwarf_P_Die, short, long, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_AT_unsigned_const_a(com.sun.jna.Pointer, com.sun.jna.Pointer, short, long, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_add_AT_unsigned_const_a(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, short Dwarf_Half1, long Dwarf_Unsigned1, Pointer Dwarf_P_AttributePtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_add_AT_unsigned_const_a(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, Dwarf_Unsigned, Dwarf_P_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3926</i>
	 */
	int dwarf_add_AT_unsigned_const_a(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, short Dwarf_Half1, long Dwarf_Unsigned1, PointerByReference Dwarf_P_AttributePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_add_AT_unsigned_const_a(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, Dwarf_Unsigned, Dwarf_P_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3926</i>
	 */
	int dwarf_add_AT_unsigned_const_a(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, short Dwarf_Half1, long Dwarf_Unsigned1, PointerByReference Dwarf_P_AttributePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_signed_const(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, Dwarf_Signed, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3933</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_AT_signed_const(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, libdwarf.LibdwarfLibrary.Dwarf_P_Die, short, long, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_AT_signed_const(com.sun.jna.Pointer, com.sun.jna.Pointer, short, long, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_signed_const(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, short Dwarf_Half1, long Dwarf_Signed1, Pointer Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_signed_const(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, Dwarf_Signed, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3933</i>
	 */
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_signed_const(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, short Dwarf_Half1, long Dwarf_Signed1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_signed_const(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, Dwarf_Signed, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3933</i>
	 */
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_signed_const(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, short Dwarf_Half1, long Dwarf_Signed1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_add_AT_signed_const_a(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, Dwarf_Signed, Dwarf_P_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3940</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_AT_signed_const_a(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, libdwarf.LibdwarfLibrary.Dwarf_P_Die, short, long, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_AT_signed_const_a(com.sun.jna.Pointer, com.sun.jna.Pointer, short, long, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_add_AT_signed_const_a(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, short Dwarf_Half1, long Dwarf_Signed1, Pointer Dwarf_P_AttributePtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_add_AT_signed_const_a(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, Dwarf_Signed, Dwarf_P_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3940</i>
	 */
	int dwarf_add_AT_signed_const_a(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, short Dwarf_Half1, long Dwarf_Signed1, PointerByReference Dwarf_P_AttributePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_add_AT_signed_const_a(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, Dwarf_Signed, Dwarf_P_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3940</i>
	 */
	int dwarf_add_AT_signed_const_a(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, short Dwarf_Half1, long Dwarf_Signed1, PointerByReference Dwarf_P_AttributePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_reference(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, Dwarf_P_Die, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3947</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_AT_reference(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, libdwarf.LibdwarfLibrary.Dwarf_P_Die, short, libdwarf.LibdwarfLibrary.Dwarf_P_Die, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_AT_reference(com.sun.jna.Pointer, com.sun.jna.Pointer, short, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_reference(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, short Dwarf_Half1, Pointer Dwarf_P_Die2, Pointer Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_reference(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, Dwarf_P_Die, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3947</i>
	 */
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_reference(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, short Dwarf_Half1, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_reference(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, Dwarf_P_Die, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3947</i>
	 */
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_reference(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, short Dwarf_Half1, Pointer Dwarf_P_Die2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dwarf_add_AT_reference_b allows otherdie to be NULL with<br>
	 * the assumption the caller will then later call<br>
	 * dwarf_fixup_AT_reference_die() with a non-null target die.<br>
	 * New 22 October, 2013<br>
	 * dbg<br>
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_reference_b(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, Dwarf_P_Die, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3958</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_AT_reference_b(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, libdwarf.LibdwarfLibrary.Dwarf_P_Die, short, libdwarf.LibdwarfLibrary.Dwarf_P_Die, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_AT_reference_b(com.sun.jna.Pointer, com.sun.jna.Pointer, short, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_reference_b(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, short Dwarf_Half1, Pointer Dwarf_P_Die2, Pointer Dwarf_ErrorPtr1);
	/**
	 * dwarf_add_AT_reference_b allows otherdie to be NULL with<br>
	 * the assumption the caller will then later call<br>
	 * dwarf_fixup_AT_reference_die() with a non-null target die.<br>
	 * New 22 October, 2013<br>
	 * dbg<br>
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_reference_b(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, Dwarf_P_Die, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3958</i>
	 */
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_reference_b(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, short Dwarf_Half1, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dwarf_add_AT_reference_b allows otherdie to be NULL with<br>
	 * the assumption the caller will then later call<br>
	 * dwarf_fixup_AT_reference_die() with a non-null target die.<br>
	 * New 22 October, 2013<br>
	 * dbg<br>
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_reference_b(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, Dwarf_P_Die, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3958</i>
	 */
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_reference_b(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, short Dwarf_Half1, Pointer Dwarf_P_Die2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_add_AT_reference_c(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, Dwarf_P_Die, Dwarf_P_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3965</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_AT_reference_c(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, libdwarf.LibdwarfLibrary.Dwarf_P_Die, short, libdwarf.LibdwarfLibrary.Dwarf_P_Die, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_AT_reference_c(com.sun.jna.Pointer, com.sun.jna.Pointer, short, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_add_AT_reference_c(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, short Dwarf_Half1, Pointer Dwarf_P_Die2, Pointer Dwarf_P_AttributePtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_add_AT_reference_c(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, Dwarf_P_Die, Dwarf_P_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3965</i>
	 */
	int dwarf_add_AT_reference_c(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, short Dwarf_Half1, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die2, PointerByReference Dwarf_P_AttributePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_add_AT_reference_c(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, Dwarf_P_Die, Dwarf_P_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3965</i>
	 */
	int dwarf_add_AT_reference_c(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, short Dwarf_Half1, Pointer Dwarf_P_Die2, PointerByReference Dwarf_P_AttributePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * The following is for out-of-order cu-local<br>
	 * references.  Allowing nominating the target Dwarf_P_Die<br>
	 * after calling dwarf_add_AT_reference with a NULL otherdie<br>
	 * after a single pass thru the DIE generation. Needed<br>
	 * for forward-references.<br>
	 * New 22 October, 2013.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_fixup_AT_reference_die(Dwarf_P_Debug, Dwarf_Half, Dwarf_P_Die, Dwarf_P_Die, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3979</i><br>
	 * @deprecated use the safer methods {@link #dwarf_fixup_AT_reference_die(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, short, libdwarf.LibdwarfLibrary.Dwarf_P_Die, libdwarf.LibdwarfLibrary.Dwarf_P_Die, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_fixup_AT_reference_die(com.sun.jna.Pointer, short, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_fixup_AT_reference_die(Pointer Dwarf_P_Debug1, short Dwarf_Half1, Pointer Dwarf_P_Die1, Pointer Dwarf_P_Die2, Pointer Dwarf_ErrorPtr1);
	/**
	 * The following is for out-of-order cu-local<br>
	 * references.  Allowing nominating the target Dwarf_P_Die<br>
	 * after calling dwarf_add_AT_reference with a NULL otherdie<br>
	 * after a single pass thru the DIE generation. Needed<br>
	 * for forward-references.<br>
	 * New 22 October, 2013.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_fixup_AT_reference_die(Dwarf_P_Debug, Dwarf_Half, Dwarf_P_Die, Dwarf_P_Die, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3979</i>
	 */
	int dwarf_fixup_AT_reference_die(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, short Dwarf_Half1, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * The following is for out-of-order cu-local<br>
	 * references.  Allowing nominating the target Dwarf_P_Die<br>
	 * after calling dwarf_add_AT_reference with a NULL otherdie<br>
	 * after a single pass thru the DIE generation. Needed<br>
	 * for forward-references.<br>
	 * New 22 October, 2013.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_fixup_AT_reference_die(Dwarf_P_Debug, Dwarf_Half, Dwarf_P_Die, Dwarf_P_Die, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3979</i>
	 */
	int dwarf_fixup_AT_reference_die(Pointer Dwarf_P_Debug1, short Dwarf_Half1, Pointer Dwarf_P_Die1, Pointer Dwarf_P_Die2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_dataref(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3985</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_AT_dataref(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, libdwarf.LibdwarfLibrary.Dwarf_P_Die, short, long, long, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_AT_dataref(com.sun.jna.Pointer, com.sun.jna.Pointer, short, long, long, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_dataref(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, short Dwarf_Half1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, Pointer Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_dataref(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3985</i>
	 */
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_dataref(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, short Dwarf_Half1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_dataref(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3985</i>
	 */
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_dataref(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, short Dwarf_Half1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * Original signature : <code>int dwarf_add_AT_dataref_a(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_P_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3994</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_AT_dataref_a(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, libdwarf.LibdwarfLibrary.Dwarf_P_Die, short, long, long, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_AT_dataref_a(com.sun.jna.Pointer, com.sun.jna.Pointer, short, long, long, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_add_AT_dataref_a(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, short Dwarf_Half1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, Pointer Dwarf_P_AttributePtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * Original signature : <code>int dwarf_add_AT_dataref_a(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_P_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3994</i>
	 */
	int dwarf_add_AT_dataref_a(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, short Dwarf_Half1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, PointerByReference Dwarf_P_AttributePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * Original signature : <code>int dwarf_add_AT_dataref_a(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_P_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 3994</i>
	 */
	int dwarf_add_AT_dataref_a(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, short Dwarf_Half1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, PointerByReference Dwarf_P_AttributePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_const_value_string(Dwarf_P_Die, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4003</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_AT_const_value_string(libdwarf.LibdwarfLibrary.Dwarf_P_Die, java.nio.ByteBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_AT_const_value_string(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_const_value_string(Pointer Dwarf_P_Die1, Pointer charPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_const_value_string(Dwarf_P_Die, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4003</i>
	 */
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_const_value_string(LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, ByteBuffer charPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_const_value_string(Dwarf_P_Die, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4003</i>
	 */
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_const_value_string(Pointer Dwarf_P_Die1, Pointer charPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * Original signature : <code>int dwarf_add_AT_const_value_string_a(Dwarf_P_Die, char*, Dwarf_P_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4009</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_AT_const_value_string_a(libdwarf.LibdwarfLibrary.Dwarf_P_Die, java.nio.ByteBuffer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_AT_const_value_string_a(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_add_AT_const_value_string_a(Pointer Dwarf_P_Die1, Pointer charPtr1, Pointer Dwarf_P_AttributePtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * Original signature : <code>int dwarf_add_AT_const_value_string_a(Dwarf_P_Die, char*, Dwarf_P_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4009</i>
	 */
	int dwarf_add_AT_const_value_string_a(LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, ByteBuffer charPtr1, PointerByReference Dwarf_P_AttributePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * Original signature : <code>int dwarf_add_AT_const_value_string_a(Dwarf_P_Die, char*, Dwarf_P_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4009</i>
	 */
	int dwarf_add_AT_const_value_string_a(Pointer Dwarf_P_Die1, Pointer charPtr1, PointerByReference Dwarf_P_AttributePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_location_expr(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, Dwarf_P_Expr, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4015</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_AT_location_expr(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, libdwarf.LibdwarfLibrary.Dwarf_P_Die, short, libdwarf.LibdwarfLibrary.Dwarf_P_Expr, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_AT_location_expr(com.sun.jna.Pointer, com.sun.jna.Pointer, short, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_location_expr(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, short Dwarf_Half1, Pointer Dwarf_P_Expr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_location_expr(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, Dwarf_P_Expr, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4015</i>
	 */
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_location_expr(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, short Dwarf_Half1, LibdwarfLibrary.Dwarf_P_Expr Dwarf_P_Expr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_location_expr(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, Dwarf_P_Expr, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4015</i>
	 */
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_location_expr(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, short Dwarf_Half1, Pointer Dwarf_P_Expr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_add_AT_location_expr_a(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, Dwarf_P_Expr, Dwarf_P_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4022</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_AT_location_expr_a(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, libdwarf.LibdwarfLibrary.Dwarf_P_Die, short, libdwarf.LibdwarfLibrary.Dwarf_P_Expr, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_AT_location_expr_a(com.sun.jna.Pointer, com.sun.jna.Pointer, short, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_add_AT_location_expr_a(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, short Dwarf_Half1, Pointer Dwarf_P_Expr1, Pointer Dwarf_P_AttributePtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_add_AT_location_expr_a(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, Dwarf_P_Expr, Dwarf_P_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4022</i>
	 */
	int dwarf_add_AT_location_expr_a(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, short Dwarf_Half1, LibdwarfLibrary.Dwarf_P_Expr Dwarf_P_Expr1, PointerByReference Dwarf_P_AttributePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_add_AT_location_expr_a(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, Dwarf_P_Expr, Dwarf_P_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4022</i>
	 */
	int dwarf_add_AT_location_expr_a(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, short Dwarf_Half1, Pointer Dwarf_P_Expr1, PointerByReference Dwarf_P_AttributePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_string(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4029</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_AT_string(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, libdwarf.LibdwarfLibrary.Dwarf_P_Die, short, java.nio.ByteBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_AT_string(com.sun.jna.Pointer, com.sun.jna.Pointer, short, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_string(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, short Dwarf_Half1, Pointer charPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_string(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4029</i>
	 */
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_string(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, short Dwarf_Half1, ByteBuffer charPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_string(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4029</i>
	 */
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_string(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, short Dwarf_Half1, String charPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_string(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4029</i>
	 */
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_string(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, short Dwarf_Half1, Pointer charPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Preferred as of December 2018.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_add_AT_string_a(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, char*, Dwarf_P_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4036</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_AT_string_a(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, libdwarf.LibdwarfLibrary.Dwarf_P_Die, short, java.nio.ByteBuffer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_AT_string_a(com.sun.jna.Pointer, com.sun.jna.Pointer, short, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_add_AT_string_a(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, short Dwarf_Half1, Pointer charPtr1, Pointer Dwarf_P_AttributePtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Preferred as of December 2018.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_add_AT_string_a(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, char*, Dwarf_P_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4036</i>
	 */
	int dwarf_add_AT_string_a(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, short Dwarf_Half1, ByteBuffer charPtr1, PointerByReference Dwarf_P_AttributePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Preferred as of December 2018.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_add_AT_string_a(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, char*, Dwarf_P_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4036</i>
	 */
	int dwarf_add_AT_string_a(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, short Dwarf_Half1, Pointer charPtr1, PointerByReference Dwarf_P_AttributePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_flag(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, Dwarf_Small, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4043</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_AT_flag(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, libdwarf.LibdwarfLibrary.Dwarf_P_Die, short, byte, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_AT_flag(com.sun.jna.Pointer, com.sun.jna.Pointer, short, byte, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_flag(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, short Dwarf_Half1, byte Dwarf_Small1, Pointer Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_flag(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, Dwarf_Small, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4043</i>
	 */
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_flag(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, short Dwarf_Half1, byte Dwarf_Small1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_flag(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, Dwarf_Small, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4043</i>
	 */
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_flag(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, short Dwarf_Half1, byte Dwarf_Small1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_add_AT_flag_a(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, Dwarf_Small, Dwarf_P_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4050</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_AT_flag_a(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, libdwarf.LibdwarfLibrary.Dwarf_P_Die, short, byte, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_AT_flag_a(com.sun.jna.Pointer, com.sun.jna.Pointer, short, byte, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_add_AT_flag_a(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, short Dwarf_Half1, byte Dwarf_Small1, Pointer Dwarf_P_AttributePtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_add_AT_flag_a(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, Dwarf_Small, Dwarf_P_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4050</i>
	 */
	int dwarf_add_AT_flag_a(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, short Dwarf_Half1, byte Dwarf_Small1, PointerByReference Dwarf_P_AttributePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_add_AT_flag_a(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Half, Dwarf_Small, Dwarf_P_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4050</i>
	 */
	int dwarf_add_AT_flag_a(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, short Dwarf_Half1, byte Dwarf_Small1, PointerByReference Dwarf_P_AttributePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * ownerdie<br>
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_producer(Dwarf_P_Die, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4057</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_AT_producer(libdwarf.LibdwarfLibrary.Dwarf_P_Die, java.nio.ByteBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_AT_producer(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_producer(Pointer Dwarf_P_Die1, Pointer charPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * ownerdie<br>
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_producer(Dwarf_P_Die, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4057</i>
	 */
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_producer(LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, ByteBuffer charPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * ownerdie<br>
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_producer(Dwarf_P_Die, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4057</i>
	 */
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_producer(Pointer Dwarf_P_Die1, Pointer charPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * ownerdie<br>
	 * Original signature : <code>int dwarf_add_AT_producer_a(Dwarf_P_Die, char*, Dwarf_P_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4062</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_AT_producer_a(libdwarf.LibdwarfLibrary.Dwarf_P_Die, java.nio.ByteBuffer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_AT_producer_a(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_add_AT_producer_a(Pointer Dwarf_P_Die1, Pointer charPtr1, Pointer Dwarf_P_AttributePtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * ownerdie<br>
	 * Original signature : <code>int dwarf_add_AT_producer_a(Dwarf_P_Die, char*, Dwarf_P_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4062</i>
	 */
	int dwarf_add_AT_producer_a(LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, ByteBuffer charPtr1, PointerByReference Dwarf_P_AttributePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * ownerdie<br>
	 * Original signature : <code>int dwarf_add_AT_producer_a(Dwarf_P_Die, char*, Dwarf_P_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4062</i>
	 */
	int dwarf_add_AT_producer_a(Pointer Dwarf_P_Die1, Pointer charPtr1, PointerByReference Dwarf_P_AttributePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * October 2017 for DW_FORM_data16. Usable with any attribute,<br>
	 * though it should only be in limited use. DWARF5 only.<br>
	 * Returns DW_DLV_OK on success, DW_DLV_ERROR on failure.<br>
	 * Returns the new attribute pointer through *return_attr.<br>
	 * ownerdie<br>
	 * Original signature : <code>int dwarf_add_AT_data16(Dwarf_P_Die, Dwarf_Half, Dwarf_Form_Data16*, Dwarf_P_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4071</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_AT_data16(libdwarf.LibdwarfLibrary.Dwarf_P_Die, short, libdwarf.Dwarf_Form_Data16_s, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_AT_data16(com.sun.jna.Pointer, short, libdwarf.Dwarf_Form_Data16_s, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_add_AT_data16(Pointer Dwarf_P_Die1, short Dwarf_Half1, Dwarf_Form_Data16_s Dwarf_Form_Data16Ptr1, Pointer Dwarf_P_AttributePtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * October 2017 for DW_FORM_data16. Usable with any attribute,<br>
	 * though it should only be in limited use. DWARF5 only.<br>
	 * Returns DW_DLV_OK on success, DW_DLV_ERROR on failure.<br>
	 * Returns the new attribute pointer through *return_attr.<br>
	 * ownerdie<br>
	 * Original signature : <code>int dwarf_add_AT_data16(Dwarf_P_Die, Dwarf_Half, Dwarf_Form_Data16*, Dwarf_P_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4071</i>
	 */
	int dwarf_add_AT_data16(LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, short Dwarf_Half1, Dwarf_Form_Data16_s Dwarf_Form_Data16Ptr1, PointerByReference Dwarf_P_AttributePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * October 2017 for DW_FORM_data16. Usable with any attribute,<br>
	 * though it should only be in limited use. DWARF5 only.<br>
	 * Returns DW_DLV_OK on success, DW_DLV_ERROR on failure.<br>
	 * Returns the new attribute pointer through *return_attr.<br>
	 * ownerdie<br>
	 * Original signature : <code>int dwarf_add_AT_data16(Dwarf_P_Die, Dwarf_Half, Dwarf_Form_Data16*, Dwarf_P_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4071</i>
	 */
	int dwarf_add_AT_data16(Pointer Dwarf_P_Die1, short Dwarf_Half1, Dwarf_Form_Data16_s Dwarf_Form_Data16Ptr1, PointerByReference Dwarf_P_AttributePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * November 2018. DW_AT_implicit const generation.<br>
	 * ownerdie<br>
	 * Original signature : <code>int dwarf_add_AT_implicit_const(Dwarf_P_Die, Dwarf_Half, Dwarf_Signed, Dwarf_P_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4078</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_AT_implicit_const(libdwarf.LibdwarfLibrary.Dwarf_P_Die, short, long, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_AT_implicit_const(com.sun.jna.Pointer, short, long, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_add_AT_implicit_const(Pointer Dwarf_P_Die1, short Dwarf_Half1, long Dwarf_Signed1, Pointer Dwarf_P_AttributePtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * November 2018. DW_AT_implicit const generation.<br>
	 * ownerdie<br>
	 * Original signature : <code>int dwarf_add_AT_implicit_const(Dwarf_P_Die, Dwarf_Half, Dwarf_Signed, Dwarf_P_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4078</i>
	 */
	int dwarf_add_AT_implicit_const(LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, short Dwarf_Half1, long Dwarf_Signed1, PointerByReference Dwarf_P_AttributePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * November 2018. DW_AT_implicit const generation.<br>
	 * ownerdie<br>
	 * Original signature : <code>int dwarf_add_AT_implicit_const(Dwarf_P_Die, Dwarf_Half, Dwarf_Signed, Dwarf_P_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4078</i>
	 */
	int dwarf_add_AT_implicit_const(Pointer Dwarf_P_Die1, short Dwarf_Half1, long Dwarf_Signed1, PointerByReference Dwarf_P_AttributePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * August 2013 sleb creator. For any attribute.<br>
	 * ownerdie<br>
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_any_value_sleb(Dwarf_P_Die, Dwarf_Half, Dwarf_Signed, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4085</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_AT_any_value_sleb(libdwarf.LibdwarfLibrary.Dwarf_P_Die, short, long, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_AT_any_value_sleb(com.sun.jna.Pointer, short, long, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_any_value_sleb(Pointer Dwarf_P_Die1, short Dwarf_Half1, long Dwarf_Signed1, Pointer Dwarf_ErrorPtr1);
	/**
	 * August 2013 sleb creator. For any attribute.<br>
	 * ownerdie<br>
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_any_value_sleb(Dwarf_P_Die, Dwarf_Half, Dwarf_Signed, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4085</i>
	 */
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_any_value_sleb(LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, short Dwarf_Half1, long Dwarf_Signed1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * August 2013 sleb creator. For any attribute.<br>
	 * ownerdie<br>
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_any_value_sleb(Dwarf_P_Die, Dwarf_Half, Dwarf_Signed, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4085</i>
	 */
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_any_value_sleb(Pointer Dwarf_P_Die1, short Dwarf_Half1, long Dwarf_Signed1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * ownerdie<br>
	 * Original signature : <code>int dwarf_add_AT_any_value_sleb_a(Dwarf_P_Die, Dwarf_Half, Dwarf_Signed, Dwarf_P_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4091</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_AT_any_value_sleb_a(libdwarf.LibdwarfLibrary.Dwarf_P_Die, short, long, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_AT_any_value_sleb_a(com.sun.jna.Pointer, short, long, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_add_AT_any_value_sleb_a(Pointer Dwarf_P_Die1, short Dwarf_Half1, long Dwarf_Signed1, Pointer Dwarf_P_AttributePtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * ownerdie<br>
	 * Original signature : <code>int dwarf_add_AT_any_value_sleb_a(Dwarf_P_Die, Dwarf_Half, Dwarf_Signed, Dwarf_P_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4091</i>
	 */
	int dwarf_add_AT_any_value_sleb_a(LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, short Dwarf_Half1, long Dwarf_Signed1, PointerByReference Dwarf_P_AttributePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * ownerdie<br>
	 * Original signature : <code>int dwarf_add_AT_any_value_sleb_a(Dwarf_P_Die, Dwarf_Half, Dwarf_Signed, Dwarf_P_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4091</i>
	 */
	int dwarf_add_AT_any_value_sleb_a(Pointer Dwarf_P_Die1, short Dwarf_Half1, long Dwarf_Signed1, PointerByReference Dwarf_P_AttributePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original sleb creator. Only for DW_AT_const_value.<br>
	 * ownerdie<br>
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_const_value_signedint(Dwarf_P_Die, Dwarf_Signed, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4098</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_AT_const_value_signedint(libdwarf.LibdwarfLibrary.Dwarf_P_Die, long, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_AT_const_value_signedint(com.sun.jna.Pointer, long, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_const_value_signedint(Pointer Dwarf_P_Die1, long Dwarf_Signed1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Original sleb creator. Only for DW_AT_const_value.<br>
	 * ownerdie<br>
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_const_value_signedint(Dwarf_P_Die, Dwarf_Signed, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4098</i>
	 */
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_const_value_signedint(LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, long Dwarf_Signed1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original sleb creator. Only for DW_AT_const_value.<br>
	 * ownerdie<br>
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_const_value_signedint(Dwarf_P_Die, Dwarf_Signed, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4098</i>
	 */
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_const_value_signedint(Pointer Dwarf_P_Die1, long Dwarf_Signed1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Preferred as of December 2018.<br>
	 * ownerdie<br>
	 * Original signature : <code>int dwarf_add_AT_const_value_signedint_a(Dwarf_P_Die, Dwarf_Signed, Dwarf_P_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4103</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_AT_const_value_signedint_a(libdwarf.LibdwarfLibrary.Dwarf_P_Die, long, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_AT_const_value_signedint_a(com.sun.jna.Pointer, long, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_add_AT_const_value_signedint_a(Pointer Dwarf_P_Die1, long Dwarf_Signed1, Pointer Dwarf_P_AttributePtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Preferred as of December 2018.<br>
	 * ownerdie<br>
	 * Original signature : <code>int dwarf_add_AT_const_value_signedint_a(Dwarf_P_Die, Dwarf_Signed, Dwarf_P_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4103</i>
	 */
	int dwarf_add_AT_const_value_signedint_a(LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, long Dwarf_Signed1, PointerByReference Dwarf_P_AttributePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Preferred as of December 2018.<br>
	 * ownerdie<br>
	 * Original signature : <code>int dwarf_add_AT_const_value_signedint_a(Dwarf_P_Die, Dwarf_Signed, Dwarf_P_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4103</i>
	 */
	int dwarf_add_AT_const_value_signedint_a(Pointer Dwarf_P_Die1, long Dwarf_Signed1, PointerByReference Dwarf_P_AttributePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * August 2013 uleb creator. For any attribute.<br>
	 * ownerdie<br>
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_any_value_uleb(Dwarf_P_Die, Dwarf_Half, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4109</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_AT_any_value_uleb(libdwarf.LibdwarfLibrary.Dwarf_P_Die, short, long, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_AT_any_value_uleb(com.sun.jna.Pointer, short, long, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_any_value_uleb(Pointer Dwarf_P_Die1, short Dwarf_Half1, long Dwarf_Unsigned1, Pointer Dwarf_ErrorPtr1);
	/**
	 * August 2013 uleb creator. For any attribute.<br>
	 * ownerdie<br>
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_any_value_uleb(Dwarf_P_Die, Dwarf_Half, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4109</i>
	 */
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_any_value_uleb(LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, short Dwarf_Half1, long Dwarf_Unsigned1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * August 2013 uleb creator. For any attribute.<br>
	 * ownerdie<br>
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_any_value_uleb(Dwarf_P_Die, Dwarf_Half, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4109</i>
	 */
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_any_value_uleb(Pointer Dwarf_P_Die1, short Dwarf_Half1, long Dwarf_Unsigned1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * ownerdie<br>
	 * Original signature : <code>int dwarf_add_AT_any_value_uleb_a(Dwarf_P_Die, Dwarf_Half, Dwarf_Unsigned, Dwarf_P_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4115</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_AT_any_value_uleb_a(libdwarf.LibdwarfLibrary.Dwarf_P_Die, short, long, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_AT_any_value_uleb_a(com.sun.jna.Pointer, short, long, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_add_AT_any_value_uleb_a(Pointer Dwarf_P_Die1, short Dwarf_Half1, long Dwarf_Unsigned1, Pointer Dwarf_P_AttributePtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * ownerdie<br>
	 * Original signature : <code>int dwarf_add_AT_any_value_uleb_a(Dwarf_P_Die, Dwarf_Half, Dwarf_Unsigned, Dwarf_P_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4115</i>
	 */
	int dwarf_add_AT_any_value_uleb_a(LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, short Dwarf_Half1, long Dwarf_Unsigned1, PointerByReference Dwarf_P_AttributePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * ownerdie<br>
	 * Original signature : <code>int dwarf_add_AT_any_value_uleb_a(Dwarf_P_Die, Dwarf_Half, Dwarf_Unsigned, Dwarf_P_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4115</i>
	 */
	int dwarf_add_AT_any_value_uleb_a(Pointer Dwarf_P_Die1, short Dwarf_Half1, long Dwarf_Unsigned1, PointerByReference Dwarf_P_AttributePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original uleb creator. Only for DW_AT_const_value.<br>
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_const_value_unsignedint(Dwarf_P_Die, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4122</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_AT_const_value_unsignedint(libdwarf.LibdwarfLibrary.Dwarf_P_Die, long, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_AT_const_value_unsignedint(com.sun.jna.Pointer, long, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_const_value_unsignedint(Pointer Dwarf_P_Die1, long Dwarf_Unsigned1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Original uleb creator. Only for DW_AT_const_value.<br>
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_const_value_unsignedint(Dwarf_P_Die, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4122</i>
	 */
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_const_value_unsignedint(LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, long Dwarf_Unsigned1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original uleb creator. Only for DW_AT_const_value.<br>
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_const_value_unsignedint(Dwarf_P_Die, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4122</i>
	 */
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_const_value_unsignedint(Pointer Dwarf_P_Die1, long Dwarf_Unsigned1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * Original signature : <code>int dwarf_add_AT_const_value_unsignedint_a(Dwarf_P_Die, Dwarf_Unsigned, Dwarf_P_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4128</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_AT_const_value_unsignedint_a(libdwarf.LibdwarfLibrary.Dwarf_P_Die, long, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_AT_const_value_unsignedint_a(com.sun.jna.Pointer, long, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_add_AT_const_value_unsignedint_a(Pointer Dwarf_P_Die1, long Dwarf_Unsigned1, Pointer Dwarf_P_AttributePtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * Original signature : <code>int dwarf_add_AT_const_value_unsignedint_a(Dwarf_P_Die, Dwarf_Unsigned, Dwarf_P_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4128</i>
	 */
	int dwarf_add_AT_const_value_unsignedint_a(LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, long Dwarf_Unsigned1, PointerByReference Dwarf_P_AttributePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * Original signature : <code>int dwarf_add_AT_const_value_unsignedint_a(Dwarf_P_Die, Dwarf_Unsigned, Dwarf_P_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4128</i>
	 */
	int dwarf_add_AT_const_value_unsignedint_a(Pointer Dwarf_P_Die1, long Dwarf_Unsigned1, PointerByReference Dwarf_P_AttributePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * ownerdie<br>
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_comp_dir(Dwarf_P_Die, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4134</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_AT_comp_dir(libdwarf.LibdwarfLibrary.Dwarf_P_Die, java.nio.ByteBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_AT_comp_dir(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_comp_dir(Pointer Dwarf_P_Die1, Pointer charPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * ownerdie<br>
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_comp_dir(Dwarf_P_Die, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4134</i>
	 */
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_comp_dir(LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, ByteBuffer charPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * ownerdie<br>
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_comp_dir(Dwarf_P_Die, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4134</i>
	 */
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_comp_dir(LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, String charPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * ownerdie<br>
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_comp_dir(Dwarf_P_Die, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4134</i>
	 */
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_comp_dir(Pointer Dwarf_P_Die1, Pointer charPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * ownerdie<br>
	 * Original signature : <code>int dwarf_add_AT_comp_dir_a(Dwarf_P_Die, char*, Dwarf_P_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4139</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_AT_comp_dir_a(libdwarf.LibdwarfLibrary.Dwarf_P_Die, java.nio.ByteBuffer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_AT_comp_dir_a(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_add_AT_comp_dir_a(Pointer Dwarf_P_Die1, Pointer charPtr1, Pointer Dwarf_P_AttributePtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * ownerdie<br>
	 * Original signature : <code>int dwarf_add_AT_comp_dir_a(Dwarf_P_Die, char*, Dwarf_P_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4139</i>
	 */
	int dwarf_add_AT_comp_dir_a(LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, ByteBuffer charPtr1, PointerByReference Dwarf_P_AttributePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * ownerdie<br>
	 * Original signature : <code>int dwarf_add_AT_comp_dir_a(Dwarf_P_Die, char*, Dwarf_P_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4139</i>
	 */
	int dwarf_add_AT_comp_dir_a(Pointer Dwarf_P_Die1, Pointer charPtr1, PointerByReference Dwarf_P_AttributePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * die<br>
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_name(Dwarf_P_Die, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4144</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_AT_name(libdwarf.LibdwarfLibrary.Dwarf_P_Die, java.nio.ByteBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_AT_name(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_name(Pointer Dwarf_P_Die1, Pointer charPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * die<br>
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_name(Dwarf_P_Die, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4144</i>
	 */
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_name(LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, ByteBuffer charPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * die<br>
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_name(Dwarf_P_Die, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4144</i>
	 */
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_name(LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, String charPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * die<br>
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_name(Dwarf_P_Die, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4144</i>
	 */
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_name(Pointer Dwarf_P_Die1, Pointer charPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * die<br>
	 * Original signature : <code>int dwarf_add_AT_name_a(Dwarf_P_Die, char*, Dwarf_P_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4149</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_AT_name_a(libdwarf.LibdwarfLibrary.Dwarf_P_Die, java.nio.ByteBuffer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_AT_name_a(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_add_AT_name_a(Pointer Dwarf_P_Die1, Pointer charPtr1, Pointer Dwarf_P_AttributePtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * die<br>
	 * Original signature : <code>int dwarf_add_AT_name_a(Dwarf_P_Die, char*, Dwarf_P_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4149</i>
	 */
	int dwarf_add_AT_name_a(LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, ByteBuffer charPtr1, PointerByReference Dwarf_P_AttributePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * die<br>
	 * Original signature : <code>int dwarf_add_AT_name_a(Dwarf_P_Die, char*, Dwarf_P_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4149</i>
	 */
	int dwarf_add_AT_name_a(Pointer Dwarf_P_Die1, Pointer charPtr1, PointerByReference Dwarf_P_AttributePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_with_ref_sig8(Dwarf_P_Die, Dwarf_Half, const Dwarf_Sig8*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4154</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_AT_with_ref_sig8(libdwarf.LibdwarfLibrary.Dwarf_P_Die, short, libdwarf.Dwarf_Sig8_s, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_AT_with_ref_sig8(com.sun.jna.Pointer, short, libdwarf.Dwarf_Sig8_s, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_with_ref_sig8(Pointer Dwarf_P_Die1, short Dwarf_Half1, Dwarf_Sig8_s Dwarf_Sig8Ptr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_with_ref_sig8(Dwarf_P_Die, Dwarf_Half, const Dwarf_Sig8*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4154</i>
	 */
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_with_ref_sig8(LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, short Dwarf_Half1, Dwarf_Sig8_s Dwarf_Sig8Ptr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>Dwarf_P_Attribute dwarf_add_AT_with_ref_sig8(Dwarf_P_Die, Dwarf_Half, const Dwarf_Sig8*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4154</i>
	 */
	LibdwarfLibrary.Dwarf_P_Attribute dwarf_add_AT_with_ref_sig8(Pointer Dwarf_P_Die1, short Dwarf_Half1, Dwarf_Sig8_s Dwarf_Sig8Ptr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * Original signature : <code>int dwarf_add_AT_with_ref_sig8_a(Dwarf_P_Die, Dwarf_Half, const Dwarf_Sig8*, Dwarf_P_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4161</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_AT_with_ref_sig8_a(libdwarf.LibdwarfLibrary.Dwarf_P_Die, short, libdwarf.Dwarf_Sig8_s, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_AT_with_ref_sig8_a(com.sun.jna.Pointer, short, libdwarf.Dwarf_Sig8_s, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_add_AT_with_ref_sig8_a(Pointer Dwarf_P_Die1, short Dwarf_Half1, Dwarf_Sig8_s Dwarf_Sig8Ptr1, Pointer Dwarf_P_AttributePtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * Original signature : <code>int dwarf_add_AT_with_ref_sig8_a(Dwarf_P_Die, Dwarf_Half, const Dwarf_Sig8*, Dwarf_P_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4161</i>
	 */
	int dwarf_add_AT_with_ref_sig8_a(LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, short Dwarf_Half1, Dwarf_Sig8_s Dwarf_Sig8Ptr1, PointerByReference Dwarf_P_AttributePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * Original signature : <code>int dwarf_add_AT_with_ref_sig8_a(Dwarf_P_Die, Dwarf_Half, const Dwarf_Sig8*, Dwarf_P_Attribute*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4161</i>
	 */
	int dwarf_add_AT_with_ref_sig8_a(Pointer Dwarf_P_Die1, short Dwarf_Half1, Dwarf_Sig8_s Dwarf_Sig8Ptr1, PointerByReference Dwarf_P_AttributePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Producer line creation functions (.debug_line)<br>
	 * dbg<br>
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_directory_decl(Dwarf_P_Debug, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4170</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_directory_decl(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, java.nio.ByteBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_directory_decl(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	long dwarf_add_directory_decl(Pointer Dwarf_P_Debug1, Pointer charPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Producer line creation functions (.debug_line)<br>
	 * dbg<br>
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_directory_decl(Dwarf_P_Debug, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4170</i>
	 */
	long dwarf_add_directory_decl(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, ByteBuffer charPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Producer line creation functions (.debug_line)<br>
	 * dbg<br>
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_directory_decl(Dwarf_P_Debug, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4170</i>
	 */
	long dwarf_add_directory_decl(Pointer Dwarf_P_Debug1, Pointer charPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Producer line creation functions (.debug_line)<br>
	 * dbg<br>
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_directory_decl(Dwarf_P_Debug, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4170</i>
	 */
	long dwarf_add_directory_decl(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, String charPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_add_directory_decl_a(Dwarf_P_Debug, char*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4175</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_directory_decl_a(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, java.nio.ByteBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_directory_decl_a(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_add_directory_decl_a(Pointer Dwarf_P_Debug1, Pointer charPtr1, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_add_directory_decl_a(Dwarf_P_Debug, char*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4175</i>
	 */
	int dwarf_add_directory_decl_a(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, ByteBuffer charPtr1, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_add_directory_decl_a(Dwarf_P_Debug, char*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4175</i>
	 */
	int dwarf_add_directory_decl_a(Pointer Dwarf_P_Debug1, Pointer charPtr1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_file_decl(Dwarf_P_Debug, char*, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4180</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_file_decl(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, java.nio.ByteBuffer, long, long, long, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_file_decl(com.sun.jna.Pointer, com.sun.jna.Pointer, long, long, long, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	long dwarf_add_file_decl(Pointer Dwarf_P_Debug1, Pointer charPtr1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, long Dwarf_Unsigned3, Pointer Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_file_decl(Dwarf_P_Debug, char*, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4180</i>
	 */
	long dwarf_add_file_decl(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, ByteBuffer charPtr1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, long Dwarf_Unsigned3, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_file_decl(Dwarf_P_Debug, char*, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4180</i>
	 */
	long dwarf_add_file_decl(Pointer Dwarf_P_Debug1, Pointer charPtr1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, long Dwarf_Unsigned3, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_file_decl(Dwarf_P_Debug, char*, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4180</i>
	 */
	long dwarf_add_file_decl(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, String charPtr1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, long Dwarf_Unsigned3, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_add_file_decl_a(Dwarf_P_Debug, char*, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4188</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_file_decl_a(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, java.nio.ByteBuffer, long, long, long, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_file_decl_a(com.sun.jna.Pointer, com.sun.jna.Pointer, long, long, long, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_add_file_decl_a(Pointer Dwarf_P_Debug1, Pointer charPtr1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, long Dwarf_Unsigned3, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_add_file_decl_a(Dwarf_P_Debug, char*, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4188</i>
	 */
	int dwarf_add_file_decl_a(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, ByteBuffer charPtr1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, long Dwarf_Unsigned3, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_add_file_decl_a(Dwarf_P_Debug, char*, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4188</i>
	 */
	int dwarf_add_file_decl_a(Pointer Dwarf_P_Debug1, Pointer charPtr1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, long Dwarf_Unsigned3, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_add_line_entry_c(Dwarf_P_Debug, Dwarf_Unsigned, Dwarf_Addr, Dwarf_Unsigned, Dwarf_Signed, Dwarf_Bool, Dwarf_Bool, Dwarf_Bool, Dwarf_Bool, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4197</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_line_entry_c(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, long, long, long, long, int, int, int, int, long, long, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_line_entry_c(com.sun.jna.Pointer, long, long, long, long, int, int, int, int, long, long, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_add_line_entry_c(Pointer Dwarf_P_Debug1, long Dwarf_Unsigned1, long Dwarf_Addr1, long Dwarf_Unsigned2, long Dwarf_Signed1, int Dwarf_Bool1, int Dwarf_Bool2, int Dwarf_Bool3, int Dwarf_Bool4, long Dwarf_Unsigned3, long Dwarf_Unsigned4, Pointer Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_add_line_entry_c(Dwarf_P_Debug, Dwarf_Unsigned, Dwarf_Addr, Dwarf_Unsigned, Dwarf_Signed, Dwarf_Bool, Dwarf_Bool, Dwarf_Bool, Dwarf_Bool, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4197</i>
	 */
	int dwarf_add_line_entry_c(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, long Dwarf_Unsigned1, long Dwarf_Addr1, long Dwarf_Unsigned2, long Dwarf_Signed1, int Dwarf_Bool1, int Dwarf_Bool2, int Dwarf_Bool3, int Dwarf_Bool4, long Dwarf_Unsigned3, long Dwarf_Unsigned4, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_add_line_entry_c(Dwarf_P_Debug, Dwarf_Unsigned, Dwarf_Addr, Dwarf_Unsigned, Dwarf_Signed, Dwarf_Bool, Dwarf_Bool, Dwarf_Bool, Dwarf_Bool, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4197</i>
	 */
	int dwarf_add_line_entry_c(Pointer Dwarf_P_Debug1, long Dwarf_Unsigned1, long Dwarf_Addr1, long Dwarf_Unsigned2, long Dwarf_Signed1, int Dwarf_Bool1, int Dwarf_Bool2, int Dwarf_Bool3, int Dwarf_Bool4, long Dwarf_Unsigned3, long Dwarf_Unsigned4, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_line_entry_b(Dwarf_P_Debug, Dwarf_Unsigned, Dwarf_Addr, Dwarf_Unsigned, Dwarf_Signed, Dwarf_Bool, Dwarf_Bool, Dwarf_Bool, Dwarf_Bool, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4210</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_line_entry_b(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, long, long, long, long, int, int, int, int, long, long, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_line_entry_b(com.sun.jna.Pointer, long, long, long, long, int, int, int, int, long, long, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	long dwarf_add_line_entry_b(Pointer Dwarf_P_Debug1, long Dwarf_Unsigned1, long Dwarf_Addr1, long Dwarf_Unsigned2, long Dwarf_Signed1, int Dwarf_Bool1, int Dwarf_Bool2, int Dwarf_Bool3, int Dwarf_Bool4, long Dwarf_Unsigned3, long Dwarf_Unsigned4, Pointer Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_line_entry_b(Dwarf_P_Debug, Dwarf_Unsigned, Dwarf_Addr, Dwarf_Unsigned, Dwarf_Signed, Dwarf_Bool, Dwarf_Bool, Dwarf_Bool, Dwarf_Bool, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4210</i>
	 */
	long dwarf_add_line_entry_b(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, long Dwarf_Unsigned1, long Dwarf_Addr1, long Dwarf_Unsigned2, long Dwarf_Signed1, int Dwarf_Bool1, int Dwarf_Bool2, int Dwarf_Bool3, int Dwarf_Bool4, long Dwarf_Unsigned3, long Dwarf_Unsigned4, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_line_entry_b(Dwarf_P_Debug, Dwarf_Unsigned, Dwarf_Addr, Dwarf_Unsigned, Dwarf_Signed, Dwarf_Bool, Dwarf_Bool, Dwarf_Bool, Dwarf_Bool, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4210</i>
	 */
	long dwarf_add_line_entry_b(Pointer Dwarf_P_Debug1, long Dwarf_Unsigned1, long Dwarf_Addr1, long Dwarf_Unsigned2, long Dwarf_Signed1, int Dwarf_Bool1, int Dwarf_Bool2, int Dwarf_Bool3, int Dwarf_Bool4, long Dwarf_Unsigned3, long Dwarf_Unsigned4, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_line_entry(Dwarf_P_Debug, Dwarf_Unsigned, Dwarf_Addr, Dwarf_Unsigned, Dwarf_Signed, Dwarf_Bool, Dwarf_Bool, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4223</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_line_entry(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, long, long, long, long, int, int, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_line_entry(com.sun.jna.Pointer, long, long, long, long, int, int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	long dwarf_add_line_entry(Pointer Dwarf_P_Debug1, long Dwarf_Unsigned1, long Dwarf_Addr1, long Dwarf_Unsigned2, long Dwarf_Signed1, int Dwarf_Bool1, int Dwarf_Bool2, Pointer Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_line_entry(Dwarf_P_Debug, Dwarf_Unsigned, Dwarf_Addr, Dwarf_Unsigned, Dwarf_Signed, Dwarf_Bool, Dwarf_Bool, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4223</i>
	 */
	long dwarf_add_line_entry(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, long Dwarf_Unsigned1, long Dwarf_Addr1, long Dwarf_Unsigned2, long Dwarf_Signed1, int Dwarf_Bool1, int Dwarf_Bool2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_line_entry(Dwarf_P_Debug, Dwarf_Unsigned, Dwarf_Addr, Dwarf_Unsigned, Dwarf_Signed, Dwarf_Bool, Dwarf_Bool, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4223</i>
	 */
	long dwarf_add_line_entry(Pointer Dwarf_P_Debug1, long Dwarf_Unsigned1, long Dwarf_Addr1, long Dwarf_Unsigned2, long Dwarf_Signed1, int Dwarf_Bool1, int Dwarf_Bool2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>Dwarf_Unsigned dwarf_lne_set_address(Dwarf_P_Debug, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4232</i><br>
	 * @deprecated use the safer methods {@link #dwarf_lne_set_address(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, long, long, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_lne_set_address(com.sun.jna.Pointer, long, long, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	long dwarf_lne_set_address(Pointer Dwarf_P_Debug1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, Pointer Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>Dwarf_Unsigned dwarf_lne_set_address(Dwarf_P_Debug, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4232</i>
	 */
	long dwarf_lne_set_address(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>Dwarf_Unsigned dwarf_lne_set_address(Dwarf_P_Debug, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4232</i>
	 */
	long dwarf_lne_set_address(Pointer Dwarf_P_Debug1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_lne_set_address_a(Dwarf_P_Debug, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4238</i><br>
	 * @deprecated use the safer methods {@link #dwarf_lne_set_address_a(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, long, long, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_lne_set_address_a(com.sun.jna.Pointer, long, long, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_lne_set_address_a(Pointer Dwarf_P_Debug1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, Pointer Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_lne_set_address_a(Dwarf_P_Debug, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4238</i>
	 */
	int dwarf_lne_set_address_a(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_lne_set_address_a(Dwarf_P_Debug, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4238</i>
	 */
	int dwarf_lne_set_address_a(Pointer Dwarf_P_Debug1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>Dwarf_Unsigned dwarf_lne_end_sequence(Dwarf_P_Debug, Dwarf_Addr, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4243</i><br>
	 * @deprecated use the safer methods {@link #dwarf_lne_end_sequence(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, long, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_lne_end_sequence(com.sun.jna.Pointer, long, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	long dwarf_lne_end_sequence(Pointer Dwarf_P_Debug1, long Dwarf_Addr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>Dwarf_Unsigned dwarf_lne_end_sequence(Dwarf_P_Debug, Dwarf_Addr, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4243</i>
	 */
	long dwarf_lne_end_sequence(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, long Dwarf_Addr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>Dwarf_Unsigned dwarf_lne_end_sequence(Dwarf_P_Debug, Dwarf_Addr, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4243</i>
	 */
	long dwarf_lne_end_sequence(Pointer Dwarf_P_Debug1, long Dwarf_Addr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_lne_end_sequence_a(Dwarf_P_Debug, Dwarf_Addr, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4248</i><br>
	 * @deprecated use the safer methods {@link #dwarf_lne_end_sequence_a(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, long, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_lne_end_sequence_a(com.sun.jna.Pointer, long, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_lne_end_sequence_a(Pointer Dwarf_P_Debug1, long Dwarf_Addr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_lne_end_sequence_a(Dwarf_P_Debug, Dwarf_Addr, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4248</i>
	 */
	int dwarf_lne_end_sequence_a(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, long Dwarf_Addr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_lne_end_sequence_a(Dwarf_P_Debug, Dwarf_Addr, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4248</i>
	 */
	int dwarf_lne_end_sequence_a(Pointer Dwarf_P_Debug1, long Dwarf_Addr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Producer .debug_frame functions<br>
	 * dbg<br>
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_frame_cie(Dwarf_P_Debug, char*, Dwarf_Small, Dwarf_Small, Dwarf_Small, Dwarf_Ptr, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4253</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_frame_cie(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, java.nio.ByteBuffer, byte, byte, byte, com.sun.jna.Pointer, long, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_frame_cie(com.sun.jna.Pointer, com.sun.jna.Pointer, byte, byte, byte, com.sun.jna.Pointer, long, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	long dwarf_add_frame_cie(Pointer Dwarf_P_Debug1, Pointer charPtr1, byte Dwarf_Small1, byte Dwarf_Small2, byte Dwarf_Small3, Pointer Dwarf_Ptr1, long Dwarf_Unsigned1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Producer .debug_frame functions<br>
	 * dbg<br>
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_frame_cie(Dwarf_P_Debug, char*, Dwarf_Small, Dwarf_Small, Dwarf_Small, Dwarf_Ptr, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4253</i>
	 */
	long dwarf_add_frame_cie(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, ByteBuffer charPtr1, byte Dwarf_Small1, byte Dwarf_Small2, byte Dwarf_Small3, Pointer Dwarf_Ptr1, long Dwarf_Unsigned1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Producer .debug_frame functions<br>
	 * dbg<br>
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_frame_cie(Dwarf_P_Debug, char*, Dwarf_Small, Dwarf_Small, Dwarf_Small, Dwarf_Ptr, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4253</i>
	 */
	long dwarf_add_frame_cie(Pointer Dwarf_P_Debug1, Pointer charPtr1, byte Dwarf_Small1, byte Dwarf_Small2, byte Dwarf_Small3, Pointer Dwarf_Ptr1, long Dwarf_Unsigned1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_add_frame_cie_a(Dwarf_P_Debug, char*, Dwarf_Small, Dwarf_Small, Dwarf_Small, Dwarf_Ptr, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4263</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_frame_cie_a(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, java.nio.ByteBuffer, byte, byte, byte, com.sun.jna.Pointer, long, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_frame_cie_a(com.sun.jna.Pointer, com.sun.jna.Pointer, byte, byte, byte, com.sun.jna.Pointer, long, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_add_frame_cie_a(Pointer Dwarf_P_Debug1, Pointer charPtr1, byte Dwarf_Small1, byte Dwarf_Small2, byte Dwarf_Small3, Pointer Dwarf_Ptr1, long Dwarf_Unsigned1, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_add_frame_cie_a(Dwarf_P_Debug, char*, Dwarf_Small, Dwarf_Small, Dwarf_Small, Dwarf_Ptr, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4263</i>
	 */
	int dwarf_add_frame_cie_a(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, ByteBuffer charPtr1, byte Dwarf_Small1, byte Dwarf_Small2, byte Dwarf_Small3, Pointer Dwarf_Ptr1, long Dwarf_Unsigned1, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_add_frame_cie_a(Dwarf_P_Debug, char*, Dwarf_Small, Dwarf_Small, Dwarf_Small, Dwarf_Ptr, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4263</i>
	 */
	int dwarf_add_frame_cie_a(Pointer Dwarf_P_Debug1, Pointer charPtr1, byte Dwarf_Small1, byte Dwarf_Small2, byte Dwarf_Small3, Pointer Dwarf_Ptr1, long Dwarf_Unsigned1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_frame_fde(Dwarf_P_Debug, Dwarf_P_Fde, Dwarf_P_Die, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4273</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_frame_fde(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, libdwarf.LibdwarfLibrary.Dwarf_P_Fde, libdwarf.LibdwarfLibrary.Dwarf_P_Die, long, long, long, long, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_frame_fde(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, long, long, long, long, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	long dwarf_add_frame_fde(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Fde1, Pointer Dwarf_P_Die1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, long Dwarf_Unsigned3, long Dwarf_Unsigned4, Pointer Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_frame_fde(Dwarf_P_Debug, Dwarf_P_Fde, Dwarf_P_Die, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4273</i>
	 */
	long dwarf_add_frame_fde(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, LibdwarfLibrary.Dwarf_P_Fde Dwarf_P_Fde1, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, long Dwarf_Unsigned3, long Dwarf_Unsigned4, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_frame_fde(Dwarf_P_Debug, Dwarf_P_Fde, Dwarf_P_Die, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4273</i>
	 */
	long dwarf_add_frame_fde(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Fde1, Pointer Dwarf_P_Die1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, long Dwarf_Unsigned3, long Dwarf_Unsigned4, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_frame_fde_b(Dwarf_P_Debug, Dwarf_P_Fde, Dwarf_P_Die, Dwarf_Unsigned, Dwarf_Addr, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Addr, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4283</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_frame_fde_b(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, libdwarf.LibdwarfLibrary.Dwarf_P_Fde, libdwarf.LibdwarfLibrary.Dwarf_P_Die, long, long, long, long, long, long, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_frame_fde_b(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, long, long, long, long, long, long, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	long dwarf_add_frame_fde_b(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Fde1, Pointer Dwarf_P_Die1, long Dwarf_Unsigned1, long Dwarf_Addr1, long Dwarf_Unsigned2, long Dwarf_Unsigned3, long Dwarf_Unsigned4, long Dwarf_Addr2, Pointer Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_frame_fde_b(Dwarf_P_Debug, Dwarf_P_Fde, Dwarf_P_Die, Dwarf_Unsigned, Dwarf_Addr, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Addr, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4283</i>
	 */
	long dwarf_add_frame_fde_b(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, LibdwarfLibrary.Dwarf_P_Fde Dwarf_P_Fde1, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, long Dwarf_Unsigned1, long Dwarf_Addr1, long Dwarf_Unsigned2, long Dwarf_Unsigned3, long Dwarf_Unsigned4, long Dwarf_Addr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_frame_fde_b(Dwarf_P_Debug, Dwarf_P_Fde, Dwarf_P_Die, Dwarf_Unsigned, Dwarf_Addr, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Addr, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4283</i>
	 */
	long dwarf_add_frame_fde_b(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Fde1, Pointer Dwarf_P_Die1, long Dwarf_Unsigned1, long Dwarf_Addr1, long Dwarf_Unsigned2, long Dwarf_Unsigned3, long Dwarf_Unsigned4, long Dwarf_Addr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * Original signature : <code>int dwarf_add_frame_fde_c(Dwarf_P_Debug, Dwarf_P_Fde, Dwarf_P_Die, Dwarf_Unsigned, Dwarf_Addr, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Addr, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4296</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_frame_fde_c(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, libdwarf.LibdwarfLibrary.Dwarf_P_Fde, libdwarf.LibdwarfLibrary.Dwarf_P_Die, long, long, long, long, long, long, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_frame_fde_c(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, long, long, long, long, long, long, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_add_frame_fde_c(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Fde1, Pointer Dwarf_P_Die1, long Dwarf_Unsigned1, long Dwarf_Addr1, long Dwarf_Unsigned2, long Dwarf_Unsigned3, long Dwarf_Unsigned4, long Dwarf_Addr2, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * Original signature : <code>int dwarf_add_frame_fde_c(Dwarf_P_Debug, Dwarf_P_Fde, Dwarf_P_Die, Dwarf_Unsigned, Dwarf_Addr, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Addr, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4296</i>
	 */
	int dwarf_add_frame_fde_c(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, LibdwarfLibrary.Dwarf_P_Fde Dwarf_P_Fde1, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, long Dwarf_Unsigned1, long Dwarf_Addr1, long Dwarf_Unsigned2, long Dwarf_Unsigned3, long Dwarf_Unsigned4, long Dwarf_Addr2, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * Original signature : <code>int dwarf_add_frame_fde_c(Dwarf_P_Debug, Dwarf_P_Fde, Dwarf_P_Die, Dwarf_Unsigned, Dwarf_Addr, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Addr, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4296</i>
	 */
	int dwarf_add_frame_fde_c(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Fde1, Pointer Dwarf_P_Die1, long Dwarf_Unsigned1, long Dwarf_Addr1, long Dwarf_Unsigned2, long Dwarf_Unsigned3, long Dwarf_Unsigned4, long Dwarf_Addr2, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * Original signature : <code>int dwarf_add_frame_info_c(Dwarf_P_Debug, Dwarf_P_Fde, Dwarf_P_Die, Dwarf_Unsigned, Dwarf_Addr, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Addr, Dwarf_Signed, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4310</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_frame_info_c(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, libdwarf.LibdwarfLibrary.Dwarf_P_Fde, libdwarf.LibdwarfLibrary.Dwarf_P_Die, long, long, long, long, long, long, long, long, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_frame_info_c(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, long, long, long, long, long, long, long, long, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_add_frame_info_c(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Fde1, Pointer Dwarf_P_Die1, long Dwarf_Unsigned1, long Dwarf_Addr1, long Dwarf_Unsigned2, long Dwarf_Unsigned3, long Dwarf_Unsigned4, long Dwarf_Addr2, long Dwarf_Signed1, long Dwarf_Unsigned5, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * Original signature : <code>int dwarf_add_frame_info_c(Dwarf_P_Debug, Dwarf_P_Fde, Dwarf_P_Die, Dwarf_Unsigned, Dwarf_Addr, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Addr, Dwarf_Signed, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4310</i>
	 */
	int dwarf_add_frame_info_c(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, LibdwarfLibrary.Dwarf_P_Fde Dwarf_P_Fde1, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, long Dwarf_Unsigned1, long Dwarf_Addr1, long Dwarf_Unsigned2, long Dwarf_Unsigned3, long Dwarf_Unsigned4, long Dwarf_Addr2, long Dwarf_Signed1, long Dwarf_Unsigned5, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * Original signature : <code>int dwarf_add_frame_info_c(Dwarf_P_Debug, Dwarf_P_Fde, Dwarf_P_Die, Dwarf_Unsigned, Dwarf_Addr, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Addr, Dwarf_Signed, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4310</i>
	 */
	int dwarf_add_frame_info_c(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Fde1, Pointer Dwarf_P_Die1, long Dwarf_Unsigned1, long Dwarf_Addr1, long Dwarf_Unsigned2, long Dwarf_Unsigned3, long Dwarf_Unsigned4, long Dwarf_Addr2, long Dwarf_Signed1, long Dwarf_Unsigned5, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_frame_info_b(Dwarf_P_Debug, Dwarf_P_Fde, Dwarf_P_Die, Dwarf_Unsigned, Dwarf_Addr, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Addr, Dwarf_Signed, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4325</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_frame_info_b(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, libdwarf.LibdwarfLibrary.Dwarf_P_Fde, libdwarf.LibdwarfLibrary.Dwarf_P_Die, long, long, long, long, long, long, long, long, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_frame_info_b(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, long, long, long, long, long, long, long, long, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	long dwarf_add_frame_info_b(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Fde1, Pointer Dwarf_P_Die1, long Dwarf_Unsigned1, long Dwarf_Addr1, long Dwarf_Unsigned2, long Dwarf_Unsigned3, long Dwarf_Unsigned4, long Dwarf_Addr2, long Dwarf_Signed1, long Dwarf_Unsigned5, Pointer Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_frame_info_b(Dwarf_P_Debug, Dwarf_P_Fde, Dwarf_P_Die, Dwarf_Unsigned, Dwarf_Addr, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Addr, Dwarf_Signed, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4325</i>
	 */
	long dwarf_add_frame_info_b(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, LibdwarfLibrary.Dwarf_P_Fde Dwarf_P_Fde1, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, long Dwarf_Unsigned1, long Dwarf_Addr1, long Dwarf_Unsigned2, long Dwarf_Unsigned3, long Dwarf_Unsigned4, long Dwarf_Addr2, long Dwarf_Signed1, long Dwarf_Unsigned5, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_frame_info_b(Dwarf_P_Debug, Dwarf_P_Fde, Dwarf_P_Die, Dwarf_Unsigned, Dwarf_Addr, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Addr, Dwarf_Signed, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4325</i>
	 */
	long dwarf_add_frame_info_b(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Fde1, Pointer Dwarf_P_Die1, long Dwarf_Unsigned1, long Dwarf_Addr1, long Dwarf_Unsigned2, long Dwarf_Unsigned3, long Dwarf_Unsigned4, long Dwarf_Addr2, long Dwarf_Signed1, long Dwarf_Unsigned5, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_frame_info(Dwarf_P_Debug, Dwarf_P_Fde, Dwarf_P_Die, Dwarf_Unsigned, Dwarf_Addr, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Signed, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4339</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_frame_info(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, libdwarf.LibdwarfLibrary.Dwarf_P_Fde, libdwarf.LibdwarfLibrary.Dwarf_P_Die, long, long, long, long, long, long, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_frame_info(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, long, long, long, long, long, long, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	long dwarf_add_frame_info(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Fde1, Pointer Dwarf_P_Die1, long Dwarf_Unsigned1, long Dwarf_Addr1, long Dwarf_Unsigned2, long Dwarf_Unsigned3, long Dwarf_Signed1, long Dwarf_Unsigned4, Pointer Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_frame_info(Dwarf_P_Debug, Dwarf_P_Fde, Dwarf_P_Die, Dwarf_Unsigned, Dwarf_Addr, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Signed, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4339</i>
	 */
	long dwarf_add_frame_info(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, LibdwarfLibrary.Dwarf_P_Fde Dwarf_P_Fde1, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, long Dwarf_Unsigned1, long Dwarf_Addr1, long Dwarf_Unsigned2, long Dwarf_Unsigned3, long Dwarf_Signed1, long Dwarf_Unsigned4, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_frame_info(Dwarf_P_Debug, Dwarf_P_Fde, Dwarf_P_Die, Dwarf_Unsigned, Dwarf_Addr, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Signed, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4339</i>
	 */
	long dwarf_add_frame_info(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Fde1, Pointer Dwarf_P_Die1, long Dwarf_Unsigned1, long Dwarf_Addr1, long Dwarf_Unsigned2, long Dwarf_Unsigned3, long Dwarf_Signed1, long Dwarf_Unsigned4, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * The fde returned is just the one passed in. Silly.<br>
	 * Original signature : <code>Dwarf_P_Fde dwarf_add_fde_inst(Dwarf_P_Fde, Dwarf_Small, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4352</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_fde_inst(libdwarf.LibdwarfLibrary.Dwarf_P_Fde, byte, long, long, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_fde_inst(com.sun.jna.Pointer, byte, long, long, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	LibdwarfLibrary.Dwarf_P_Fde dwarf_add_fde_inst(Pointer Dwarf_P_Fde1, byte Dwarf_Small1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, Pointer Dwarf_ErrorPtr1);
	/**
	 * The fde returned is just the one passed in. Silly.<br>
	 * Original signature : <code>Dwarf_P_Fde dwarf_add_fde_inst(Dwarf_P_Fde, Dwarf_Small, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4352</i>
	 */
	LibdwarfLibrary.Dwarf_P_Fde dwarf_add_fde_inst(LibdwarfLibrary.Dwarf_P_Fde Dwarf_P_Fde1, byte Dwarf_Small1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * The fde returned is just the one passed in. Silly.<br>
	 * Original signature : <code>Dwarf_P_Fde dwarf_add_fde_inst(Dwarf_P_Fde, Dwarf_Small, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4352</i>
	 */
	LibdwarfLibrary.Dwarf_P_Fde dwarf_add_fde_inst(Pointer Dwarf_P_Fde1, byte Dwarf_Small1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * Original signature : <code>int dwarf_add_fde_inst_a(Dwarf_P_Fde, Dwarf_Small, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4360</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_fde_inst_a(libdwarf.LibdwarfLibrary.Dwarf_P_Fde, byte, long, long, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_fde_inst_a(com.sun.jna.Pointer, byte, long, long, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_add_fde_inst_a(Pointer Dwarf_P_Fde1, byte Dwarf_Small1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, Pointer Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * Original signature : <code>int dwarf_add_fde_inst_a(Dwarf_P_Fde, Dwarf_Small, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4360</i>
	 */
	int dwarf_add_fde_inst_a(LibdwarfLibrary.Dwarf_P_Fde Dwarf_P_Fde1, byte Dwarf_Small1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * Original signature : <code>int dwarf_add_fde_inst_a(Dwarf_P_Fde, Dwarf_Small, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4360</i>
	 */
	int dwarf_add_fde_inst_a(Pointer Dwarf_P_Fde1, byte Dwarf_Small1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New September 17, 2009<br>
	 * Original signature : <code>int dwarf_insert_fde_inst_bytes(Dwarf_P_Debug, Dwarf_P_Fde, Dwarf_Unsigned, Dwarf_Ptr, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4368</i><br>
	 * @deprecated use the safer methods {@link #dwarf_insert_fde_inst_bytes(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, libdwarf.LibdwarfLibrary.Dwarf_P_Fde, long, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_insert_fde_inst_bytes(com.sun.jna.Pointer, com.sun.jna.Pointer, long, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_insert_fde_inst_bytes(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Fde1, long Dwarf_Unsigned1, Pointer Dwarf_Ptr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * New September 17, 2009<br>
	 * Original signature : <code>int dwarf_insert_fde_inst_bytes(Dwarf_P_Debug, Dwarf_P_Fde, Dwarf_Unsigned, Dwarf_Ptr, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4368</i>
	 */
	int dwarf_insert_fde_inst_bytes(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, LibdwarfLibrary.Dwarf_P_Fde Dwarf_P_Fde1, long Dwarf_Unsigned1, Pointer Dwarf_Ptr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New September 17, 2009<br>
	 * Original signature : <code>int dwarf_insert_fde_inst_bytes(Dwarf_P_Debug, Dwarf_P_Fde, Dwarf_Unsigned, Dwarf_Ptr, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4368</i>
	 */
	int dwarf_insert_fde_inst_bytes(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Fde1, long Dwarf_Unsigned1, Pointer Dwarf_Ptr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>Dwarf_P_Fde dwarf_new_fde(Dwarf_P_Debug, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4375</i><br>
	 * @deprecated use the safer methods {@link #dwarf_new_fde(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_new_fde(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	LibdwarfLibrary.Dwarf_P_Fde dwarf_new_fde(Pointer Dwarf_P_Debug1, Pointer Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>Dwarf_P_Fde dwarf_new_fde(Dwarf_P_Debug, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4375</i>
	 */
	LibdwarfLibrary.Dwarf_P_Fde dwarf_new_fde(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>Dwarf_P_Fde dwarf_new_fde(Dwarf_P_Debug, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4375</i>
	 */
	LibdwarfLibrary.Dwarf_P_Fde dwarf_new_fde(Pointer Dwarf_P_Debug1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_new_fde_a(Dwarf_P_Debug, Dwarf_P_Fde*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4379</i><br>
	 * @deprecated use the safer methods {@link #dwarf_new_fde_a(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_new_fde_a(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_new_fde_a(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_FdePtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_new_fde_a(Dwarf_P_Debug, Dwarf_P_Fde*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4379</i>
	 */
	int dwarf_new_fde_a(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, PointerByReference Dwarf_P_FdePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_new_fde_a(Dwarf_P_Debug, Dwarf_P_Fde*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4379</i>
	 */
	int dwarf_new_fde_a(Pointer Dwarf_P_Debug1, PointerByReference Dwarf_P_FdePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>Dwarf_P_Fde dwarf_fde_cfa_offset(Dwarf_P_Fde, Dwarf_Unsigned, Dwarf_Signed, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4383</i><br>
	 * @deprecated use the safer methods {@link #dwarf_fde_cfa_offset(libdwarf.LibdwarfLibrary.Dwarf_P_Fde, long, long, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_fde_cfa_offset(com.sun.jna.Pointer, long, long, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	LibdwarfLibrary.Dwarf_P_Fde dwarf_fde_cfa_offset(Pointer Dwarf_P_Fde1, long Dwarf_Unsigned1, long Dwarf_Signed1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>Dwarf_P_Fde dwarf_fde_cfa_offset(Dwarf_P_Fde, Dwarf_Unsigned, Dwarf_Signed, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4383</i>
	 */
	LibdwarfLibrary.Dwarf_P_Fde dwarf_fde_cfa_offset(LibdwarfLibrary.Dwarf_P_Fde Dwarf_P_Fde1, long Dwarf_Unsigned1, long Dwarf_Signed1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>Dwarf_P_Fde dwarf_fde_cfa_offset(Dwarf_P_Fde, Dwarf_Unsigned, Dwarf_Signed, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4383</i>
	 */
	LibdwarfLibrary.Dwarf_P_Fde dwarf_fde_cfa_offset(Pointer Dwarf_P_Fde1, long Dwarf_Unsigned1, long Dwarf_Signed1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * Original signature : <code>int dwarf_fde_cfa_offset_a(Dwarf_P_Fde, Dwarf_Unsigned, Dwarf_Signed, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4390</i><br>
	 * @deprecated use the safer methods {@link #dwarf_fde_cfa_offset_a(libdwarf.LibdwarfLibrary.Dwarf_P_Fde, long, long, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_fde_cfa_offset_a(com.sun.jna.Pointer, long, long, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_fde_cfa_offset_a(Pointer Dwarf_P_Fde1, long Dwarf_Unsigned1, long Dwarf_Signed1, Pointer Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * Original signature : <code>int dwarf_fde_cfa_offset_a(Dwarf_P_Fde, Dwarf_Unsigned, Dwarf_Signed, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4390</i>
	 */
	int dwarf_fde_cfa_offset_a(LibdwarfLibrary.Dwarf_P_Fde Dwarf_P_Fde1, long Dwarf_Unsigned1, long Dwarf_Signed1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * Original signature : <code>int dwarf_fde_cfa_offset_a(Dwarf_P_Fde, Dwarf_Unsigned, Dwarf_Signed, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4390</i>
	 */
	int dwarf_fde_cfa_offset_a(Pointer Dwarf_P_Fde1, long Dwarf_Unsigned1, long Dwarf_Signed1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * die creation & addition routines<br>
	 * dwarf_new_die_a() new September 2016.<br>
	 * Preferred over dwarf_new_die().<br>
	 * Original signature : <code>int dwarf_new_die_a(Dwarf_P_Debug, Dwarf_Tag, Dwarf_P_Die, Dwarf_P_Die, Dwarf_P_Die, Dwarf_P_Die, Dwarf_P_Die*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4399</i><br>
	 * @deprecated use the safer methods {@link #dwarf_new_die_a(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, long, libdwarf.LibdwarfLibrary.Dwarf_P_Die, libdwarf.LibdwarfLibrary.Dwarf_P_Die, libdwarf.LibdwarfLibrary.Dwarf_P_Die, libdwarf.LibdwarfLibrary.Dwarf_P_Die, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_new_die_a(com.sun.jna.Pointer, long, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_new_die_a(Pointer Dwarf_P_Debug1, long Dwarf_Tag1, Pointer Dwarf_P_Die1, Pointer Dwarf_P_Die2, Pointer Dwarf_P_Die3, Pointer Dwarf_P_Die4, Pointer Dwarf_P_DiePtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * die creation & addition routines<br>
	 * dwarf_new_die_a() new September 2016.<br>
	 * Preferred over dwarf_new_die().<br>
	 * Original signature : <code>int dwarf_new_die_a(Dwarf_P_Debug, Dwarf_Tag, Dwarf_P_Die, Dwarf_P_Die, Dwarf_P_Die, Dwarf_P_Die, Dwarf_P_Die*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4399</i>
	 */
	int dwarf_new_die_a(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, long Dwarf_Tag1, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die2, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die3, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die4, PointerByReference Dwarf_P_DiePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * die creation & addition routines<br>
	 * dwarf_new_die_a() new September 2016.<br>
	 * Preferred over dwarf_new_die().<br>
	 * Original signature : <code>int dwarf_new_die_a(Dwarf_P_Debug, Dwarf_Tag, Dwarf_P_Die, Dwarf_P_Die, Dwarf_P_Die, Dwarf_P_Die, Dwarf_P_Die*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4399</i>
	 */
	int dwarf_new_die_a(Pointer Dwarf_P_Debug1, long Dwarf_Tag1, Pointer Dwarf_P_Die1, Pointer Dwarf_P_Die2, Pointer Dwarf_P_Die3, Pointer Dwarf_P_Die4, PointerByReference Dwarf_P_DiePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>Dwarf_P_Die dwarf_new_die(Dwarf_P_Debug, Dwarf_Tag, Dwarf_P_Die, Dwarf_P_Die, Dwarf_P_Die, Dwarf_P_Die, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4409</i><br>
	 * @deprecated use the safer methods {@link #dwarf_new_die(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, long, libdwarf.LibdwarfLibrary.Dwarf_P_Die, libdwarf.LibdwarfLibrary.Dwarf_P_Die, libdwarf.LibdwarfLibrary.Dwarf_P_Die, libdwarf.LibdwarfLibrary.Dwarf_P_Die, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_new_die(com.sun.jna.Pointer, long, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	LibdwarfLibrary.Dwarf_P_Die dwarf_new_die(Pointer Dwarf_P_Debug1, long Dwarf_Tag1, Pointer Dwarf_P_Die1, Pointer Dwarf_P_Die2, Pointer Dwarf_P_Die3, Pointer Dwarf_P_Die4, Pointer Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>Dwarf_P_Die dwarf_new_die(Dwarf_P_Debug, Dwarf_Tag, Dwarf_P_Die, Dwarf_P_Die, Dwarf_P_Die, Dwarf_P_Die, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4409</i>
	 */
	LibdwarfLibrary.Dwarf_P_Die dwarf_new_die(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, long Dwarf_Tag1, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die2, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die3, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die4, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>Dwarf_P_Die dwarf_new_die(Dwarf_P_Debug, Dwarf_Tag, Dwarf_P_Die, Dwarf_P_Die, Dwarf_P_Die, Dwarf_P_Die, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4409</i>
	 */
	LibdwarfLibrary.Dwarf_P_Die dwarf_new_die(Pointer Dwarf_P_Debug1, long Dwarf_Tag1, Pointer Dwarf_P_Die1, Pointer Dwarf_P_Die2, Pointer Dwarf_P_Die3, Pointer Dwarf_P_Die4, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New September 2016.<br>
	 * Original signature : <code>int dwarf_add_die_to_debug_a(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4419</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_die_to_debug_a(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, libdwarf.LibdwarfLibrary.Dwarf_P_Die, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_die_to_debug_a(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_add_die_to_debug_a(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, Pointer Dwarf_ErrorPtr1);
	/**
	 * New September 2016.<br>
	 * Original signature : <code>int dwarf_add_die_to_debug_a(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4419</i>
	 */
	int dwarf_add_die_to_debug_a(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New September 2016.<br>
	 * Original signature : <code>int dwarf_add_die_to_debug_a(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4419</i>
	 */
	int dwarf_add_die_to_debug_a(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original form.<br>
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_die_to_debug(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4425</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_die_to_debug(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, libdwarf.LibdwarfLibrary.Dwarf_P_Die, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_die_to_debug(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	long dwarf_add_die_to_debug(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Original form.<br>
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_die_to_debug(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4425</i>
	 */
	long dwarf_add_die_to_debug(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original form.<br>
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_die_to_debug(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4425</i>
	 */
	long dwarf_add_die_to_debug(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Markers are not written  to DWARF2/3/4, they are user<br>
	 * defined and may be used for any purpose.<br>
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_die_marker(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4433</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_die_marker(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, libdwarf.LibdwarfLibrary.Dwarf_P_Die, long, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_die_marker(com.sun.jna.Pointer, com.sun.jna.Pointer, long, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	long dwarf_add_die_marker(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, long Dwarf_Unsigned1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Markers are not written  to DWARF2/3/4, they are user<br>
	 * defined and may be used for any purpose.<br>
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_die_marker(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4433</i>
	 */
	long dwarf_add_die_marker(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, long Dwarf_Unsigned1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Markers are not written  to DWARF2/3/4, they are user<br>
	 * defined and may be used for any purpose.<br>
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_die_marker(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4433</i>
	 */
	long dwarf_add_die_marker(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, long Dwarf_Unsigned1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Preferred version, new December 2018.<br>
	 * Original signature : <code>int dwarf_add_die_marker_a(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4440</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_die_marker_a(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, libdwarf.LibdwarfLibrary.Dwarf_P_Die, long, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_die_marker_a(com.sun.jna.Pointer, com.sun.jna.Pointer, long, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_add_die_marker_a(Pointer dbg, Pointer die, long marker, Pointer error);
	/**
	 * Preferred version, new December 2018.<br>
	 * Original signature : <code>int dwarf_add_die_marker_a(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4440</i>
	 */
	int dwarf_add_die_marker_a(LibdwarfLibrary.Dwarf_P_Debug dbg, LibdwarfLibrary.Dwarf_P_Die die, long marker, PointerByReference error);
	/**
	 * Preferred version, new December 2018.<br>
	 * Original signature : <code>int dwarf_add_die_marker_a(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4440</i>
	 */
	int dwarf_add_die_marker_a(Pointer dbg, Pointer die, long marker, PointerByReference error);
	/**
	 * Original signature : <code>Dwarf_Unsigned dwarf_get_die_marker(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4445</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_die_marker(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, libdwarf.LibdwarfLibrary.Dwarf_P_Die, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_die_marker(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	long dwarf_get_die_marker(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>Dwarf_Unsigned dwarf_get_die_marker(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4445</i>
	 */
	long dwarf_get_die_marker(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>Dwarf_Unsigned dwarf_get_die_marker(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4445</i>
	 */
	long dwarf_get_die_marker(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Preferred version, new December 2018.<br>
	 * Original signature : <code>int dwarf_get_die_marker_a(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4452</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_die_marker_a(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, libdwarf.LibdwarfLibrary.Dwarf_P_Die, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_die_marker_a(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_die_marker_a(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Preferred version, new December 2018.<br>
	 * Original signature : <code>int dwarf_get_die_marker_a(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4452</i>
	 */
	int dwarf_get_die_marker_a(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Preferred version, new December 2018.<br>
	 * Original signature : <code>int dwarf_get_die_marker_a(Dwarf_P_Debug, Dwarf_P_Die, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4452</i>
	 */
	int dwarf_get_die_marker_a(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New September 2016. Preferred version<br>
	 * Original signature : <code>int dwarf_die_link_a(Dwarf_P_Die, Dwarf_P_Die, Dwarf_P_Die, Dwarf_P_Die, Dwarf_P_Die, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4459</i><br>
	 * @deprecated use the safer methods {@link #dwarf_die_link_a(libdwarf.LibdwarfLibrary.Dwarf_P_Die, libdwarf.LibdwarfLibrary.Dwarf_P_Die, libdwarf.LibdwarfLibrary.Dwarf_P_Die, libdwarf.LibdwarfLibrary.Dwarf_P_Die, libdwarf.LibdwarfLibrary.Dwarf_P_Die, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_die_link_a(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_die_link_a(Pointer Dwarf_P_Die1, Pointer Dwarf_P_Die2, Pointer Dwarf_P_Die3, Pointer Dwarf_P_Die4, Pointer Dwarf_P_Die5, Pointer Dwarf_ErrorPtr1);
	/**
	 * New September 2016. Preferred version<br>
	 * Original signature : <code>int dwarf_die_link_a(Dwarf_P_Die, Dwarf_P_Die, Dwarf_P_Die, Dwarf_P_Die, Dwarf_P_Die, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4459</i>
	 */
	int dwarf_die_link_a(LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die2, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die3, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die4, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die5, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New September 2016. Preferred version<br>
	 * Original signature : <code>int dwarf_die_link_a(Dwarf_P_Die, Dwarf_P_Die, Dwarf_P_Die, Dwarf_P_Die, Dwarf_P_Die, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4459</i>
	 */
	int dwarf_die_link_a(Pointer Dwarf_P_Die1, Pointer Dwarf_P_Die2, Pointer Dwarf_P_Die3, Pointer Dwarf_P_Die4, Pointer Dwarf_P_Die5, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original version. Use dwarf_die_link_a() instead.<br>
	 * Original signature : <code>Dwarf_P_Die dwarf_die_link(Dwarf_P_Die, Dwarf_P_Die, Dwarf_P_Die, Dwarf_P_Die, Dwarf_P_Die, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4468</i><br>
	 * @deprecated use the safer methods {@link #dwarf_die_link(libdwarf.LibdwarfLibrary.Dwarf_P_Die, libdwarf.LibdwarfLibrary.Dwarf_P_Die, libdwarf.LibdwarfLibrary.Dwarf_P_Die, libdwarf.LibdwarfLibrary.Dwarf_P_Die, libdwarf.LibdwarfLibrary.Dwarf_P_Die, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_die_link(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	LibdwarfLibrary.Dwarf_P_Die dwarf_die_link(Pointer Dwarf_P_Die1, Pointer Dwarf_P_Die2, Pointer Dwarf_P_Die3, Pointer Dwarf_P_Die4, Pointer Dwarf_P_Die5, Pointer Dwarf_ErrorPtr1);
	/**
	 * Original version. Use dwarf_die_link_a() instead.<br>
	 * Original signature : <code>Dwarf_P_Die dwarf_die_link(Dwarf_P_Die, Dwarf_P_Die, Dwarf_P_Die, Dwarf_P_Die, Dwarf_P_Die, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4468</i>
	 */
	LibdwarfLibrary.Dwarf_P_Die dwarf_die_link(LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die2, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die3, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die4, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die5, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original version. Use dwarf_die_link_a() instead.<br>
	 * Original signature : <code>Dwarf_P_Die dwarf_die_link(Dwarf_P_Die, Dwarf_P_Die, Dwarf_P_Die, Dwarf_P_Die, Dwarf_P_Die, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4468</i>
	 */
	LibdwarfLibrary.Dwarf_P_Die dwarf_die_link(Pointer Dwarf_P_Die1, Pointer Dwarf_P_Die2, Pointer Dwarf_P_Die3, Pointer Dwarf_P_Die4, Pointer Dwarf_P_Die5, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>void dwarf_dealloc_compressed_block(Dwarf_P_Debug, void*)</code><br>
	 * <i>native declaration : line 4476</i><br>
	 * @deprecated use the safer methods {@link #dwarf_dealloc_compressed_block(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, com.sun.jna.Pointer)} and {@link #dwarf_dealloc_compressed_block(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void dwarf_dealloc_compressed_block(Pointer Dwarf_P_Debug1, Pointer voidPtr1);
	/**
	 * Original signature : <code>void dwarf_dealloc_compressed_block(Dwarf_P_Debug, void*)</code><br>
	 * <i>native declaration : line 4476</i>
	 */
	void dwarf_dealloc_compressed_block(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, Pointer voidPtr1);
	/**
	 * Call this passing in return value from<br>
	 * dwarf_uncompress_integer_block()<br>
	 * to free the space the decompression allocated.<br>
	 * Original signature : <code>void dwarf_dealloc_uncompressed_block(Dwarf_Debug, void*)</code><br>
	 * <i>native declaration : line 4484</i><br>
	 * @deprecated use the safer methods {@link #dwarf_dealloc_uncompressed_block(libdwarf.LibdwarfLibrary.Dwarf_Debug, com.sun.jna.Pointer)} and {@link #dwarf_dealloc_uncompressed_block(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void dwarf_dealloc_uncompressed_block(Pointer Dwarf_Debug1, Pointer voidPtr1);
	/**
	 * Call this passing in return value from<br>
	 * dwarf_uncompress_integer_block()<br>
	 * to free the space the decompression allocated.<br>
	 * Original signature : <code>void dwarf_dealloc_uncompressed_block(Dwarf_Debug, void*)</code><br>
	 * <i>native declaration : line 4484</i>
	 */
	void dwarf_dealloc_uncompressed_block(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, Pointer voidPtr1);
	/**
	 * dwarf_compress_integer_block_a( new 11 February 2019.<br>
	 * Like the earlier version this turns an array of signed<br>
	 * integers into a block of sleb values (and if the<br>
	 * values are small enough it might be a compression!<br>
	 * Or it could be an expansion...). Return DW_DLV_OK<br>
	 * on success. Supercedes dwarf_compress_integer_block():<br>
	 * as no ugly cast needed to know if<br>
	 * dwarf_compress_integer_block_a() succeeds or not.<br>
	 * Original signature : <code>int dwarf_compress_integer_block_a(Dwarf_P_Debug, Dwarf_Unsigned, Dwarf_Signed*, Dwarf_Unsigned*, void**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4497</i><br>
	 * @deprecated use the safer methods {@link #dwarf_compress_integer_block_a(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, long, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_compress_integer_block_a(com.sun.jna.Pointer, long, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_compress_integer_block_a(Pointer Dwarf_P_Debug1, long Dwarf_Unsigned1, LongByReference Dwarf_SignedPtr1, LongByReference Dwarf_UnsignedPtr1, PointerByReference voidPtrPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * dwarf_compress_integer_block_a( new 11 February 2019.<br>
	 * Like the earlier version this turns an array of signed<br>
	 * integers into a block of sleb values (and if the<br>
	 * values are small enough it might be a compression!<br>
	 * Or it could be an expansion...). Return DW_DLV_OK<br>
	 * on success. Supercedes dwarf_compress_integer_block():<br>
	 * as no ugly cast needed to know if<br>
	 * dwarf_compress_integer_block_a() succeeds or not.<br>
	 * Original signature : <code>int dwarf_compress_integer_block_a(Dwarf_P_Debug, Dwarf_Unsigned, Dwarf_Signed*, Dwarf_Unsigned*, void**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4497</i>
	 */
	int dwarf_compress_integer_block_a(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, long Dwarf_Unsigned1, LongBuffer Dwarf_SignedPtr1, LongBuffer Dwarf_UnsignedPtr1, PointerByReference voidPtrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dwarf_compress_integer_block_a( new 11 February 2019.<br>
	 * Like the earlier version this turns an array of signed<br>
	 * integers into a block of sleb values (and if the<br>
	 * values are small enough it might be a compression!<br>
	 * Or it could be an expansion...). Return DW_DLV_OK<br>
	 * on success. Supercedes dwarf_compress_integer_block():<br>
	 * as no ugly cast needed to know if<br>
	 * dwarf_compress_integer_block_a() succeeds or not.<br>
	 * Original signature : <code>int dwarf_compress_integer_block_a(Dwarf_P_Debug, Dwarf_Unsigned, Dwarf_Signed*, Dwarf_Unsigned*, void**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4497</i>
	 */
	int dwarf_compress_integer_block_a(Pointer Dwarf_P_Debug1, long Dwarf_Unsigned1, LongByReference Dwarf_SignedPtr1, LongByReference Dwarf_UnsignedPtr1, PointerByReference voidPtrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * The following should be avoided as of February 2019.<br>
	 * Original signature : <code>void* dwarf_compress_integer_block(Dwarf_P_Debug, Dwarf_Bool, Dwarf_Small, void*, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * @param Dwarf_P_Debug1 dbg<br>
	 * @param Dwarf_Bool1 signed==true (or unsigned)<br>
	 * @param Dwarf_Small1 size of integer units: 8, 16, 32, 64<br>
	 * @param voidPtr1 data<br>
	 * @param Dwarf_Unsigned1 number of elements<br>
	 * @param Dwarf_UnsignedPtr1 number of bytes in output block<br>
	 * <i>native declaration : line 4506</i><br>
	 * @deprecated use the safer methods {@link #dwarf_compress_integer_block(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, int, byte, com.sun.jna.Pointer, long, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_compress_integer_block(com.sun.jna.Pointer, int, byte, com.sun.jna.Pointer, long, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	Pointer dwarf_compress_integer_block(Pointer Dwarf_P_Debug1, int Dwarf_Bool1, byte Dwarf_Small1, Pointer voidPtr1, long Dwarf_Unsigned1, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * The following should be avoided as of February 2019.<br>
	 * Original signature : <code>void* dwarf_compress_integer_block(Dwarf_P_Debug, Dwarf_Bool, Dwarf_Small, void*, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * @param Dwarf_P_Debug1 dbg<br>
	 * @param Dwarf_Bool1 signed==true (or unsigned)<br>
	 * @param Dwarf_Small1 size of integer units: 8, 16, 32, 64<br>
	 * @param voidPtr1 data<br>
	 * @param Dwarf_Unsigned1 number of elements<br>
	 * @param Dwarf_UnsignedPtr1 number of bytes in output block<br>
	 * <i>native declaration : line 4506</i>
	 */
	Pointer dwarf_compress_integer_block(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, int Dwarf_Bool1, byte Dwarf_Small1, Pointer voidPtr1, long Dwarf_Unsigned1, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * The following should be avoided as of February 2019.<br>
	 * Original signature : <code>void* dwarf_compress_integer_block(Dwarf_P_Debug, Dwarf_Bool, Dwarf_Small, void*, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * @param Dwarf_P_Debug1 dbg<br>
	 * @param Dwarf_Bool1 signed==true (or unsigned)<br>
	 * @param Dwarf_Small1 size of integer units: 8, 16, 32, 64<br>
	 * @param voidPtr1 data<br>
	 * @param Dwarf_Unsigned1 number of elements<br>
	 * @param Dwarf_UnsignedPtr1 number of bytes in output block<br>
	 * <i>native declaration : line 4506</i>
	 */
	Pointer dwarf_compress_integer_block(Pointer Dwarf_P_Debug1, int Dwarf_Bool1, byte Dwarf_Small1, Pointer voidPtr1, long Dwarf_Unsigned1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New February 2019.  On success returns DW_DLV_OK<br>
	 * and creates an array of Dwarf_Signed values<br>
	 * from the block of sleb numbers.<br>
	 * This interface supercedes<br>
	 * dwarf_uncompress_integer_block(). No ugly<br>
	 * cast needed to know if<br>
	 * dwarf_uncompress_integer_block_a() succeeds or not.<br>
	 * Original signature : <code>int dwarf_uncompress_integer_block_a(Dwarf_Debug, Dwarf_Unsigned, void*, Dwarf_Unsigned*, Dwarf_Signed**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4523</i><br>
	 * @deprecated use the safer methods {@link #dwarf_uncompress_integer_block_a(libdwarf.LibdwarfLibrary.Dwarf_Debug, long, com.sun.jna.Pointer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_uncompress_integer_block_a(com.sun.jna.Pointer, long, com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_uncompress_integer_block_a(Pointer Dwarf_Debug1, long Dwarf_Unsigned1, Pointer voidPtr1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_SignedPtrPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * New February 2019.  On success returns DW_DLV_OK<br>
	 * and creates an array of Dwarf_Signed values<br>
	 * from the block of sleb numbers.<br>
	 * This interface supercedes<br>
	 * dwarf_uncompress_integer_block(). No ugly<br>
	 * cast needed to know if<br>
	 * dwarf_uncompress_integer_block_a() succeeds or not.<br>
	 * Original signature : <code>int dwarf_uncompress_integer_block_a(Dwarf_Debug, Dwarf_Unsigned, void*, Dwarf_Unsigned*, Dwarf_Signed**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4523</i>
	 */
	int dwarf_uncompress_integer_block_a(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, long Dwarf_Unsigned1, Pointer voidPtr1, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_SignedPtrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New February 2019.  On success returns DW_DLV_OK<br>
	 * and creates an array of Dwarf_Signed values<br>
	 * from the block of sleb numbers.<br>
	 * This interface supercedes<br>
	 * dwarf_uncompress_integer_block(). No ugly<br>
	 * cast needed to know if<br>
	 * dwarf_uncompress_integer_block_a() succeeds or not.<br>
	 * Original signature : <code>int dwarf_uncompress_integer_block_a(Dwarf_Debug, Dwarf_Unsigned, void*, Dwarf_Unsigned*, Dwarf_Signed**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4523</i>
	 */
	int dwarf_uncompress_integer_block_a(Pointer Dwarf_Debug1, long Dwarf_Unsigned1, Pointer voidPtr1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_SignedPtrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Decode an array of signed leb integers (so of course the<br>
	 * array is not composed of fixed length values, but is instead<br>
	 * a sequence of sleb values).<br>
	 * Returns a DW_DLV_BADADDR on error.<br>
	 * Otherwise returns a pointer to an array of 32bit integers.<br>
	 * The signed argument must be non-zero (the decode<br>
	 * assumes sleb integers in the input data) at this time.<br>
	 * Size of integer units must be 32 (32 bits each) at this time.<br>
	 * Number of bytes in block is a byte count (not array count).<br>
	 * Returns number of units in output block (ie, number of elements<br>
	 * of the array that the return value points to) thru the<br>
	 * argument.<br>
	 * Original signature : <code>void* dwarf_uncompress_integer_block(Dwarf_Debug, Dwarf_Bool, Dwarf_Small, void*, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * @param Dwarf_Debug1 dbg<br>
	 * @param Dwarf_Bool1 signed==true (or unsigned)<br>
	 * @param Dwarf_Small1 size of integer units: 8, 16, 32, 64<br>
	 * @param voidPtr1 input data<br>
	 * @param Dwarf_Unsigned1 number of bytes in input<br>
	 * @param Dwarf_UnsignedPtr1 number of units in output block<br>
	 * <i>native declaration : line 4543</i><br>
	 * @deprecated use the safer methods {@link #dwarf_uncompress_integer_block(libdwarf.LibdwarfLibrary.Dwarf_Debug, int, byte, com.sun.jna.Pointer, long, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_uncompress_integer_block(com.sun.jna.Pointer, int, byte, com.sun.jna.Pointer, long, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	Pointer dwarf_uncompress_integer_block(Pointer Dwarf_Debug1, int Dwarf_Bool1, byte Dwarf_Small1, Pointer voidPtr1, long Dwarf_Unsigned1, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Decode an array of signed leb integers (so of course the<br>
	 * array is not composed of fixed length values, but is instead<br>
	 * a sequence of sleb values).<br>
	 * Returns a DW_DLV_BADADDR on error.<br>
	 * Otherwise returns a pointer to an array of 32bit integers.<br>
	 * The signed argument must be non-zero (the decode<br>
	 * assumes sleb integers in the input data) at this time.<br>
	 * Size of integer units must be 32 (32 bits each) at this time.<br>
	 * Number of bytes in block is a byte count (not array count).<br>
	 * Returns number of units in output block (ie, number of elements<br>
	 * of the array that the return value points to) thru the<br>
	 * argument.<br>
	 * Original signature : <code>void* dwarf_uncompress_integer_block(Dwarf_Debug, Dwarf_Bool, Dwarf_Small, void*, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * @param Dwarf_Debug1 dbg<br>
	 * @param Dwarf_Bool1 signed==true (or unsigned)<br>
	 * @param Dwarf_Small1 size of integer units: 8, 16, 32, 64<br>
	 * @param voidPtr1 input data<br>
	 * @param Dwarf_Unsigned1 number of bytes in input<br>
	 * @param Dwarf_UnsignedPtr1 number of units in output block<br>
	 * <i>native declaration : line 4543</i>
	 */
	Pointer dwarf_uncompress_integer_block(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, int Dwarf_Bool1, byte Dwarf_Small1, Pointer voidPtr1, long Dwarf_Unsigned1, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Decode an array of signed leb integers (so of course the<br>
	 * array is not composed of fixed length values, but is instead<br>
	 * a sequence of sleb values).<br>
	 * Returns a DW_DLV_BADADDR on error.<br>
	 * Otherwise returns a pointer to an array of 32bit integers.<br>
	 * The signed argument must be non-zero (the decode<br>
	 * assumes sleb integers in the input data) at this time.<br>
	 * Size of integer units must be 32 (32 bits each) at this time.<br>
	 * Number of bytes in block is a byte count (not array count).<br>
	 * Returns number of units in output block (ie, number of elements<br>
	 * of the array that the return value points to) thru the<br>
	 * argument.<br>
	 * Original signature : <code>void* dwarf_uncompress_integer_block(Dwarf_Debug, Dwarf_Bool, Dwarf_Small, void*, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * @param Dwarf_Debug1 dbg<br>
	 * @param Dwarf_Bool1 signed==true (or unsigned)<br>
	 * @param Dwarf_Small1 size of integer units: 8, 16, 32, 64<br>
	 * @param voidPtr1 input data<br>
	 * @param Dwarf_Unsigned1 number of bytes in input<br>
	 * @param Dwarf_UnsignedPtr1 number of units in output block<br>
	 * <i>native declaration : line 4543</i>
	 */
	Pointer dwarf_uncompress_integer_block(Pointer Dwarf_Debug1, int Dwarf_Bool1, byte Dwarf_Small1, Pointer voidPtr1, long Dwarf_Unsigned1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Operations to create location expressions.<br>
	 * dbg<br>
	 * Original signature : <code>Dwarf_P_Expr dwarf_new_expr(Dwarf_P_Debug, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4554</i><br>
	 * @deprecated use the safer methods {@link #dwarf_new_expr(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_new_expr(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	LibdwarfLibrary.Dwarf_P_Expr dwarf_new_expr(Pointer Dwarf_P_Debug1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Operations to create location expressions.<br>
	 * dbg<br>
	 * Original signature : <code>Dwarf_P_Expr dwarf_new_expr(Dwarf_P_Debug, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4554</i>
	 */
	LibdwarfLibrary.Dwarf_P_Expr dwarf_new_expr(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Operations to create location expressions.<br>
	 * dbg<br>
	 * Original signature : <code>Dwarf_P_Expr dwarf_new_expr(Dwarf_P_Debug, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4554</i>
	 */
	LibdwarfLibrary.Dwarf_P_Expr dwarf_new_expr(Pointer Dwarf_P_Debug1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_new_expr_a(Dwarf_P_Debug, Dwarf_P_Expr*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4558</i><br>
	 * @deprecated use the safer methods {@link #dwarf_new_expr_a(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_new_expr_a(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_new_expr_a(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_ExprPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_new_expr_a(Dwarf_P_Debug, Dwarf_P_Expr*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4558</i>
	 */
	int dwarf_new_expr_a(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, PointerByReference Dwarf_P_ExprPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_new_expr_a(Dwarf_P_Debug, Dwarf_P_Expr*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4558</i>
	 */
	int dwarf_new_expr_a(Pointer Dwarf_P_Debug1, PointerByReference Dwarf_P_ExprPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>void dwarf_expr_reset(Dwarf_P_Expr, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4562</i><br>
	 * @deprecated use the safer methods {@link #dwarf_expr_reset(libdwarf.LibdwarfLibrary.Dwarf_P_Expr, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_expr_reset(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void dwarf_expr_reset(Pointer Dwarf_P_Expr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>void dwarf_expr_reset(Dwarf_P_Expr, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4562</i>
	 */
	void dwarf_expr_reset(LibdwarfLibrary.Dwarf_P_Expr Dwarf_P_Expr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>void dwarf_expr_reset(Dwarf_P_Expr, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4562</i>
	 */
	void dwarf_expr_reset(Pointer Dwarf_P_Expr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_expr_gen(Dwarf_P_Expr, Dwarf_Small, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4566</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_expr_gen(libdwarf.LibdwarfLibrary.Dwarf_P_Expr, byte, long, long, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_expr_gen(com.sun.jna.Pointer, byte, long, long, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	long dwarf_add_expr_gen(Pointer Dwarf_P_Expr1, byte Dwarf_Small1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, Pointer Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_expr_gen(Dwarf_P_Expr, Dwarf_Small, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4566</i>
	 */
	long dwarf_add_expr_gen(LibdwarfLibrary.Dwarf_P_Expr Dwarf_P_Expr1, byte Dwarf_Small1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_expr_gen(Dwarf_P_Expr, Dwarf_Small, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4566</i>
	 */
	long dwarf_add_expr_gen(Pointer Dwarf_P_Expr1, byte Dwarf_Small1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * Original signature : <code>int dwarf_add_expr_gen_a(Dwarf_P_Expr, Dwarf_Small, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4574</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_expr_gen_a(libdwarf.LibdwarfLibrary.Dwarf_P_Expr, byte, long, long, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_expr_gen_a(com.sun.jna.Pointer, byte, long, long, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_add_expr_gen_a(Pointer Dwarf_P_Expr1, byte Dwarf_Small1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * Original signature : <code>int dwarf_add_expr_gen_a(Dwarf_P_Expr, Dwarf_Small, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4574</i>
	 */
	int dwarf_add_expr_gen_a(LibdwarfLibrary.Dwarf_P_Expr Dwarf_P_Expr1, byte Dwarf_Small1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * Original signature : <code>int dwarf_add_expr_gen_a(Dwarf_P_Expr, Dwarf_Small, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4574</i>
	 */
	int dwarf_add_expr_gen_a(Pointer Dwarf_P_Expr1, byte Dwarf_Small1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_expr_addr(Dwarf_P_Expr, Dwarf_Unsigned, Dwarf_Signed, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4582</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_expr_addr(libdwarf.LibdwarfLibrary.Dwarf_P_Expr, long, long, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_expr_addr(com.sun.jna.Pointer, long, long, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	long dwarf_add_expr_addr(Pointer Dwarf_P_Expr1, long Dwarf_Unsigned1, long Dwarf_Signed1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_expr_addr(Dwarf_P_Expr, Dwarf_Unsigned, Dwarf_Signed, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4582</i>
	 */
	long dwarf_add_expr_addr(LibdwarfLibrary.Dwarf_P_Expr Dwarf_P_Expr1, long Dwarf_Unsigned1, long Dwarf_Signed1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_expr_addr(Dwarf_P_Expr, Dwarf_Unsigned, Dwarf_Signed, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4582</i>
	 */
	long dwarf_add_expr_addr(Pointer Dwarf_P_Expr1, long Dwarf_Unsigned1, long Dwarf_Signed1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_expr_addr_b(Dwarf_P_Expr, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4588</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_expr_addr_b(libdwarf.LibdwarfLibrary.Dwarf_P_Expr, long, long, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_expr_addr_b(com.sun.jna.Pointer, long, long, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	long dwarf_add_expr_addr_b(Pointer Dwarf_P_Expr1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, Pointer Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_expr_addr_b(Dwarf_P_Expr, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4588</i>
	 */
	long dwarf_add_expr_addr_b(LibdwarfLibrary.Dwarf_P_Expr Dwarf_P_Expr1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_expr_addr_b(Dwarf_P_Expr, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4588</i>
	 */
	long dwarf_add_expr_addr_b(Pointer Dwarf_P_Expr1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * Original signature : <code>int dwarf_add_expr_addr_c(Dwarf_P_Expr, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4596</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_expr_addr_c(libdwarf.LibdwarfLibrary.Dwarf_P_Expr, long, long, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_expr_addr_c(com.sun.jna.Pointer, long, long, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_add_expr_addr_c(Pointer Dwarf_P_Expr1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * Original signature : <code>int dwarf_add_expr_addr_c(Dwarf_P_Expr, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4596</i>
	 */
	int dwarf_add_expr_addr_c(LibdwarfLibrary.Dwarf_P_Expr Dwarf_P_Expr1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * Original signature : <code>int dwarf_add_expr_addr_c(Dwarf_P_Expr, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4596</i>
	 */
	int dwarf_add_expr_addr_c(Pointer Dwarf_P_Expr1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>Dwarf_Unsigned dwarf_expr_current_offset(Dwarf_P_Expr, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4603</i><br>
	 * @deprecated use the safer methods {@link #dwarf_expr_current_offset(libdwarf.LibdwarfLibrary.Dwarf_P_Expr, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_expr_current_offset(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	long dwarf_expr_current_offset(Pointer Dwarf_P_Expr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>Dwarf_Unsigned dwarf_expr_current_offset(Dwarf_P_Expr, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4603</i>
	 */
	long dwarf_expr_current_offset(LibdwarfLibrary.Dwarf_P_Expr Dwarf_P_Expr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>Dwarf_Unsigned dwarf_expr_current_offset(Dwarf_P_Expr, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4603</i>
	 */
	long dwarf_expr_current_offset(Pointer Dwarf_P_Expr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * Original signature : <code>int dwarf_expr_current_offset_a(Dwarf_P_Expr, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4608</i><br>
	 * @deprecated use the safer methods {@link #dwarf_expr_current_offset_a(libdwarf.LibdwarfLibrary.Dwarf_P_Expr, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_expr_current_offset_a(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_expr_current_offset_a(Pointer Dwarf_P_Expr1, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * Original signature : <code>int dwarf_expr_current_offset_a(Dwarf_P_Expr, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4608</i>
	 */
	int dwarf_expr_current_offset_a(LibdwarfLibrary.Dwarf_P_Expr Dwarf_P_Expr1, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * Original signature : <code>int dwarf_expr_current_offset_a(Dwarf_P_Expr, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4608</i>
	 */
	int dwarf_expr_current_offset_a(Pointer Dwarf_P_Expr1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>Dwarf_Addr dwarf_expr_into_block(Dwarf_P_Expr, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4613</i><br>
	 * @deprecated use the safer methods {@link #dwarf_expr_into_block(libdwarf.LibdwarfLibrary.Dwarf_P_Expr, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_expr_into_block(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	long dwarf_expr_into_block(Pointer Dwarf_P_Expr1, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>Dwarf_Addr dwarf_expr_into_block(Dwarf_P_Expr, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4613</i>
	 */
	long dwarf_expr_into_block(LibdwarfLibrary.Dwarf_P_Expr Dwarf_P_Expr1, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>Dwarf_Addr dwarf_expr_into_block(Dwarf_P_Expr, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4613</i>
	 */
	long dwarf_expr_into_block(Pointer Dwarf_P_Expr1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * Original signature : <code>int dwarf_expr_into_block_a(Dwarf_P_Expr, Dwarf_Unsigned*, Dwarf_Small**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4619</i><br>
	 * @deprecated use the safer methods {@link #dwarf_expr_into_block_a(libdwarf.LibdwarfLibrary.Dwarf_P_Expr, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_expr_into_block_a(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_expr_into_block_a(Pointer Dwarf_P_Expr1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_SmallPtrPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * Original signature : <code>int dwarf_expr_into_block_a(Dwarf_P_Expr, Dwarf_Unsigned*, Dwarf_Small**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4619</i>
	 */
	int dwarf_expr_into_block_a(LibdwarfLibrary.Dwarf_P_Expr Dwarf_P_Expr1, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_SmallPtrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * Original signature : <code>int dwarf_expr_into_block_a(Dwarf_P_Expr, Dwarf_Unsigned*, Dwarf_Small**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4619</i>
	 */
	int dwarf_expr_into_block_a(Pointer Dwarf_P_Expr1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_SmallPtrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_arange(Dwarf_P_Debug, Dwarf_Addr, Dwarf_Unsigned, Dwarf_Signed, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4625</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_arange(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, long, long, long, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_arange(com.sun.jna.Pointer, long, long, long, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	long dwarf_add_arange(Pointer Dwarf_P_Debug1, long Dwarf_Addr1, long Dwarf_Unsigned1, long Dwarf_Signed1, Pointer Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_arange(Dwarf_P_Debug, Dwarf_Addr, Dwarf_Unsigned, Dwarf_Signed, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4625</i>
	 */
	long dwarf_add_arange(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, long Dwarf_Addr1, long Dwarf_Unsigned1, long Dwarf_Signed1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_arange(Dwarf_P_Debug, Dwarf_Addr, Dwarf_Unsigned, Dwarf_Signed, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4625</i>
	 */
	long dwarf_add_arange(Pointer Dwarf_P_Debug1, long Dwarf_Addr1, long Dwarf_Unsigned1, long Dwarf_Signed1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_arange_b(Dwarf_P_Debug, Dwarf_Addr, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Addr, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4631</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_arange_b(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, long, long, long, long, long, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_arange_b(com.sun.jna.Pointer, long, long, long, long, long, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	long dwarf_add_arange_b(Pointer Dwarf_P_Debug1, long Dwarf_Addr1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, long Dwarf_Unsigned3, long Dwarf_Addr2, Pointer Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_arange_b(Dwarf_P_Debug, Dwarf_Addr, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Addr, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4631</i>
	 */
	long dwarf_add_arange_b(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, long Dwarf_Addr1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, long Dwarf_Unsigned3, long Dwarf_Addr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_arange_b(Dwarf_P_Debug, Dwarf_Addr, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Addr, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4631</i>
	 */
	long dwarf_add_arange_b(Pointer Dwarf_P_Debug1, long Dwarf_Addr1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, long Dwarf_Unsigned3, long Dwarf_Addr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * Original signature : <code>int dwarf_add_arange_c(Dwarf_P_Debug, Dwarf_Addr, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Addr, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4641</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_arange_c(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, long, long, long, long, long, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_arange_c(com.sun.jna.Pointer, long, long, long, long, long, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_add_arange_c(Pointer Dwarf_P_Debug1, long Dwarf_Addr1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, long Dwarf_Unsigned3, long Dwarf_Addr2, Pointer Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * Original signature : <code>int dwarf_add_arange_c(Dwarf_P_Debug, Dwarf_Addr, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Addr, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4641</i>
	 */
	int dwarf_add_arange_c(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, long Dwarf_Addr1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, long Dwarf_Unsigned3, long Dwarf_Addr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * Original signature : <code>int dwarf_add_arange_c(Dwarf_P_Debug, Dwarf_Addr, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Addr, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4641</i>
	 */
	int dwarf_add_arange_c(Pointer Dwarf_P_Debug1, long Dwarf_Addr1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, long Dwarf_Unsigned3, long Dwarf_Addr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_pubname(Dwarf_P_Debug, Dwarf_P_Die, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4650</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_pubname(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, libdwarf.LibdwarfLibrary.Dwarf_P_Die, java.nio.ByteBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_pubname(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	long dwarf_add_pubname(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, Pointer charPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_pubname(Dwarf_P_Debug, Dwarf_P_Die, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4650</i>
	 */
	long dwarf_add_pubname(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, ByteBuffer charPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_pubname(Dwarf_P_Debug, Dwarf_P_Die, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4650</i>
	 */
	long dwarf_add_pubname(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, Pointer charPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * Original signature : <code>int dwarf_add_pubname_a(Dwarf_P_Debug, Dwarf_P_Die, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4657</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_pubname_a(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, libdwarf.LibdwarfLibrary.Dwarf_P_Die, java.nio.ByteBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_pubname_a(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_add_pubname_a(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, Pointer charPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * Original signature : <code>int dwarf_add_pubname_a(Dwarf_P_Debug, Dwarf_P_Die, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4657</i>
	 */
	int dwarf_add_pubname_a(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, ByteBuffer charPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * Original signature : <code>int dwarf_add_pubname_a(Dwarf_P_Debug, Dwarf_P_Die, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4657</i>
	 */
	int dwarf_add_pubname_a(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, Pointer charPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Added 17 October 2013.  Introduced in DWARF3.<br>
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_pubtype(Dwarf_P_Debug, Dwarf_P_Die, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4664</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_pubtype(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, libdwarf.LibdwarfLibrary.Dwarf_P_Die, java.nio.ByteBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_pubtype(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	long dwarf_add_pubtype(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, Pointer charPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Added 17 October 2013.  Introduced in DWARF3.<br>
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_pubtype(Dwarf_P_Debug, Dwarf_P_Die, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4664</i>
	 */
	long dwarf_add_pubtype(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, ByteBuffer charPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Added 17 October 2013.  Introduced in DWARF3.<br>
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_pubtype(Dwarf_P_Debug, Dwarf_P_Die, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4664</i>
	 */
	long dwarf_add_pubtype(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, Pointer charPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * Original signature : <code>int dwarf_add_pubtype_a(Dwarf_P_Debug, Dwarf_P_Die, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4671</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_pubtype_a(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, libdwarf.LibdwarfLibrary.Dwarf_P_Die, java.nio.ByteBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_pubtype_a(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_add_pubtype_a(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, Pointer charPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * Original signature : <code>int dwarf_add_pubtype_a(Dwarf_P_Debug, Dwarf_P_Die, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4671</i>
	 */
	int dwarf_add_pubtype_a(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, ByteBuffer charPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * Original signature : <code>int dwarf_add_pubtype_a(Dwarf_P_Debug, Dwarf_P_Die, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4671</i>
	 */
	int dwarf_add_pubtype_a(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, Pointer charPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_funcname(Dwarf_P_Debug, Dwarf_P_Die, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4677</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_funcname(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, libdwarf.LibdwarfLibrary.Dwarf_P_Die, java.nio.ByteBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_funcname(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	long dwarf_add_funcname(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, Pointer charPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_funcname(Dwarf_P_Debug, Dwarf_P_Die, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4677</i>
	 */
	long dwarf_add_funcname(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, ByteBuffer charPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_funcname(Dwarf_P_Debug, Dwarf_P_Die, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4677</i>
	 */
	long dwarf_add_funcname(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, Pointer charPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * Original signature : <code>int dwarf_add_funcname_a(Dwarf_P_Debug, Dwarf_P_Die, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4684</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_funcname_a(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, libdwarf.LibdwarfLibrary.Dwarf_P_Die, java.nio.ByteBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_funcname_a(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_add_funcname_a(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, Pointer charPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * Original signature : <code>int dwarf_add_funcname_a(Dwarf_P_Debug, Dwarf_P_Die, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4684</i>
	 */
	int dwarf_add_funcname_a(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, ByteBuffer charPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * Original signature : <code>int dwarf_add_funcname_a(Dwarf_P_Debug, Dwarf_P_Die, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4684</i>
	 */
	int dwarf_add_funcname_a(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, Pointer charPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_typename(Dwarf_P_Debug, Dwarf_P_Die, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4690</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_typename(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, libdwarf.LibdwarfLibrary.Dwarf_P_Die, java.nio.ByteBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_typename(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	long dwarf_add_typename(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, Pointer charPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_typename(Dwarf_P_Debug, Dwarf_P_Die, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4690</i>
	 */
	long dwarf_add_typename(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, ByteBuffer charPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_typename(Dwarf_P_Debug, Dwarf_P_Die, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4690</i>
	 */
	long dwarf_add_typename(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, Pointer charPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * Original signature : <code>int dwarf_add_typename_a(Dwarf_P_Debug, Dwarf_P_Die, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4697</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_typename_a(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, libdwarf.LibdwarfLibrary.Dwarf_P_Die, java.nio.ByteBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_typename_a(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_add_typename_a(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, Pointer charPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * Original signature : <code>int dwarf_add_typename_a(Dwarf_P_Debug, Dwarf_P_Die, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4697</i>
	 */
	int dwarf_add_typename_a(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, ByteBuffer charPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * Original signature : <code>int dwarf_add_typename_a(Dwarf_P_Debug, Dwarf_P_Die, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4697</i>
	 */
	int dwarf_add_typename_a(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, Pointer charPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_varname(Dwarf_P_Debug, Dwarf_P_Die, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4703</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_varname(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, libdwarf.LibdwarfLibrary.Dwarf_P_Die, java.nio.ByteBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_varname(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	long dwarf_add_varname(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, Pointer charPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_varname(Dwarf_P_Debug, Dwarf_P_Die, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4703</i>
	 */
	long dwarf_add_varname(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, ByteBuffer charPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_varname(Dwarf_P_Debug, Dwarf_P_Die, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4703</i>
	 */
	long dwarf_add_varname(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, Pointer charPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * Original signature : <code>int dwarf_add_varname_a(Dwarf_P_Debug, Dwarf_P_Die, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4710</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_varname_a(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, libdwarf.LibdwarfLibrary.Dwarf_P_Die, java.nio.ByteBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_varname_a(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_add_varname_a(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, Pointer charPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * Original signature : <code>int dwarf_add_varname_a(Dwarf_P_Debug, Dwarf_P_Die, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4710</i>
	 */
	int dwarf_add_varname_a(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, ByteBuffer charPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New December 2018. Preferred version.<br>
	 * Original signature : <code>int dwarf_add_varname_a(Dwarf_P_Debug, Dwarf_P_Die, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4710</i>
	 */
	int dwarf_add_varname_a(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, Pointer charPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_weakname(Dwarf_P_Debug, Dwarf_P_Die, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4716</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_weakname(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, libdwarf.LibdwarfLibrary.Dwarf_P_Die, java.nio.ByteBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_weakname(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	long dwarf_add_weakname(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, Pointer charPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_weakname(Dwarf_P_Debug, Dwarf_P_Die, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4716</i>
	 */
	long dwarf_add_weakname(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, ByteBuffer charPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>Dwarf_Unsigned dwarf_add_weakname(Dwarf_P_Debug, Dwarf_P_Die, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4716</i>
	 */
	long dwarf_add_weakname(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, Pointer charPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>int dwarf_add_weakname_a(Dwarf_P_Debug, Dwarf_P_Die, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4722</i><br>
	 * @deprecated use the safer methods {@link #dwarf_add_weakname_a(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, libdwarf.LibdwarfLibrary.Dwarf_P_Die, java.nio.ByteBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_add_weakname_a(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_add_weakname_a(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, Pointer charPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>int dwarf_add_weakname_a(Dwarf_P_Debug, Dwarf_P_Die, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4722</i>
	 */
	int dwarf_add_weakname_a(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, LibdwarfLibrary.Dwarf_P_Die Dwarf_P_Die1, ByteBuffer charPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>int dwarf_add_weakname_a(Dwarf_P_Debug, Dwarf_P_Die, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4722</i>
	 */
	int dwarf_add_weakname_a(Pointer Dwarf_P_Debug1, Pointer Dwarf_P_Die1, Pointer charPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dwarf_force_debug_names forces creation<br>
	 * of .debug_names (if DWARF5 being produced)<br>
	 * even if empty. Only for testing libdwarf.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_force_debug_names(Dwarf_P_Debug, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4733</i><br>
	 * @deprecated use the safer methods {@link #dwarf_force_debug_names(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_force_debug_names(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_force_debug_names(Pointer Dwarf_P_Debug1, Pointer Dwarf_ErrorPtr1);
	/**
	 * dwarf_force_debug_names forces creation<br>
	 * of .debug_names (if DWARF5 being produced)<br>
	 * even if empty. Only for testing libdwarf.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_force_debug_names(Dwarf_P_Debug, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4733</i>
	 */
	int dwarf_force_debug_names(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dwarf_force_debug_names forces creation<br>
	 * of .debug_names (if DWARF5 being produced)<br>
	 * even if empty. Only for testing libdwarf.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_force_debug_names(Dwarf_P_Debug, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4733</i>
	 */
	int dwarf_force_debug_names(Pointer Dwarf_P_Debug1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * .debug_macinfo producer functions<br>
	 * Functions must be called in right order: the section is output<br>
	 * In the order these are presented.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_def_macro(Dwarf_P_Debug, Dwarf_Unsigned, char*, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4744</i><br>
	 * @deprecated use the safer methods {@link #dwarf_def_macro(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, long, java.nio.ByteBuffer, java.nio.ByteBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_def_macro(com.sun.jna.Pointer, long, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_def_macro(Pointer Dwarf_P_Debug1, long Dwarf_Unsigned1, Pointer charPtr1, Pointer charPtr2, Pointer Dwarf_ErrorPtr1);
	/**
	 * .debug_macinfo producer functions<br>
	 * Functions must be called in right order: the section is output<br>
	 * In the order these are presented.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_def_macro(Dwarf_P_Debug, Dwarf_Unsigned, char*, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4744</i>
	 */
	int dwarf_def_macro(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, long Dwarf_Unsigned1, ByteBuffer charPtr1, ByteBuffer charPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * .debug_macinfo producer functions<br>
	 * Functions must be called in right order: the section is output<br>
	 * In the order these are presented.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_def_macro(Dwarf_P_Debug, Dwarf_Unsigned, char*, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4744</i>
	 */
	int dwarf_def_macro(Pointer Dwarf_P_Debug1, long Dwarf_Unsigned1, Pointer charPtr1, Pointer charPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_undef_macro(Dwarf_P_Debug, Dwarf_Unsigned, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4750</i><br>
	 * @deprecated use the safer methods {@link #dwarf_undef_macro(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, long, java.nio.ByteBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_undef_macro(com.sun.jna.Pointer, long, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_undef_macro(Pointer Dwarf_P_Debug1, long Dwarf_Unsigned1, Pointer charPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_undef_macro(Dwarf_P_Debug, Dwarf_Unsigned, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4750</i>
	 */
	int dwarf_undef_macro(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, long Dwarf_Unsigned1, ByteBuffer charPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_undef_macro(Dwarf_P_Debug, Dwarf_Unsigned, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4750</i>
	 */
	int dwarf_undef_macro(Pointer Dwarf_P_Debug1, long Dwarf_Unsigned1, Pointer charPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_start_macro_file(Dwarf_P_Debug, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4755</i><br>
	 * @deprecated use the safer methods {@link #dwarf_start_macro_file(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, long, long, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_start_macro_file(com.sun.jna.Pointer, long, long, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_start_macro_file(Pointer Dwarf_P_Debug1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, Pointer Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_start_macro_file(Dwarf_P_Debug, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4755</i>
	 */
	int dwarf_start_macro_file(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_start_macro_file(Dwarf_P_Debug, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4755</i>
	 */
	int dwarf_start_macro_file(Pointer Dwarf_P_Debug1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_end_macro_file(Dwarf_P_Debug, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4760</i><br>
	 * @deprecated use the safer methods {@link #dwarf_end_macro_file(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_end_macro_file(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_end_macro_file(Pointer Dwarf_P_Debug1, Pointer Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_end_macro_file(Dwarf_P_Debug, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4760</i>
	 */
	int dwarf_end_macro_file(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_end_macro_file(Dwarf_P_Debug, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4760</i>
	 */
	int dwarf_end_macro_file(Pointer Dwarf_P_Debug1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_vendor_ext(Dwarf_P_Debug, Dwarf_Unsigned, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4763</i><br>
	 * @deprecated use the safer methods {@link #dwarf_vendor_ext(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, long, java.nio.ByteBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_vendor_ext(com.sun.jna.Pointer, long, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_vendor_ext(Pointer Dwarf_P_Debug1, long Dwarf_Unsigned1, Pointer charPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_vendor_ext(Dwarf_P_Debug, Dwarf_Unsigned, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4763</i>
	 */
	int dwarf_vendor_ext(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, long Dwarf_Unsigned1, ByteBuffer charPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_vendor_ext(Dwarf_P_Debug, Dwarf_Unsigned, char*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4763</i>
	 */
	int dwarf_vendor_ext(Pointer Dwarf_P_Debug1, long Dwarf_Unsigned1, Pointer charPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * die<br>
	 * Original signature : <code>int dwarf_attr_offset(Dwarf_Die, Dwarf_Attribute, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4770</i><br>
	 * @deprecated use the safer methods {@link #dwarf_attr_offset(libdwarf.LibdwarfLibrary.Dwarf_Die, libdwarf.LibdwarfLibrary.Dwarf_Attribute, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_attr_offset(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_attr_offset(Pointer Dwarf_Die1, Pointer Dwarf_Attribute1, LongByReference Dwarf_OffPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * die<br>
	 * Original signature : <code>int dwarf_attr_offset(Dwarf_Die, Dwarf_Attribute, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4770</i>
	 */
	int dwarf_attr_offset(LibdwarfLibrary.Dwarf_Die Dwarf_Die1, LibdwarfLibrary.Dwarf_Attribute Dwarf_Attribute1, LongBuffer Dwarf_OffPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * die<br>
	 * Original signature : <code>int dwarf_attr_offset(Dwarf_Die, Dwarf_Attribute, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4770</i>
	 */
	int dwarf_attr_offset(Pointer Dwarf_Die1, Pointer Dwarf_Attribute1, LongByReference Dwarf_OffPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * This is a hack so clients can verify offsets.<br>
	 * Added April 2005 so that debugger can detect broken offsets<br>
	 * (which happened in an IRIX executable larger than 2GB<br>
	 * with MIPSpro 7.3.1.3 toolchain.).<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_section_max_offsets(Dwarf_Debug, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*)</code><br>
	 * <i>native declaration : line 4780</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_section_max_offsets(libdwarf.LibdwarfLibrary.Dwarf_Debug, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer)} and {@link #dwarf_get_section_max_offsets(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_section_max_offsets(Pointer Dwarf_Debug1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, LongByReference Dwarf_UnsignedPtr4, LongByReference Dwarf_UnsignedPtr5, LongByReference Dwarf_UnsignedPtr6, LongByReference Dwarf_UnsignedPtr7, LongByReference Dwarf_UnsignedPtr8, LongByReference Dwarf_UnsignedPtr9, LongByReference Dwarf_UnsignedPtr10, LongByReference Dwarf_UnsignedPtr11);
	/**
	 * This is a hack so clients can verify offsets.<br>
	 * Added April 2005 so that debugger can detect broken offsets<br>
	 * (which happened in an IRIX executable larger than 2GB<br>
	 * with MIPSpro 7.3.1.3 toolchain.).<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_section_max_offsets(Dwarf_Debug, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*)</code><br>
	 * <i>native declaration : line 4780</i>
	 */
	int dwarf_get_section_max_offsets(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, LongBuffer Dwarf_UnsignedPtr1, LongBuffer Dwarf_UnsignedPtr2, LongBuffer Dwarf_UnsignedPtr3, LongBuffer Dwarf_UnsignedPtr4, LongBuffer Dwarf_UnsignedPtr5, LongBuffer Dwarf_UnsignedPtr6, LongBuffer Dwarf_UnsignedPtr7, LongBuffer Dwarf_UnsignedPtr8, LongBuffer Dwarf_UnsignedPtr9, LongBuffer Dwarf_UnsignedPtr10, LongBuffer Dwarf_UnsignedPtr11);
	/**
	 * New October 2011., adds .debug_types section to the sizes<br>
	 * returned.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_section_max_offsets_b(Dwarf_Debug, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*)</code><br>
	 * <i>native declaration : line 4795</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_section_max_offsets_b(libdwarf.LibdwarfLibrary.Dwarf_Debug, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer)} and {@link #dwarf_get_section_max_offsets_b(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_section_max_offsets_b(Pointer Dwarf_Debug1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, LongByReference Dwarf_UnsignedPtr4, LongByReference Dwarf_UnsignedPtr5, LongByReference Dwarf_UnsignedPtr6, LongByReference Dwarf_UnsignedPtr7, LongByReference Dwarf_UnsignedPtr8, LongByReference Dwarf_UnsignedPtr9, LongByReference Dwarf_UnsignedPtr10, LongByReference Dwarf_UnsignedPtr11, LongByReference Dwarf_UnsignedPtr12);
	/**
	 * New October 2011., adds .debug_types section to the sizes<br>
	 * returned.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_section_max_offsets_b(Dwarf_Debug, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*)</code><br>
	 * <i>native declaration : line 4795</i>
	 */
	int dwarf_get_section_max_offsets_b(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, LongBuffer Dwarf_UnsignedPtr1, LongBuffer Dwarf_UnsignedPtr2, LongBuffer Dwarf_UnsignedPtr3, LongBuffer Dwarf_UnsignedPtr4, LongBuffer Dwarf_UnsignedPtr5, LongBuffer Dwarf_UnsignedPtr6, LongBuffer Dwarf_UnsignedPtr7, LongBuffer Dwarf_UnsignedPtr8, LongBuffer Dwarf_UnsignedPtr9, LongBuffer Dwarf_UnsignedPtr10, LongBuffer Dwarf_UnsignedPtr11, LongBuffer Dwarf_UnsignedPtr12);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_section_max_offsets_c(Dwarf_Debug, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*)</code><br>
	 * <i>native declaration : line 4810</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_section_max_offsets_c(libdwarf.LibdwarfLibrary.Dwarf_Debug, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer)} and {@link #dwarf_get_section_max_offsets_c(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_section_max_offsets_c(Pointer Dwarf_Debug1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, LongByReference Dwarf_UnsignedPtr4, LongByReference Dwarf_UnsignedPtr5, LongByReference Dwarf_UnsignedPtr6, LongByReference Dwarf_UnsignedPtr7, LongByReference Dwarf_UnsignedPtr8, LongByReference Dwarf_UnsignedPtr9, LongByReference Dwarf_UnsignedPtr10, LongByReference Dwarf_UnsignedPtr11, LongByReference Dwarf_UnsignedPtr12, LongByReference Dwarf_UnsignedPtr13, LongByReference Dwarf_UnsignedPtr14, LongByReference Dwarf_UnsignedPtr15, LongByReference Dwarf_UnsignedPtr16, LongByReference Dwarf_UnsignedPtr17);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_section_max_offsets_c(Dwarf_Debug, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*)</code><br>
	 * <i>native declaration : line 4810</i>
	 */
	int dwarf_get_section_max_offsets_c(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, LongBuffer Dwarf_UnsignedPtr1, LongBuffer Dwarf_UnsignedPtr2, LongBuffer Dwarf_UnsignedPtr3, LongBuffer Dwarf_UnsignedPtr4, LongBuffer Dwarf_UnsignedPtr5, LongBuffer Dwarf_UnsignedPtr6, LongBuffer Dwarf_UnsignedPtr7, LongBuffer Dwarf_UnsignedPtr8, LongBuffer Dwarf_UnsignedPtr9, LongBuffer Dwarf_UnsignedPtr10, LongBuffer Dwarf_UnsignedPtr11, LongBuffer Dwarf_UnsignedPtr12, LongBuffer Dwarf_UnsignedPtr13, LongBuffer Dwarf_UnsignedPtr14, LongBuffer Dwarf_UnsignedPtr15, LongBuffer Dwarf_UnsignedPtr16, LongBuffer Dwarf_UnsignedPtr17);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_section_max_offsets_d(Dwarf_Debug, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*)</code><br>
	 * <i>native declaration : line 4828</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_section_max_offsets_d(libdwarf.LibdwarfLibrary.Dwarf_Debug, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer)} and {@link #dwarf_get_section_max_offsets_d(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_section_max_offsets_d(Pointer Dwarf_Debug1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, LongByReference Dwarf_UnsignedPtr4, LongByReference Dwarf_UnsignedPtr5, LongByReference Dwarf_UnsignedPtr6, LongByReference Dwarf_UnsignedPtr7, LongByReference Dwarf_UnsignedPtr8, LongByReference Dwarf_UnsignedPtr9, LongByReference Dwarf_UnsignedPtr10, LongByReference Dwarf_UnsignedPtr11, LongByReference Dwarf_UnsignedPtr12, LongByReference Dwarf_UnsignedPtr13, LongByReference Dwarf_UnsignedPtr14, LongByReference Dwarf_UnsignedPtr15, LongByReference Dwarf_UnsignedPtr16, LongByReference Dwarf_UnsignedPtr17, LongByReference Dwarf_UnsignedPtr18, LongByReference Dwarf_UnsignedPtr19, LongByReference Dwarf_UnsignedPtr20);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_section_max_offsets_d(Dwarf_Debug, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*)</code><br>
	 * <i>native declaration : line 4828</i>
	 */
	int dwarf_get_section_max_offsets_d(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, LongBuffer Dwarf_UnsignedPtr1, LongBuffer Dwarf_UnsignedPtr2, LongBuffer Dwarf_UnsignedPtr3, LongBuffer Dwarf_UnsignedPtr4, LongBuffer Dwarf_UnsignedPtr5, LongBuffer Dwarf_UnsignedPtr6, LongBuffer Dwarf_UnsignedPtr7, LongBuffer Dwarf_UnsignedPtr8, LongBuffer Dwarf_UnsignedPtr9, LongBuffer Dwarf_UnsignedPtr10, LongBuffer Dwarf_UnsignedPtr11, LongBuffer Dwarf_UnsignedPtr12, LongBuffer Dwarf_UnsignedPtr13, LongBuffer Dwarf_UnsignedPtr14, LongBuffer Dwarf_UnsignedPtr15, LongBuffer Dwarf_UnsignedPtr16, LongBuffer Dwarf_UnsignedPtr17, LongBuffer Dwarf_UnsignedPtr18, LongBuffer Dwarf_UnsignedPtr19, LongBuffer Dwarf_UnsignedPtr20);
	/**
	 * Multiple releases spelled 'initial' as 'inital' .<br>
	 * The 'inital' spelling should not be used.<br>
	 * dbg<br>
	 * Original signature : <code>Dwarf_Half dwarf_set_frame_rule_inital_value(Dwarf_Debug, Dwarf_Half)</code><br>
	 * <i>native declaration : line 4854</i><br>
	 * @deprecated use the safer methods {@link #dwarf_set_frame_rule_inital_value(libdwarf.LibdwarfLibrary.Dwarf_Debug, short)} and {@link #dwarf_set_frame_rule_inital_value(com.sun.jna.Pointer, short)} instead
	 */
	@Deprecated 
	short dwarf_set_frame_rule_inital_value(Pointer Dwarf_Debug1, short Dwarf_Half1);
	/**
	 * Multiple releases spelled 'initial' as 'inital' .<br>
	 * The 'inital' spelling should not be used.<br>
	 * dbg<br>
	 * Original signature : <code>Dwarf_Half dwarf_set_frame_rule_inital_value(Dwarf_Debug, Dwarf_Half)</code><br>
	 * <i>native declaration : line 4854</i>
	 */
	short dwarf_set_frame_rule_inital_value(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, short Dwarf_Half1);
	/**
	 * It is likely you will want to call the following 6 functions<br>
	 * before accessing any frame information.  All are useful<br>
	 * to tailor handling of pseudo-registers needed to turn<br>
	 * frame operation references into simpler forms and to<br>
	 * reflect ABI specific data.  Of course altering libdwarf.h<br>
	 * and dwarf.h allow the same capabilities, but header changes<br>
	 * in the distribution would require you re-integrate your<br>
	 * libdwarf.h changes into the distributed libdwarf.h ...<br>
	 * so use the following functions instead.<br>
	 * dbg<br>
	 * Original signature : <code>Dwarf_Half dwarf_set_frame_rule_initial_value(Dwarf_Debug, Dwarf_Half)</code><br>
	 * <i>native declaration : line 4866</i><br>
	 * @deprecated use the safer methods {@link #dwarf_set_frame_rule_initial_value(libdwarf.LibdwarfLibrary.Dwarf_Debug, short)} and {@link #dwarf_set_frame_rule_initial_value(com.sun.jna.Pointer, short)} instead
	 */
	@Deprecated 
	short dwarf_set_frame_rule_initial_value(Pointer Dwarf_Debug1, short Dwarf_Half1);
	/**
	 * It is likely you will want to call the following 6 functions<br>
	 * before accessing any frame information.  All are useful<br>
	 * to tailor handling of pseudo-registers needed to turn<br>
	 * frame operation references into simpler forms and to<br>
	 * reflect ABI specific data.  Of course altering libdwarf.h<br>
	 * and dwarf.h allow the same capabilities, but header changes<br>
	 * in the distribution would require you re-integrate your<br>
	 * libdwarf.h changes into the distributed libdwarf.h ...<br>
	 * so use the following functions instead.<br>
	 * dbg<br>
	 * Original signature : <code>Dwarf_Half dwarf_set_frame_rule_initial_value(Dwarf_Debug, Dwarf_Half)</code><br>
	 * <i>native declaration : line 4866</i>
	 */
	short dwarf_set_frame_rule_initial_value(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, short Dwarf_Half1);
	/**
	 * dbg<br>
	 * Original signature : <code>Dwarf_Half dwarf_set_frame_rule_table_size(Dwarf_Debug, Dwarf_Half)</code><br>
	 * <i>native declaration : line 4868</i><br>
	 * @deprecated use the safer methods {@link #dwarf_set_frame_rule_table_size(libdwarf.LibdwarfLibrary.Dwarf_Debug, short)} and {@link #dwarf_set_frame_rule_table_size(com.sun.jna.Pointer, short)} instead
	 */
	@Deprecated 
	short dwarf_set_frame_rule_table_size(Pointer Dwarf_Debug1, short Dwarf_Half1);
	/**
	 * dbg<br>
	 * Original signature : <code>Dwarf_Half dwarf_set_frame_rule_table_size(Dwarf_Debug, Dwarf_Half)</code><br>
	 * <i>native declaration : line 4868</i>
	 */
	short dwarf_set_frame_rule_table_size(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, short Dwarf_Half1);
	/**
	 * dbg<br>
	 * Original signature : <code>Dwarf_Half dwarf_set_frame_cfa_value(Dwarf_Debug, Dwarf_Half)</code><br>
	 * <i>native declaration : line 4870</i><br>
	 * @deprecated use the safer methods {@link #dwarf_set_frame_cfa_value(libdwarf.LibdwarfLibrary.Dwarf_Debug, short)} and {@link #dwarf_set_frame_cfa_value(com.sun.jna.Pointer, short)} instead
	 */
	@Deprecated 
	short dwarf_set_frame_cfa_value(Pointer Dwarf_Debug1, short Dwarf_Half1);
	/**
	 * dbg<br>
	 * Original signature : <code>Dwarf_Half dwarf_set_frame_cfa_value(Dwarf_Debug, Dwarf_Half)</code><br>
	 * <i>native declaration : line 4870</i>
	 */
	short dwarf_set_frame_cfa_value(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, short Dwarf_Half1);
	/**
	 * dbg<br>
	 * Original signature : <code>Dwarf_Half dwarf_set_frame_same_value(Dwarf_Debug, Dwarf_Half)</code><br>
	 * <i>native declaration : line 4872</i><br>
	 * @deprecated use the safer methods {@link #dwarf_set_frame_same_value(libdwarf.LibdwarfLibrary.Dwarf_Debug, short)} and {@link #dwarf_set_frame_same_value(com.sun.jna.Pointer, short)} instead
	 */
	@Deprecated 
	short dwarf_set_frame_same_value(Pointer Dwarf_Debug1, short Dwarf_Half1);
	/**
	 * dbg<br>
	 * Original signature : <code>Dwarf_Half dwarf_set_frame_same_value(Dwarf_Debug, Dwarf_Half)</code><br>
	 * <i>native declaration : line 4872</i>
	 */
	short dwarf_set_frame_same_value(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, short Dwarf_Half1);
	/**
	 * dbg<br>
	 * Original signature : <code>Dwarf_Half dwarf_set_frame_undefined_value(Dwarf_Debug, Dwarf_Half)</code><br>
	 * <i>native declaration : line 4874</i><br>
	 * @deprecated use the safer methods {@link #dwarf_set_frame_undefined_value(libdwarf.LibdwarfLibrary.Dwarf_Debug, short)} and {@link #dwarf_set_frame_undefined_value(com.sun.jna.Pointer, short)} instead
	 */
	@Deprecated 
	short dwarf_set_frame_undefined_value(Pointer Dwarf_Debug1, short Dwarf_Half1);
	/**
	 * dbg<br>
	 * Original signature : <code>Dwarf_Half dwarf_set_frame_undefined_value(Dwarf_Debug, Dwarf_Half)</code><br>
	 * <i>native declaration : line 4874</i>
	 */
	short dwarf_set_frame_undefined_value(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, short Dwarf_Half1);
	/**
	 * dwarf_set_default_address_size only sets 'value' if value is<br>
	 * greater than zero.<br>
	 * dbg<br>
	 * Original signature : <code>Dwarf_Small dwarf_set_default_address_size(Dwarf_Debug, Dwarf_Small)</code><br>
	 * <i>native declaration : line 4878</i><br>
	 * @deprecated use the safer methods {@link #dwarf_set_default_address_size(libdwarf.LibdwarfLibrary.Dwarf_Debug, byte)} and {@link #dwarf_set_default_address_size(com.sun.jna.Pointer, byte)} instead
	 */
	@Deprecated 
	byte dwarf_set_default_address_size(Pointer Dwarf_Debug1, byte Dwarf_Small1);
	/**
	 * dwarf_set_default_address_size only sets 'value' if value is<br>
	 * greater than zero.<br>
	 * dbg<br>
	 * Original signature : <code>Dwarf_Small dwarf_set_default_address_size(Dwarf_Debug, Dwarf_Small)</code><br>
	 * <i>native declaration : line 4878</i>
	 */
	byte dwarf_set_default_address_size(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, byte Dwarf_Small1);
	/**
	 * As of April 27, 2009, this version with no diepointer is<br>
	 * obsolete though supported.  Use dwarf_get_ranges_a() instead.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_ranges(Dwarf_Debug, Dwarf_Off, Dwarf_Ranges**, Dwarf_Signed*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4883</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_ranges(libdwarf.LibdwarfLibrary.Dwarf_Debug, long, libdwarf.Dwarf_Ranges.ByReference[], java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_ranges(com.sun.jna.Pointer, long, libdwarf.Dwarf_Ranges.ByReference[], com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_ranges(Pointer Dwarf_Debug1, long Dwarf_Off1, PointerByReference Dwarf_RangesPtrPtr1, LongByReference Dwarf_SignedPtr1, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * As of April 27, 2009, this version with no diepointer is<br>
	 * obsolete though supported.  Use dwarf_get_ranges_a() instead.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_ranges(Dwarf_Debug, Dwarf_Off, Dwarf_Ranges**, Dwarf_Signed*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4883</i>
	 */
	int dwarf_get_ranges(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, long Dwarf_Off1, Dwarf_Ranges.ByReference Dwarf_RangesPtrPtr1[], LongBuffer Dwarf_SignedPtr1, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * As of April 27, 2009, this version with no diepointer is<br>
	 * obsolete though supported.  Use dwarf_get_ranges_a() instead.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_ranges(Dwarf_Debug, Dwarf_Off, Dwarf_Ranges**, Dwarf_Signed*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4883</i>
	 */
	int dwarf_get_ranges(Pointer Dwarf_Debug1, long Dwarf_Off1, Dwarf_Ranges.ByReference Dwarf_RangesPtrPtr1[], LongByReference Dwarf_SignedPtr1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * This adds the address_size argument. New April 27, 2009<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_ranges_a(Dwarf_Debug, Dwarf_Off, Dwarf_Die, Dwarf_Ranges**, Dwarf_Signed*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4891</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_ranges_a(libdwarf.LibdwarfLibrary.Dwarf_Debug, long, libdwarf.LibdwarfLibrary.Dwarf_Die, libdwarf.Dwarf_Ranges.ByReference[], java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_ranges_a(com.sun.jna.Pointer, long, com.sun.jna.Pointer, libdwarf.Dwarf_Ranges.ByReference[], com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_ranges_a(Pointer Dwarf_Debug1, long Dwarf_Off1, Pointer Dwarf_Die1, PointerByReference Dwarf_RangesPtrPtr1, LongByReference Dwarf_SignedPtr1, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * This adds the address_size argument. New April 27, 2009<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_ranges_a(Dwarf_Debug, Dwarf_Off, Dwarf_Die, Dwarf_Ranges**, Dwarf_Signed*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4891</i>
	 */
	int dwarf_get_ranges_a(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, long Dwarf_Off1, LibdwarfLibrary.Dwarf_Die Dwarf_Die1, Dwarf_Ranges.ByReference Dwarf_RangesPtrPtr1[], LongBuffer Dwarf_SignedPtr1, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * This adds the address_size argument. New April 27, 2009<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_ranges_a(Dwarf_Debug, Dwarf_Off, Dwarf_Die, Dwarf_Ranges**, Dwarf_Signed*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4891</i>
	 */
	int dwarf_get_ranges_a(Pointer Dwarf_Debug1, long Dwarf_Off1, Pointer Dwarf_Die1, Dwarf_Ranges.ByReference Dwarf_RangesPtrPtr1[], LongByReference Dwarf_SignedPtr1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>void dwarf_ranges_dealloc(Dwarf_Debug, Dwarf_Ranges*, Dwarf_Signed)</code><br>
	 * <i>native declaration : line 4899</i><br>
	 * @deprecated use the safer methods {@link #dwarf_ranges_dealloc(libdwarf.LibdwarfLibrary.Dwarf_Debug, libdwarf.Dwarf_Ranges, long)} and {@link #dwarf_ranges_dealloc(com.sun.jna.Pointer, libdwarf.Dwarf_Ranges, long)} instead
	 */
	@Deprecated 
	void dwarf_ranges_dealloc(Pointer Dwarf_Debug1, Dwarf_Ranges Dwarf_RangesPtr1, long Dwarf_Signed1);
	/**
	 * dbg<br>
	 * Original signature : <code>void dwarf_ranges_dealloc(Dwarf_Debug, Dwarf_Ranges*, Dwarf_Signed)</code><br>
	 * <i>native declaration : line 4899</i>
	 */
	void dwarf_ranges_dealloc(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, Dwarf_Ranges Dwarf_RangesPtr1, long Dwarf_Signed1);
	/**
	 * New July 2020 for DWARF5<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_debug_sup(Dwarf_Debug, Dwarf_Half*, Dwarf_Small*, char**, Dwarf_Unsigned*, Dwarf_Small**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4904</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_debug_sup(libdwarf.LibdwarfLibrary.Dwarf_Debug, java.nio.ShortBuffer, java.nio.ByteBuffer, com.sun.jna.ptr.PointerByReference, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_debug_sup(com.sun.jna.Pointer, com.sun.jna.ptr.ShortByReference, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_debug_sup(Pointer Dwarf_Debug1, ShortByReference Dwarf_HalfPtr1, Pointer Dwarf_SmallPtr1, PointerByReference charPtrPtr1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_SmallPtrPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * New July 2020 for DWARF5<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_debug_sup(Dwarf_Debug, Dwarf_Half*, Dwarf_Small*, char**, Dwarf_Unsigned*, Dwarf_Small**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4904</i>
	 */
	int dwarf_get_debug_sup(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, ShortBuffer Dwarf_HalfPtr1, ByteBuffer Dwarf_SmallPtr1, PointerByReference charPtrPtr1, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_SmallPtrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New July 2020 for DWARF5<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_debug_sup(Dwarf_Debug, Dwarf_Half*, Dwarf_Small*, char**, Dwarf_Unsigned*, Dwarf_Small**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4904</i>
	 */
	int dwarf_get_debug_sup(Pointer Dwarf_Debug1, ShortByReference Dwarf_HalfPtr1, Pointer Dwarf_SmallPtr1, PointerByReference charPtrPtr1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_SmallPtrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * For DWARF5 DW_AT_ranges: DW_FORM_sec_offset DW_FORM_rnglistx<br>
	 * attr<br>
	 * Original signature : <code>int dwarf_rnglists_get_rle_head(Dwarf_Attribute, Dwarf_Half, Dwarf_Unsigned, Dwarf_Rnglists_Head*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4919</i><br>
	 * @deprecated use the safer methods {@link #dwarf_rnglists_get_rle_head(libdwarf.LibdwarfLibrary.Dwarf_Attribute, short, long, com.sun.jna.ptr.PointerByReference, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_rnglists_get_rle_head(com.sun.jna.Pointer, short, long, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_rnglists_get_rle_head(Pointer Dwarf_Attribute1, short Dwarf_Half1, long Dwarf_Unsigned1, Pointer Dwarf_Rnglists_HeadPtr1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, Pointer Dwarf_ErrorPtr1);
	/**
	 * For DWARF5 DW_AT_ranges: DW_FORM_sec_offset DW_FORM_rnglistx<br>
	 * attr<br>
	 * Original signature : <code>int dwarf_rnglists_get_rle_head(Dwarf_Attribute, Dwarf_Half, Dwarf_Unsigned, Dwarf_Rnglists_Head*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4919</i>
	 */
	int dwarf_rnglists_get_rle_head(LibdwarfLibrary.Dwarf_Attribute Dwarf_Attribute1, short Dwarf_Half1, long Dwarf_Unsigned1, PointerByReference Dwarf_Rnglists_HeadPtr1, LongBuffer Dwarf_UnsignedPtr1, LongBuffer Dwarf_UnsignedPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * For DWARF5 DW_AT_ranges: DW_FORM_sec_offset DW_FORM_rnglistx<br>
	 * attr<br>
	 * Original signature : <code>int dwarf_rnglists_get_rle_head(Dwarf_Attribute, Dwarf_Half, Dwarf_Unsigned, Dwarf_Rnglists_Head*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4919</i>
	 */
	int dwarf_rnglists_get_rle_head(Pointer Dwarf_Attribute1, short Dwarf_Half1, long Dwarf_Unsigned1, PointerByReference Dwarf_Rnglists_HeadPtr1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Get the rnglist entries details<br>
	 * Original signature : <code>int dwarf_get_rnglists_entry_fields_a(Dwarf_Rnglists_Head, Dwarf_Unsigned, unsigned*, unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Bool*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4928</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_rnglists_entry_fields_a(libdwarf.LibdwarfLibrary.Dwarf_Rnglists_Head, long, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.IntBuffer, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_rnglists_entry_fields_a(com.sun.jna.Pointer, long, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_rnglists_entry_fields_a(Pointer Dwarf_Rnglists_Head1, long Dwarf_Unsigned1, IntByReference uPtr1, IntByReference uPtr2, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, IntByReference Dwarf_BoolPtr1, LongByReference Dwarf_UnsignedPtr3, LongByReference Dwarf_UnsignedPtr4, Pointer Dwarf_ErrorPtr1);
	/**
	 * Get the rnglist entries details<br>
	 * Original signature : <code>int dwarf_get_rnglists_entry_fields_a(Dwarf_Rnglists_Head, Dwarf_Unsigned, unsigned*, unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Bool*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4928</i>
	 */
	int dwarf_get_rnglists_entry_fields_a(LibdwarfLibrary.Dwarf_Rnglists_Head Dwarf_Rnglists_Head1, long Dwarf_Unsigned1, IntBuffer uPtr1, IntBuffer uPtr2, LongBuffer Dwarf_UnsignedPtr1, LongBuffer Dwarf_UnsignedPtr2, IntBuffer Dwarf_BoolPtr1, LongBuffer Dwarf_UnsignedPtr3, LongBuffer Dwarf_UnsignedPtr4, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Get the rnglist entries details<br>
	 * Original signature : <code>int dwarf_get_rnglists_entry_fields_a(Dwarf_Rnglists_Head, Dwarf_Unsigned, unsigned*, unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Bool*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4928</i>
	 */
	int dwarf_get_rnglists_entry_fields_a(Pointer Dwarf_Rnglists_Head1, long Dwarf_Unsigned1, IntByReference uPtr1, IntByReference uPtr2, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, IntByReference Dwarf_BoolPtr1, LongByReference Dwarf_UnsignedPtr3, LongByReference Dwarf_UnsignedPtr4, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * The following is not complete. DO NOT USE.<br>
	 * Use dwarf_get_rnglists_entry_fields_a() instead.<br>
	 * head<br>
	 * Original signature : <code>int dwarf_get_rnglists_entry_fields(Dwarf_Rnglists_Head, Dwarf_Unsigned, unsigned int*, unsigned int*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4942</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_rnglists_entry_fields(libdwarf.LibdwarfLibrary.Dwarf_Rnglists_Head, long, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_rnglists_entry_fields(com.sun.jna.Pointer, long, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_rnglists_entry_fields(Pointer Dwarf_Rnglists_Head1, long Dwarf_Unsigned1, IntByReference intPtr1, IntByReference intPtr2, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, LongByReference Dwarf_UnsignedPtr4, Pointer Dwarf_ErrorPtr1);
	/**
	 * The following is not complete. DO NOT USE.<br>
	 * Use dwarf_get_rnglists_entry_fields_a() instead.<br>
	 * head<br>
	 * Original signature : <code>int dwarf_get_rnglists_entry_fields(Dwarf_Rnglists_Head, Dwarf_Unsigned, unsigned int*, unsigned int*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4942</i>
	 */
	int dwarf_get_rnglists_entry_fields(LibdwarfLibrary.Dwarf_Rnglists_Head Dwarf_Rnglists_Head1, long Dwarf_Unsigned1, IntBuffer intPtr1, IntBuffer intPtr2, LongBuffer Dwarf_UnsignedPtr1, LongBuffer Dwarf_UnsignedPtr2, LongBuffer Dwarf_UnsignedPtr3, LongBuffer Dwarf_UnsignedPtr4, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * The following is not complete. DO NOT USE.<br>
	 * Use dwarf_get_rnglists_entry_fields_a() instead.<br>
	 * head<br>
	 * Original signature : <code>int dwarf_get_rnglists_entry_fields(Dwarf_Rnglists_Head, Dwarf_Unsigned, unsigned int*, unsigned int*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4942</i>
	 */
	int dwarf_get_rnglists_entry_fields(Pointer Dwarf_Rnglists_Head1, long Dwarf_Unsigned1, IntByReference intPtr1, IntByReference intPtr2, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, LongByReference Dwarf_UnsignedPtr4, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Original signature : <code>int dwarf_dealloc_rnglists_head(Dwarf_Rnglists_Head)</code><br>
	 * <i>native declaration : line 4952</i><br>
	 * @deprecated use the safer methods {@link #dwarf_dealloc_rnglists_head(libdwarf.LibdwarfLibrary.Dwarf_Rnglists_Head)} and {@link #dwarf_dealloc_rnglists_head(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int dwarf_dealloc_rnglists_head(Pointer Dwarf_Rnglists_Head1);
	/**
	 * Original signature : <code>int dwarf_dealloc_rnglists_head(Dwarf_Rnglists_Head)</code><br>
	 * <i>native declaration : line 4952</i>
	 */
	int dwarf_dealloc_rnglists_head(LibdwarfLibrary.Dwarf_Rnglists_Head Dwarf_Rnglists_Head1);
	/**
	 * Loads all the rnglists headers and<br>
	 * returns DW_DLV_NO_ENTRY if the section<br>
	 * is missing or empty.<br>
	 * Intended to be done quite early and<br>
	 * it is automatically<br>
	 * done if .debug_info is loaded.<br>
	 * Doing it more than once is never necessary<br>
	 * or harmful. There is no deallocation call<br>
	 * made visible, deallocation happens<br>
	 * when dwarf_finish() is called.<br>
	 * With DW_DLV_OK it returns the number of<br>
	 * rnglists headers in the section through<br>
	 * rnglists_count.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_load_rnglists(Dwarf_Debug, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4967</i><br>
	 * @deprecated use the safer methods {@link #dwarf_load_rnglists(libdwarf.LibdwarfLibrary.Dwarf_Debug, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_load_rnglists(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_load_rnglists(Pointer Dwarf_Debug1, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Loads all the rnglists headers and<br>
	 * returns DW_DLV_NO_ENTRY if the section<br>
	 * is missing or empty.<br>
	 * Intended to be done quite early and<br>
	 * it is automatically<br>
	 * done if .debug_info is loaded.<br>
	 * Doing it more than once is never necessary<br>
	 * or harmful. There is no deallocation call<br>
	 * made visible, deallocation happens<br>
	 * when dwarf_finish() is called.<br>
	 * With DW_DLV_OK it returns the number of<br>
	 * rnglists headers in the section through<br>
	 * rnglists_count.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_load_rnglists(Dwarf_Debug, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4967</i>
	 */
	int dwarf_load_rnglists(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Loads all the rnglists headers and<br>
	 * returns DW_DLV_NO_ENTRY if the section<br>
	 * is missing or empty.<br>
	 * Intended to be done quite early and<br>
	 * it is automatically<br>
	 * done if .debug_info is loaded.<br>
	 * Doing it more than once is never necessary<br>
	 * or harmful. There is no deallocation call<br>
	 * made visible, deallocation happens<br>
	 * when dwarf_finish() is called.<br>
	 * With DW_DLV_OK it returns the number of<br>
	 * rnglists headers in the section through<br>
	 * rnglists_count.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_load_rnglists(Dwarf_Debug, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4967</i>
	 */
	int dwarf_load_rnglists(Pointer Dwarf_Debug1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Retrieve the offset from the context-index'th<br>
	 * rangelists context  and the offsetentry_index<br>
	 * element of the array of offsets.<br>
	 * If an index is too large to be correct<br>
	 * this returns DW_DLV_NO_ENTRY.<br>
	 * If all is correct it returns DW_DLV_OK and<br>
	 * sets *offset_value_out to the offset of<br>
	 * the range list from the base of the offset<br>
	 * array, and *global_offset_value_out is set<br>
	 * to the .debug_rnglists section offset of<br>
	 * the range list.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_rnglist_offset_index_value(Dwarf_Debug, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4982</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_rnglist_offset_index_value(libdwarf.LibdwarfLibrary.Dwarf_Debug, long, long, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_rnglist_offset_index_value(com.sun.jna.Pointer, long, long, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_rnglist_offset_index_value(Pointer Dwarf_Debug1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, Pointer Dwarf_ErrorPtr1);
	/**
	 * Retrieve the offset from the context-index'th<br>
	 * rangelists context  and the offsetentry_index<br>
	 * element of the array of offsets.<br>
	 * If an index is too large to be correct<br>
	 * this returns DW_DLV_NO_ENTRY.<br>
	 * If all is correct it returns DW_DLV_OK and<br>
	 * sets *offset_value_out to the offset of<br>
	 * the range list from the base of the offset<br>
	 * array, and *global_offset_value_out is set<br>
	 * to the .debug_rnglists section offset of<br>
	 * the range list.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_rnglist_offset_index_value(Dwarf_Debug, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4982</i>
	 */
	int dwarf_get_rnglist_offset_index_value(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, LongBuffer Dwarf_UnsignedPtr1, LongBuffer Dwarf_UnsignedPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Retrieve the offset from the context-index'th<br>
	 * rangelists context  and the offsetentry_index<br>
	 * element of the array of offsets.<br>
	 * If an index is too large to be correct<br>
	 * this returns DW_DLV_NO_ENTRY.<br>
	 * If all is correct it returns DW_DLV_OK and<br>
	 * sets *offset_value_out to the offset of<br>
	 * the range list from the base of the offset<br>
	 * array, and *global_offset_value_out is set<br>
	 * to the .debug_rnglists section offset of<br>
	 * the range list.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_rnglist_offset_index_value(Dwarf_Debug, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4982</i>
	 */
	int dwarf_get_rnglist_offset_index_value(Pointer Dwarf_Debug1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Used by dwarfdump to print basic data from the<br>
	 * data generated to look at a specific rangelist<br>
	 * as returned by  dwarf_rnglists_index_get_rle_head()<br>
	 * or dwarf_rnglists_offset_get_rle_head.<br>
	 * head<br>
	 * Original signature : <code>int dwarf_get_rnglist_head_basics(Dwarf_Rnglists_Head, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Half*, Dwarf_Half*, Dwarf_Half*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Bool*, Dwarf_Unsigned*, Dwarf_Bool*, Dwarf_Unsigned*, Dwarf_Bool*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4994</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_rnglist_head_basics(libdwarf.LibdwarfLibrary.Dwarf_Rnglists_Head, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.ShortBuffer, java.nio.ShortBuffer, java.nio.ShortBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.IntBuffer, java.nio.LongBuffer, java.nio.IntBuffer, java.nio.LongBuffer, java.nio.IntBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_rnglist_head_basics(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.ShortByReference, com.sun.jna.ptr.ShortByReference, com.sun.jna.ptr.ShortByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_rnglist_head_basics(Pointer Dwarf_Rnglists_Head1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, LongByReference Dwarf_UnsignedPtr4, ShortByReference Dwarf_HalfPtr1, ShortByReference Dwarf_HalfPtr2, ShortByReference Dwarf_HalfPtr3, LongByReference Dwarf_UnsignedPtr5, LongByReference Dwarf_UnsignedPtr6, LongByReference Dwarf_UnsignedPtr7, LongByReference Dwarf_UnsignedPtr8, IntByReference Dwarf_BoolPtr1, LongByReference Dwarf_UnsignedPtr9, IntByReference Dwarf_BoolPtr2, LongByReference Dwarf_UnsignedPtr10, IntByReference Dwarf_BoolPtr3, LongByReference Dwarf_UnsignedPtr11, Pointer Dwarf_ErrorPtr1);
	/**
	 * Used by dwarfdump to print basic data from the<br>
	 * data generated to look at a specific rangelist<br>
	 * as returned by  dwarf_rnglists_index_get_rle_head()<br>
	 * or dwarf_rnglists_offset_get_rle_head.<br>
	 * head<br>
	 * Original signature : <code>int dwarf_get_rnglist_head_basics(Dwarf_Rnglists_Head, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Half*, Dwarf_Half*, Dwarf_Half*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Bool*, Dwarf_Unsigned*, Dwarf_Bool*, Dwarf_Unsigned*, Dwarf_Bool*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4994</i>
	 */
	int dwarf_get_rnglist_head_basics(LibdwarfLibrary.Dwarf_Rnglists_Head Dwarf_Rnglists_Head1, LongBuffer Dwarf_UnsignedPtr1, LongBuffer Dwarf_UnsignedPtr2, LongBuffer Dwarf_UnsignedPtr3, LongBuffer Dwarf_UnsignedPtr4, ShortBuffer Dwarf_HalfPtr1, ShortBuffer Dwarf_HalfPtr2, ShortBuffer Dwarf_HalfPtr3, LongBuffer Dwarf_UnsignedPtr5, LongBuffer Dwarf_UnsignedPtr6, LongBuffer Dwarf_UnsignedPtr7, LongBuffer Dwarf_UnsignedPtr8, IntBuffer Dwarf_BoolPtr1, LongBuffer Dwarf_UnsignedPtr9, IntBuffer Dwarf_BoolPtr2, LongBuffer Dwarf_UnsignedPtr10, IntBuffer Dwarf_BoolPtr3, LongBuffer Dwarf_UnsignedPtr11, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Used by dwarfdump to print basic data from the<br>
	 * data generated to look at a specific rangelist<br>
	 * as returned by  dwarf_rnglists_index_get_rle_head()<br>
	 * or dwarf_rnglists_offset_get_rle_head.<br>
	 * head<br>
	 * Original signature : <code>int dwarf_get_rnglist_head_basics(Dwarf_Rnglists_Head, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Half*, Dwarf_Half*, Dwarf_Half*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Bool*, Dwarf_Unsigned*, Dwarf_Bool*, Dwarf_Unsigned*, Dwarf_Bool*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 4994</i>
	 */
	int dwarf_get_rnglist_head_basics(Pointer Dwarf_Rnglists_Head1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, LongByReference Dwarf_UnsignedPtr4, ShortByReference Dwarf_HalfPtr1, ShortByReference Dwarf_HalfPtr2, ShortByReference Dwarf_HalfPtr3, LongByReference Dwarf_UnsignedPtr5, LongByReference Dwarf_UnsignedPtr6, LongByReference Dwarf_UnsignedPtr7, LongByReference Dwarf_UnsignedPtr8, IntByReference Dwarf_BoolPtr1, LongByReference Dwarf_UnsignedPtr9, IntByReference Dwarf_BoolPtr2, LongByReference Dwarf_UnsignedPtr10, IntByReference Dwarf_BoolPtr3, LongByReference Dwarf_UnsignedPtr11, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Enables printing of details about the Range List Table<br>
	 * Headers, one header per call. Index starting at 0.<br>
	 * Returns DW_DLV_NO_ENTRY if index is too high for the table.<br>
	 * A .debug_rnglists section may contain any number<br>
	 * of Range List Table Headers with their details.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_rnglist_context_basics(Dwarf_Debug, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Small*, Dwarf_Small*, unsigned int*, Dwarf_Small*, Dwarf_Small*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * @param intPtr1 5<br>
	 * <i>native declaration : line 5019</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_rnglist_context_basics(libdwarf.LibdwarfLibrary.Dwarf_Debug, long, java.nio.LongBuffer, java.nio.ByteBuffer, java.nio.ByteBuffer, java.nio.IntBuffer, java.nio.ByteBuffer, java.nio.ByteBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_rnglist_context_basics(com.sun.jna.Pointer, long, com.sun.jna.ptr.LongByReference, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_rnglist_context_basics(Pointer Dwarf_Debug1, long Dwarf_Unsigned1, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_SmallPtr1, Pointer Dwarf_SmallPtr2, IntByReference intPtr1, Pointer Dwarf_SmallPtr3, Pointer Dwarf_SmallPtr4, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, LongByReference Dwarf_UnsignedPtr4, LongByReference Dwarf_UnsignedPtr5, Pointer Dwarf_ErrorPtr1);
	/**
	 * Enables printing of details about the Range List Table<br>
	 * Headers, one header per call. Index starting at 0.<br>
	 * Returns DW_DLV_NO_ENTRY if index is too high for the table.<br>
	 * A .debug_rnglists section may contain any number<br>
	 * of Range List Table Headers with their details.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_rnglist_context_basics(Dwarf_Debug, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Small*, Dwarf_Small*, unsigned int*, Dwarf_Small*, Dwarf_Small*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * @param intPtr1 5<br>
	 * <i>native declaration : line 5019</i>
	 */
	int dwarf_get_rnglist_context_basics(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, long Dwarf_Unsigned1, LongBuffer Dwarf_UnsignedPtr1, ByteBuffer Dwarf_SmallPtr1, ByteBuffer Dwarf_SmallPtr2, IntBuffer intPtr1, ByteBuffer Dwarf_SmallPtr3, ByteBuffer Dwarf_SmallPtr4, LongBuffer Dwarf_UnsignedPtr2, LongBuffer Dwarf_UnsignedPtr3, LongBuffer Dwarf_UnsignedPtr4, LongBuffer Dwarf_UnsignedPtr5, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Enables printing of details about the Range List Table<br>
	 * Headers, one header per call. Index starting at 0.<br>
	 * Returns DW_DLV_NO_ENTRY if index is too high for the table.<br>
	 * A .debug_rnglists section may contain any number<br>
	 * of Range List Table Headers with their details.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_rnglist_context_basics(Dwarf_Debug, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Small*, Dwarf_Small*, unsigned int*, Dwarf_Small*, Dwarf_Small*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * @param intPtr1 5<br>
	 * <i>native declaration : line 5019</i>
	 */
	int dwarf_get_rnglist_context_basics(Pointer Dwarf_Debug1, long Dwarf_Unsigned1, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_SmallPtr1, Pointer Dwarf_SmallPtr2, IntByReference intPtr1, Pointer Dwarf_SmallPtr3, Pointer Dwarf_SmallPtr4, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, LongByReference Dwarf_UnsignedPtr4, LongByReference Dwarf_UnsignedPtr5, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * entry offset is offset_of_first_rangeentry.<br>
	 * Stop when the returned *next_entry_offset<br>
	 * is == offset_past_last_rangentry (from<br>
	 * dwarf_get_rnglist_context_plus).<br>
	 * This only makes sense within those ranges.<br>
	 * This retrieves raw detail from the section,<br>
	 * no base values or anything are added.<br>
	 * So this returns raw individual entries<br>
	 * for a single rnglist header, meaning a<br>
	 * a single Dwarf_Rnglists_Context.<br>
	 * This interface assumes there is no<br>
	 * segment selector.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_rnglist_raw_entry_detail(Dwarf_Debug, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5046</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_rnglist_raw_entry_detail(libdwarf.LibdwarfLibrary.Dwarf_Debug, long, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_rnglist_raw_entry_detail(com.sun.jna.Pointer, long, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_rnglist_raw_entry_detail(Pointer Dwarf_Debug1, long Dwarf_Unsigned1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, LongByReference Dwarf_UnsignedPtr4, Pointer Dwarf_ErrorPtr1);
	/**
	 * entry offset is offset_of_first_rangeentry.<br>
	 * Stop when the returned *next_entry_offset<br>
	 * is == offset_past_last_rangentry (from<br>
	 * dwarf_get_rnglist_context_plus).<br>
	 * This only makes sense within those ranges.<br>
	 * This retrieves raw detail from the section,<br>
	 * no base values or anything are added.<br>
	 * So this returns raw individual entries<br>
	 * for a single rnglist header, meaning a<br>
	 * a single Dwarf_Rnglists_Context.<br>
	 * This interface assumes there is no<br>
	 * segment selector.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_rnglist_raw_entry_detail(Dwarf_Debug, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5046</i>
	 */
	int dwarf_get_rnglist_raw_entry_detail(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, long Dwarf_Unsigned1, LongBuffer Dwarf_UnsignedPtr1, LongBuffer Dwarf_UnsignedPtr2, LongBuffer Dwarf_UnsignedPtr3, LongBuffer Dwarf_UnsignedPtr4, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * entry offset is offset_of_first_rangeentry.<br>
	 * Stop when the returned *next_entry_offset<br>
	 * is == offset_past_last_rangentry (from<br>
	 * dwarf_get_rnglist_context_plus).<br>
	 * This only makes sense within those ranges.<br>
	 * This retrieves raw detail from the section,<br>
	 * no base values or anything are added.<br>
	 * So this returns raw individual entries<br>
	 * for a single rnglist header, meaning a<br>
	 * a single Dwarf_Rnglists_Context.<br>
	 * This interface assumes there is no<br>
	 * segment selector.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_rnglist_raw_entry_detail(Dwarf_Debug, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5046</i>
	 */
	int dwarf_get_rnglist_raw_entry_detail(Pointer Dwarf_Debug1, long Dwarf_Unsigned1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, LongByReference Dwarf_UnsignedPtr4, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_rnglist_rle(Dwarf_Debug, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned, unsigned int*, unsigned int*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5059</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_rnglist_rle(libdwarf.LibdwarfLibrary.Dwarf_Debug, long, long, long, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_rnglist_rle(com.sun.jna.Pointer, long, long, long, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_rnglist_rle(Pointer Dwarf_Debug1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, long Dwarf_Unsigned3, IntByReference intPtr1, IntByReference intPtr2, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, Pointer Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_rnglist_rle(Dwarf_Debug, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned, unsigned int*, unsigned int*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5059</i>
	 */
	int dwarf_get_rnglist_rle(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, long Dwarf_Unsigned3, IntBuffer intPtr1, IntBuffer intPtr2, LongBuffer Dwarf_UnsignedPtr1, LongBuffer Dwarf_UnsignedPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_rnglist_rle(Dwarf_Debug, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned, unsigned int*, unsigned int*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5059</i>
	 */
	int dwarf_get_rnglist_rle(Pointer Dwarf_Debug1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, long Dwarf_Unsigned3, IntByReference intPtr1, IntByReference intPtr2, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Get the loclists entries details<br>
	 * head<br>
	 * Original signature : <code>int dwarf_get_loclists_entry_fields(Dwarf_Loc_Head_c, Dwarf_Unsigned, unsigned int*, unsigned int*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5085</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_loclists_entry_fields(libdwarf.LibdwarfLibrary.Dwarf_Loc_Head_c, long, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_loclists_entry_fields(com.sun.jna.Pointer, long, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_loclists_entry_fields(Pointer Dwarf_Loc_Head_c1, long Dwarf_Unsigned1, IntByReference intPtr1, IntByReference intPtr2, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, LongByReference Dwarf_UnsignedPtr4, Pointer Dwarf_ErrorPtr1);
	/**
	 * Get the loclists entries details<br>
	 * head<br>
	 * Original signature : <code>int dwarf_get_loclists_entry_fields(Dwarf_Loc_Head_c, Dwarf_Unsigned, unsigned int*, unsigned int*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5085</i>
	 */
	int dwarf_get_loclists_entry_fields(LibdwarfLibrary.Dwarf_Loc_Head_c Dwarf_Loc_Head_c1, long Dwarf_Unsigned1, IntBuffer intPtr1, IntBuffer intPtr2, LongBuffer Dwarf_UnsignedPtr1, LongBuffer Dwarf_UnsignedPtr2, LongBuffer Dwarf_UnsignedPtr3, LongBuffer Dwarf_UnsignedPtr4, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Get the loclists entries details<br>
	 * head<br>
	 * Original signature : <code>int dwarf_get_loclists_entry_fields(Dwarf_Loc_Head_c, Dwarf_Unsigned, unsigned int*, unsigned int*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5085</i>
	 */
	int dwarf_get_loclists_entry_fields(Pointer Dwarf_Loc_Head_c1, long Dwarf_Unsigned1, IntByReference intPtr1, IntByReference intPtr2, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, LongByReference Dwarf_UnsignedPtr4, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Loads all the loclists headers and<br>
	 * returns DW_DLV_NO_ENTRY if the section<br>
	 * is missing or empty.<br>
	 * Intended to be done quite early and<br>
	 * it is automatically<br>
	 * done if .debug_info is loaded.<br>
	 * Doing it more than once is never necessary<br>
	 * or harmful. There is no deallocation call<br>
	 * made visible, deallocation happens<br>
	 * when dwarf_finish() is called.<br>
	 * With DW_DLV_OK it returns the number of<br>
	 * loclists headers in the section through<br>
	 * loclists_count.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_load_loclists(Dwarf_Debug, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5108</i><br>
	 * @deprecated use the safer methods {@link #dwarf_load_loclists(libdwarf.LibdwarfLibrary.Dwarf_Debug, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_load_loclists(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_load_loclists(Pointer Dwarf_Debug1, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Loads all the loclists headers and<br>
	 * returns DW_DLV_NO_ENTRY if the section<br>
	 * is missing or empty.<br>
	 * Intended to be done quite early and<br>
	 * it is automatically<br>
	 * done if .debug_info is loaded.<br>
	 * Doing it more than once is never necessary<br>
	 * or harmful. There is no deallocation call<br>
	 * made visible, deallocation happens<br>
	 * when dwarf_finish() is called.<br>
	 * With DW_DLV_OK it returns the number of<br>
	 * loclists headers in the section through<br>
	 * loclists_count.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_load_loclists(Dwarf_Debug, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5108</i>
	 */
	int dwarf_load_loclists(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Loads all the loclists headers and<br>
	 * returns DW_DLV_NO_ENTRY if the section<br>
	 * is missing or empty.<br>
	 * Intended to be done quite early and<br>
	 * it is automatically<br>
	 * done if .debug_info is loaded.<br>
	 * Doing it more than once is never necessary<br>
	 * or harmful. There is no deallocation call<br>
	 * made visible, deallocation happens<br>
	 * when dwarf_finish() is called.<br>
	 * With DW_DLV_OK it returns the number of<br>
	 * loclists headers in the section through<br>
	 * loclists_count.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_load_loclists(Dwarf_Debug, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5108</i>
	 */
	int dwarf_load_loclists(Pointer Dwarf_Debug1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Retrieve the offset from the context-index'th<br>
	 * loclists context  and the offsetentry_index<br>
	 * element of the array of offsets.<br>
	 * If an index is too large to be correct<br>
	 * this returns DW_DLV_NO_ENTRY.<br>
	 * If all is correct it returns DW_DLV_OK and<br>
	 * sets *offset_value_out to the offset of<br>
	 * the range list from the base of the offset<br>
	 * array, and *global_offset_value_out is set<br>
	 * to the .debug_loclists section offset of<br>
	 * the range list.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_loclist_offset_index_value(Dwarf_Debug, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5123</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_loclist_offset_index_value(libdwarf.LibdwarfLibrary.Dwarf_Debug, long, long, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_loclist_offset_index_value(com.sun.jna.Pointer, long, long, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_loclist_offset_index_value(Pointer Dwarf_Debug1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, Pointer Dwarf_ErrorPtr1);
	/**
	 * Retrieve the offset from the context-index'th<br>
	 * loclists context  and the offsetentry_index<br>
	 * element of the array of offsets.<br>
	 * If an index is too large to be correct<br>
	 * this returns DW_DLV_NO_ENTRY.<br>
	 * If all is correct it returns DW_DLV_OK and<br>
	 * sets *offset_value_out to the offset of<br>
	 * the range list from the base of the offset<br>
	 * array, and *global_offset_value_out is set<br>
	 * to the .debug_loclists section offset of<br>
	 * the range list.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_loclist_offset_index_value(Dwarf_Debug, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5123</i>
	 */
	int dwarf_get_loclist_offset_index_value(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, LongBuffer Dwarf_UnsignedPtr1, LongBuffer Dwarf_UnsignedPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Retrieve the offset from the context-index'th<br>
	 * loclists context  and the offsetentry_index<br>
	 * element of the array of offsets.<br>
	 * If an index is too large to be correct<br>
	 * this returns DW_DLV_NO_ENTRY.<br>
	 * If all is correct it returns DW_DLV_OK and<br>
	 * sets *offset_value_out to the offset of<br>
	 * the range list from the base of the offset<br>
	 * array, and *global_offset_value_out is set<br>
	 * to the .debug_loclists section offset of<br>
	 * the range list.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_loclist_offset_index_value(Dwarf_Debug, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5123</i>
	 */
	int dwarf_get_loclist_offset_index_value(Pointer Dwarf_Debug1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Used by dwarfdump to print basic data from the<br>
	 * data generated to look at a specific rangelist<br>
	 * as returned by  dwarf_loclists_index_get_lle_head()<br>
	 * or dwarf_loclists_offset_get_lle_head.<br>
	 * head<br>
	 * Original signature : <code>int dwarf_get_loclist_head_basics(Dwarf_Loc_Head_c, Dwarf_Small*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Half*, Dwarf_Half*, Dwarf_Half*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Bool*, Dwarf_Unsigned*, Dwarf_Bool*, Dwarf_Unsigned*, Dwarf_Bool*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5134</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_loclist_head_basics(libdwarf.LibdwarfLibrary.Dwarf_Loc_Head_c, java.nio.ByteBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.ShortBuffer, java.nio.ShortBuffer, java.nio.ShortBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.IntBuffer, java.nio.LongBuffer, java.nio.IntBuffer, java.nio.LongBuffer, java.nio.IntBuffer, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_loclist_head_basics(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.ShortByReference, com.sun.jna.ptr.ShortByReference, com.sun.jna.ptr.ShortByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_loclist_head_basics(Pointer Dwarf_Loc_Head_c1, Pointer Dwarf_SmallPtr1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, LongByReference Dwarf_UnsignedPtr4, ShortByReference Dwarf_HalfPtr1, ShortByReference Dwarf_HalfPtr2, ShortByReference Dwarf_HalfPtr3, LongByReference Dwarf_UnsignedPtr5, LongByReference Dwarf_UnsignedPtr6, LongByReference Dwarf_UnsignedPtr7, LongByReference Dwarf_UnsignedPtr8, IntByReference Dwarf_BoolPtr1, LongByReference Dwarf_UnsignedPtr9, IntByReference Dwarf_BoolPtr2, LongByReference Dwarf_UnsignedPtr10, IntByReference Dwarf_BoolPtr3, LongByReference Dwarf_UnsignedPtr11, LongByReference Dwarf_UnsignedPtr12, Pointer Dwarf_ErrorPtr1);
	/**
	 * Used by dwarfdump to print basic data from the<br>
	 * data generated to look at a specific rangelist<br>
	 * as returned by  dwarf_loclists_index_get_lle_head()<br>
	 * or dwarf_loclists_offset_get_lle_head.<br>
	 * head<br>
	 * Original signature : <code>int dwarf_get_loclist_head_basics(Dwarf_Loc_Head_c, Dwarf_Small*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Half*, Dwarf_Half*, Dwarf_Half*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Bool*, Dwarf_Unsigned*, Dwarf_Bool*, Dwarf_Unsigned*, Dwarf_Bool*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5134</i>
	 */
	int dwarf_get_loclist_head_basics(LibdwarfLibrary.Dwarf_Loc_Head_c Dwarf_Loc_Head_c1, ByteBuffer Dwarf_SmallPtr1, LongBuffer Dwarf_UnsignedPtr1, LongBuffer Dwarf_UnsignedPtr2, LongBuffer Dwarf_UnsignedPtr3, LongBuffer Dwarf_UnsignedPtr4, ShortBuffer Dwarf_HalfPtr1, ShortBuffer Dwarf_HalfPtr2, ShortBuffer Dwarf_HalfPtr3, LongBuffer Dwarf_UnsignedPtr5, LongBuffer Dwarf_UnsignedPtr6, LongBuffer Dwarf_UnsignedPtr7, LongBuffer Dwarf_UnsignedPtr8, IntBuffer Dwarf_BoolPtr1, LongBuffer Dwarf_UnsignedPtr9, IntBuffer Dwarf_BoolPtr2, LongBuffer Dwarf_UnsignedPtr10, IntBuffer Dwarf_BoolPtr3, LongBuffer Dwarf_UnsignedPtr11, LongBuffer Dwarf_UnsignedPtr12, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Used by dwarfdump to print basic data from the<br>
	 * data generated to look at a specific rangelist<br>
	 * as returned by  dwarf_loclists_index_get_lle_head()<br>
	 * or dwarf_loclists_offset_get_lle_head.<br>
	 * head<br>
	 * Original signature : <code>int dwarf_get_loclist_head_basics(Dwarf_Loc_Head_c, Dwarf_Small*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Half*, Dwarf_Half*, Dwarf_Half*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Bool*, Dwarf_Unsigned*, Dwarf_Bool*, Dwarf_Unsigned*, Dwarf_Bool*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5134</i>
	 */
	int dwarf_get_loclist_head_basics(Pointer Dwarf_Loc_Head_c1, Pointer Dwarf_SmallPtr1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, LongByReference Dwarf_UnsignedPtr4, ShortByReference Dwarf_HalfPtr1, ShortByReference Dwarf_HalfPtr2, ShortByReference Dwarf_HalfPtr3, LongByReference Dwarf_UnsignedPtr5, LongByReference Dwarf_UnsignedPtr6, LongByReference Dwarf_UnsignedPtr7, LongByReference Dwarf_UnsignedPtr8, IntByReference Dwarf_BoolPtr1, LongByReference Dwarf_UnsignedPtr9, IntByReference Dwarf_BoolPtr2, LongByReference Dwarf_UnsignedPtr10, IntByReference Dwarf_BoolPtr3, LongByReference Dwarf_UnsignedPtr11, LongByReference Dwarf_UnsignedPtr12, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Enables printing of details about the Range List Table<br>
	 * Headers, one header per call. Index starting at 0.<br>
	 * Returns DW_DLV_NO_ENTRY if index is too high for the table.<br>
	 * A .debug_loclists section may contain any number<br>
	 * of Location  List Table Headers with their details.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_loclist_context_basics(Dwarf_Debug, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Small*, Dwarf_Small*, unsigned int*, Dwarf_Small*, Dwarf_Small*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * @param intPtr1 5<br>
	 * <i>native declaration : line 5161</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_loclist_context_basics(libdwarf.LibdwarfLibrary.Dwarf_Debug, long, java.nio.LongBuffer, java.nio.ByteBuffer, java.nio.ByteBuffer, java.nio.IntBuffer, java.nio.ByteBuffer, java.nio.ByteBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_loclist_context_basics(com.sun.jna.Pointer, long, com.sun.jna.ptr.LongByReference, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_loclist_context_basics(Pointer Dwarf_Debug1, long Dwarf_Unsigned1, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_SmallPtr1, Pointer Dwarf_SmallPtr2, IntByReference intPtr1, Pointer Dwarf_SmallPtr3, Pointer Dwarf_SmallPtr4, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, LongByReference Dwarf_UnsignedPtr4, LongByReference Dwarf_UnsignedPtr5, Pointer Dwarf_ErrorPtr1);
	/**
	 * Enables printing of details about the Range List Table<br>
	 * Headers, one header per call. Index starting at 0.<br>
	 * Returns DW_DLV_NO_ENTRY if index is too high for the table.<br>
	 * A .debug_loclists section may contain any number<br>
	 * of Location  List Table Headers with their details.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_loclist_context_basics(Dwarf_Debug, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Small*, Dwarf_Small*, unsigned int*, Dwarf_Small*, Dwarf_Small*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * @param intPtr1 5<br>
	 * <i>native declaration : line 5161</i>
	 */
	int dwarf_get_loclist_context_basics(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, long Dwarf_Unsigned1, LongBuffer Dwarf_UnsignedPtr1, ByteBuffer Dwarf_SmallPtr1, ByteBuffer Dwarf_SmallPtr2, IntBuffer intPtr1, ByteBuffer Dwarf_SmallPtr3, ByteBuffer Dwarf_SmallPtr4, LongBuffer Dwarf_UnsignedPtr2, LongBuffer Dwarf_UnsignedPtr3, LongBuffer Dwarf_UnsignedPtr4, LongBuffer Dwarf_UnsignedPtr5, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Enables printing of details about the Range List Table<br>
	 * Headers, one header per call. Index starting at 0.<br>
	 * Returns DW_DLV_NO_ENTRY if index is too high for the table.<br>
	 * A .debug_loclists section may contain any number<br>
	 * of Location  List Table Headers with their details.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_loclist_context_basics(Dwarf_Debug, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Small*, Dwarf_Small*, unsigned int*, Dwarf_Small*, Dwarf_Small*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * @param intPtr1 5<br>
	 * <i>native declaration : line 5161</i>
	 */
	int dwarf_get_loclist_context_basics(Pointer Dwarf_Debug1, long Dwarf_Unsigned1, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_SmallPtr1, Pointer Dwarf_SmallPtr2, IntByReference intPtr1, Pointer Dwarf_SmallPtr3, Pointer Dwarf_SmallPtr4, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, LongByReference Dwarf_UnsignedPtr4, LongByReference Dwarf_UnsignedPtr5, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * entry offset is offset_of_first_locentry.<br>
	 * Stop when the returned *next_entry_offset<br>
	 * is == offset_past_last_locentry (from<br>
	 * dwarf_get_loclist_context_plus).<br>
	 * This only makes sense within those ranges.<br>
	 * This retrieves raw detail from the section,<br>
	 * no base values or anything are added.<br>
	 * So this returns raw individual entries<br>
	 * for a single loclist header, meaning a<br>
	 * a single Dwarf_Loclists_Context.<br>
	 * This interface assumes there is no<br>
	 * segment selector.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_loclist_raw_entry_detail(Dwarf_Debug, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5188</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_loclist_raw_entry_detail(libdwarf.LibdwarfLibrary.Dwarf_Debug, long, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_loclist_raw_entry_detail(com.sun.jna.Pointer, long, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_loclist_raw_entry_detail(Pointer Dwarf_Debug1, long Dwarf_Unsigned1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, LongByReference Dwarf_UnsignedPtr4, Pointer Dwarf_ErrorPtr1);
	/**
	 * entry offset is offset_of_first_locentry.<br>
	 * Stop when the returned *next_entry_offset<br>
	 * is == offset_past_last_locentry (from<br>
	 * dwarf_get_loclist_context_plus).<br>
	 * This only makes sense within those ranges.<br>
	 * This retrieves raw detail from the section,<br>
	 * no base values or anything are added.<br>
	 * So this returns raw individual entries<br>
	 * for a single loclist header, meaning a<br>
	 * a single Dwarf_Loclists_Context.<br>
	 * This interface assumes there is no<br>
	 * segment selector.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_loclist_raw_entry_detail(Dwarf_Debug, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5188</i>
	 */
	int dwarf_get_loclist_raw_entry_detail(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, long Dwarf_Unsigned1, LongBuffer Dwarf_UnsignedPtr1, LongBuffer Dwarf_UnsignedPtr2, LongBuffer Dwarf_UnsignedPtr3, LongBuffer Dwarf_UnsignedPtr4, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * entry offset is offset_of_first_locentry.<br>
	 * Stop when the returned *next_entry_offset<br>
	 * is == offset_past_last_locentry (from<br>
	 * dwarf_get_loclist_context_plus).<br>
	 * This only makes sense within those ranges.<br>
	 * This retrieves raw detail from the section,<br>
	 * no base values or anything are added.<br>
	 * So this returns raw individual entries<br>
	 * for a single loclist header, meaning a<br>
	 * a single Dwarf_Loclists_Context.<br>
	 * This interface assumes there is no<br>
	 * segment selector.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_loclist_raw_entry_detail(Dwarf_Debug, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5188</i>
	 */
	int dwarf_get_loclist_raw_entry_detail(Pointer Dwarf_Debug1, long Dwarf_Unsigned1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, LongByReference Dwarf_UnsignedPtr4, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_loclist_lle(Dwarf_Debug, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned, unsigned int*, unsigned int*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Small**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5201</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_loclist_lle(libdwarf.LibdwarfLibrary.Dwarf_Debug, long, long, long, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_loclist_lle(com.sun.jna.Pointer, long, long, long, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_loclist_lle(Pointer Dwarf_Debug1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, long Dwarf_Unsigned3, IntByReference intPtr1, IntByReference intPtr2, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, LongByReference Dwarf_UnsignedPtr4, PointerByReference Dwarf_SmallPtrPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_loclist_lle(Dwarf_Debug, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned, unsigned int*, unsigned int*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Small**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5201</i>
	 */
	int dwarf_get_loclist_lle(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, long Dwarf_Unsigned3, IntBuffer intPtr1, IntBuffer intPtr2, LongBuffer Dwarf_UnsignedPtr1, LongBuffer Dwarf_UnsignedPtr2, LongBuffer Dwarf_UnsignedPtr3, LongBuffer Dwarf_UnsignedPtr4, PointerByReference Dwarf_SmallPtrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_loclist_lle(Dwarf_Debug, Dwarf_Unsigned, Dwarf_Unsigned, Dwarf_Unsigned, unsigned int*, unsigned int*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Small**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5201</i>
	 */
	int dwarf_get_loclist_lle(Pointer Dwarf_Debug1, long Dwarf_Unsigned1, long Dwarf_Unsigned2, long Dwarf_Unsigned3, IntByReference intPtr1, IntByReference intPtr2, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, LongByReference Dwarf_UnsignedPtr4, PointerByReference Dwarf_SmallPtrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Allocates a struct Dwarf_Str_Offsets_Table_s for the section<br>
	 * and returns DW_DLV_OK and sets a pointer to the struct through<br>
	 * the table_data pointer if successful.<br>
	 * If there is no such section it returns DW_DLV_NO_ENTRY.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_open_str_offsets_table_access(Dwarf_Debug, Dwarf_Str_Offsets_Table*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5241</i><br>
	 * @deprecated use the safer methods {@link #dwarf_open_str_offsets_table_access(libdwarf.LibdwarfLibrary.Dwarf_Debug, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_open_str_offsets_table_access(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_open_str_offsets_table_access(Pointer Dwarf_Debug1, Pointer Dwarf_Str_Offsets_TablePtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Allocates a struct Dwarf_Str_Offsets_Table_s for the section<br>
	 * and returns DW_DLV_OK and sets a pointer to the struct through<br>
	 * the table_data pointer if successful.<br>
	 * If there is no such section it returns DW_DLV_NO_ENTRY.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_open_str_offsets_table_access(Dwarf_Debug, Dwarf_Str_Offsets_Table*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5241</i>
	 */
	int dwarf_open_str_offsets_table_access(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, PointerByReference Dwarf_Str_Offsets_TablePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Allocates a struct Dwarf_Str_Offsets_Table_s for the section<br>
	 * and returns DW_DLV_OK and sets a pointer to the struct through<br>
	 * the table_data pointer if successful.<br>
	 * If there is no such section it returns DW_DLV_NO_ENTRY.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_open_str_offsets_table_access(Dwarf_Debug, Dwarf_Str_Offsets_Table*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5241</i>
	 */
	int dwarf_open_str_offsets_table_access(Pointer Dwarf_Debug1, PointerByReference Dwarf_Str_Offsets_TablePtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Close access, free table_data.<br>
	 * Original signature : <code>int dwarf_close_str_offsets_table_access(Dwarf_Str_Offsets_Table, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5246</i><br>
	 * @deprecated use the safer methods {@link #dwarf_close_str_offsets_table_access(libdwarf.LibdwarfLibrary.Dwarf_Str_Offsets_Table, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_close_str_offsets_table_access(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_close_str_offsets_table_access(Pointer Dwarf_Str_Offsets_Table1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Close access, free table_data.<br>
	 * Original signature : <code>int dwarf_close_str_offsets_table_access(Dwarf_Str_Offsets_Table, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5246</i>
	 */
	int dwarf_close_str_offsets_table_access(LibdwarfLibrary.Dwarf_Str_Offsets_Table Dwarf_Str_Offsets_Table1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Close access, free table_data.<br>
	 * Original signature : <code>int dwarf_close_str_offsets_table_access(Dwarf_Str_Offsets_Table, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5246</i>
	 */
	int dwarf_close_str_offsets_table_access(Pointer Dwarf_Str_Offsets_Table1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Call till it returns DW_DLV_NO_ENTRY (normal end)<br>
	 * or DW_DLV_ERROR (error) and stop.<br>
	 * On successful call, call dwarf_str_offsets_table_entry()<br>
	 * to get the individual table values on the now-active table.<br>
	 * table_data<br>
	 * Original signature : <code>int dwarf_next_str_offsets_table(Dwarf_Str_Offsets_Table, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Half*, Dwarf_Half*, Dwarf_Half*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5255</i><br>
	 * @deprecated use the safer methods {@link #dwarf_next_str_offsets_table(libdwarf.LibdwarfLibrary.Dwarf_Str_Offsets_Table, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.ShortBuffer, java.nio.ShortBuffer, java.nio.ShortBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_next_str_offsets_table(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.ShortByReference, com.sun.jna.ptr.ShortByReference, com.sun.jna.ptr.ShortByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_next_str_offsets_table(Pointer Dwarf_Str_Offsets_Table1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, ShortByReference Dwarf_HalfPtr1, ShortByReference Dwarf_HalfPtr2, ShortByReference Dwarf_HalfPtr3, LongByReference Dwarf_UnsignedPtr4, Pointer Dwarf_ErrorPtr1);
	/**
	 * Call till it returns DW_DLV_NO_ENTRY (normal end)<br>
	 * or DW_DLV_ERROR (error) and stop.<br>
	 * On successful call, call dwarf_str_offsets_table_entry()<br>
	 * to get the individual table values on the now-active table.<br>
	 * table_data<br>
	 * Original signature : <code>int dwarf_next_str_offsets_table(Dwarf_Str_Offsets_Table, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Half*, Dwarf_Half*, Dwarf_Half*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5255</i>
	 */
	int dwarf_next_str_offsets_table(LibdwarfLibrary.Dwarf_Str_Offsets_Table Dwarf_Str_Offsets_Table1, LongBuffer Dwarf_UnsignedPtr1, LongBuffer Dwarf_UnsignedPtr2, LongBuffer Dwarf_UnsignedPtr3, ShortBuffer Dwarf_HalfPtr1, ShortBuffer Dwarf_HalfPtr2, ShortBuffer Dwarf_HalfPtr3, LongBuffer Dwarf_UnsignedPtr4, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Call till it returns DW_DLV_NO_ENTRY (normal end)<br>
	 * or DW_DLV_ERROR (error) and stop.<br>
	 * On successful call, call dwarf_str_offsets_table_entry()<br>
	 * to get the individual table values on the now-active table.<br>
	 * table_data<br>
	 * Original signature : <code>int dwarf_next_str_offsets_table(Dwarf_Str_Offsets_Table, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Half*, Dwarf_Half*, Dwarf_Half*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5255</i>
	 */
	int dwarf_next_str_offsets_table(Pointer Dwarf_Str_Offsets_Table1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, ShortByReference Dwarf_HalfPtr1, ShortByReference Dwarf_HalfPtr2, ShortByReference Dwarf_HalfPtr3, LongByReference Dwarf_UnsignedPtr4, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Valid index values n:  0 <= n <  table_entry_count<br>
	 * for the active table<br>
	 * table_data<br>
	 * Original signature : <code>int dwarf_str_offsets_value_by_index(Dwarf_Str_Offsets_Table, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5267</i><br>
	 * @deprecated use the safer methods {@link #dwarf_str_offsets_value_by_index(libdwarf.LibdwarfLibrary.Dwarf_Str_Offsets_Table, long, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_str_offsets_value_by_index(com.sun.jna.Pointer, long, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_str_offsets_value_by_index(Pointer Dwarf_Str_Offsets_Table1, long Dwarf_Unsigned1, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Valid index values n:  0 <= n <  table_entry_count<br>
	 * for the active table<br>
	 * table_data<br>
	 * Original signature : <code>int dwarf_str_offsets_value_by_index(Dwarf_Str_Offsets_Table, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5267</i>
	 */
	int dwarf_str_offsets_value_by_index(LibdwarfLibrary.Dwarf_Str_Offsets_Table Dwarf_Str_Offsets_Table1, long Dwarf_Unsigned1, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Valid index values n:  0 <= n <  table_entry_count<br>
	 * for the active table<br>
	 * table_data<br>
	 * Original signature : <code>int dwarf_str_offsets_value_by_index(Dwarf_Str_Offsets_Table, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5267</i>
	 */
	int dwarf_str_offsets_value_by_index(Pointer Dwarf_Str_Offsets_Table1, long Dwarf_Unsigned1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * After all str_offsets read this reports final<br>
	 * wasted-bytes count.<br>
	 * table_data<br>
	 * Original signature : <code>int dwarf_str_offsets_statistics(Dwarf_Str_Offsets_Table, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5274</i><br>
	 * @deprecated use the safer methods {@link #dwarf_str_offsets_statistics(libdwarf.LibdwarfLibrary.Dwarf_Str_Offsets_Table, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_str_offsets_statistics(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_str_offsets_statistics(Pointer Dwarf_Str_Offsets_Table1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, Pointer Dwarf_ErrorPtr1);
	/**
	 * After all str_offsets read this reports final<br>
	 * wasted-bytes count.<br>
	 * table_data<br>
	 * Original signature : <code>int dwarf_str_offsets_statistics(Dwarf_Str_Offsets_Table, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5274</i>
	 */
	int dwarf_str_offsets_statistics(LibdwarfLibrary.Dwarf_Str_Offsets_Table Dwarf_Str_Offsets_Table1, LongBuffer Dwarf_UnsignedPtr1, LongBuffer Dwarf_UnsignedPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * After all str_offsets read this reports final<br>
	 * wasted-bytes count.<br>
	 * table_data<br>
	 * Original signature : <code>int dwarf_str_offsets_statistics(Dwarf_Str_Offsets_Table, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5274</i>
	 */
	int dwarf_str_offsets_statistics(Pointer Dwarf_Str_Offsets_Table1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * User code supplies size of array of pointers errmsg_ptrs_array<br>
	 * in count and the array of pointers (the pointers themselves<br>
	 * need not be initialized).<br>
	 * The pointers returned in the array of pointers<br>
	 * are invalidated by ANY call to libdwarf.<br>
	 * Use them before making another libdwarf call!<br>
	 * The array of string pointers passed in always has<br>
	 * a final null pointer, so if there are N pointers the<br>
	 * and M actual strings, then MIN(M,N-1) pointers are<br>
	 * set to point to error strings.  The array of pointers<br>
	 * to strings always terminates with a NULL pointer.<br>
	 * If 'count' is passed in zero then errmsg_ptrs_array<br>
	 * is not touched.<br>
	 * The function returns DW_DLV_NO_ENTRY if no harmless errors<br>
	 * were noted so far.  Returns DW_DLV_OK if there are errors.<br>
	 * Never returns DW_DLV_ERROR.<br>
	 * Each call empties the error list (discarding all current entries).<br>
	 * If newerr_count is non-NULL the count of harmless errors<br>
	 * since the last call is returned through the pointer<br>
	 * (some may have been discarded or not returned, it is a circular<br>
	 * list...).<br>
	 * If DW_DLV_NO_ENTRY is returned none of the arguments<br>
	 * here are touched or used.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_harmless_error_list(Dwarf_Debug, unsigned int, const char**, unsigned int*)</code><br>
	 * <i>native declaration : line 5312</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_harmless_error_list(libdwarf.LibdwarfLibrary.Dwarf_Debug, int, java.lang.String[], java.nio.IntBuffer)} and {@link #dwarf_get_harmless_error_list(com.sun.jna.Pointer, int, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_harmless_error_list(Pointer Dwarf_Debug1, int int1, PointerByReference charPtrPtr1, IntByReference intPtr1);
	/**
	 * User code supplies size of array of pointers errmsg_ptrs_array<br>
	 * in count and the array of pointers (the pointers themselves<br>
	 * need not be initialized).<br>
	 * The pointers returned in the array of pointers<br>
	 * are invalidated by ANY call to libdwarf.<br>
	 * Use them before making another libdwarf call!<br>
	 * The array of string pointers passed in always has<br>
	 * a final null pointer, so if there are N pointers the<br>
	 * and M actual strings, then MIN(M,N-1) pointers are<br>
	 * set to point to error strings.  The array of pointers<br>
	 * to strings always terminates with a NULL pointer.<br>
	 * If 'count' is passed in zero then errmsg_ptrs_array<br>
	 * is not touched.<br>
	 * The function returns DW_DLV_NO_ENTRY if no harmless errors<br>
	 * were noted so far.  Returns DW_DLV_OK if there are errors.<br>
	 * Never returns DW_DLV_ERROR.<br>
	 * Each call empties the error list (discarding all current entries).<br>
	 * If newerr_count is non-NULL the count of harmless errors<br>
	 * since the last call is returned through the pointer<br>
	 * (some may have been discarded or not returned, it is a circular<br>
	 * list...).<br>
	 * If DW_DLV_NO_ENTRY is returned none of the arguments<br>
	 * here are touched or used.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_harmless_error_list(Dwarf_Debug, unsigned int, const char**, unsigned int*)</code><br>
	 * <i>native declaration : line 5312</i>
	 */
	int dwarf_get_harmless_error_list(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, int int1, String charPtrPtr1[], IntBuffer intPtr1);
	/**
	 * Insertion is only for testing the harmless error code, it is not<br>
	 * necessarily useful otherwise.<br>
	 * dbg<br>
	 * Original signature : <code>void dwarf_insert_harmless_error(Dwarf_Debug, char*)</code><br>
	 * <i>native declaration : line 5319</i><br>
	 * @deprecated use the safer methods {@link #dwarf_insert_harmless_error(libdwarf.LibdwarfLibrary.Dwarf_Debug, java.nio.ByteBuffer)} and {@link #dwarf_insert_harmless_error(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void dwarf_insert_harmless_error(Pointer Dwarf_Debug1, Pointer charPtr1);
	/**
	 * Insertion is only for testing the harmless error code, it is not<br>
	 * necessarily useful otherwise.<br>
	 * dbg<br>
	 * Original signature : <code>void dwarf_insert_harmless_error(Dwarf_Debug, char*)</code><br>
	 * <i>native declaration : line 5319</i>
	 */
	void dwarf_insert_harmless_error(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, ByteBuffer charPtr1);
	/**
	 * The size of the circular list of strings may be set<br>
	 * and reset as needed.  If it is shortened excess<br>
	 * messages are simply dropped.  It returns the previous<br>
	 * size. If zero passed in the size is unchanged<br>
	 * and it simply returns the current size<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_set_harmless_error_list_size(Dwarf_Debug, unsigned int)</code><br>
	 * <i>native declaration : line 5327</i><br>
	 * @deprecated use the safer methods {@link #dwarf_set_harmless_error_list_size(libdwarf.LibdwarfLibrary.Dwarf_Debug, int)} and {@link #dwarf_set_harmless_error_list_size(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int dwarf_set_harmless_error_list_size(Pointer Dwarf_Debug1, int int1);
	/**
	 * The size of the circular list of strings may be set<br>
	 * and reset as needed.  If it is shortened excess<br>
	 * messages are simply dropped.  It returns the previous<br>
	 * size. If zero passed in the size is unchanged<br>
	 * and it simply returns the current size<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_set_harmless_error_list_size(Dwarf_Debug, unsigned int)</code><br>
	 * <i>native declaration : line 5327</i>
	 */
	int dwarf_set_harmless_error_list_size(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, int int1);
	/**
	 * BEGIN FILE<br>
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_ACCESS_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5343</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_ACCESS_name(int, java.lang.String[])} and {@link #dwarf_get_ACCESS_name(int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_ACCESS_name(int int1, PointerByReference charPtrPtr1);
	/**
	 * BEGIN FILE<br>
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_ACCESS_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5343</i>
	 */
	int dwarf_get_ACCESS_name(int int1, String charPtrPtr1[]);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_ADDR_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5344</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_ADDR_name(int, java.lang.String[])} and {@link #dwarf_get_ADDR_name(int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_ADDR_name(int int1, PointerByReference charPtrPtr1);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_ADDR_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5344</i>
	 */
	int dwarf_get_ADDR_name(int int1, String charPtrPtr1[]);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_ATCF_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5345</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_ATCF_name(int, java.lang.String[])} and {@link #dwarf_get_ATCF_name(int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_ATCF_name(int int1, PointerByReference charPtrPtr1);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_ATCF_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5345</i>
	 */
	int dwarf_get_ATCF_name(int int1, String charPtrPtr1[]);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_ATE_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5346</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_ATE_name(int, java.lang.String[])} and {@link #dwarf_get_ATE_name(int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_ATE_name(int int1, PointerByReference charPtrPtr1);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_ATE_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5346</i>
	 */
	int dwarf_get_ATE_name(int int1, String charPtrPtr1[]);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_AT_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5347</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_AT_name(int, java.lang.String[])} and {@link #dwarf_get_AT_name(int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_AT_name(int int1, PointerByReference charPtrPtr1);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_AT_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5347</i>
	 */
	int dwarf_get_AT_name(int int1, String charPtrPtr1[]);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_CC_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5348</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_CC_name(int, java.lang.String[])} and {@link #dwarf_get_CC_name(int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_CC_name(int int1, PointerByReference charPtrPtr1);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_CC_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5348</i>
	 */
	int dwarf_get_CC_name(int int1, String charPtrPtr1[]);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_CFA_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5349</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_CFA_name(int, java.lang.String[])} and {@link #dwarf_get_CFA_name(int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_CFA_name(int int1, PointerByReference charPtrPtr1);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_CFA_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5349</i>
	 */
	int dwarf_get_CFA_name(int int1, String charPtrPtr1[]);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_children_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5350</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_children_name(int, java.lang.String[])} and {@link #dwarf_get_children_name(int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_children_name(int int1, PointerByReference charPtrPtr1);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_children_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5350</i>
	 */
	int dwarf_get_children_name(int int1, String charPtrPtr1[]);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_CHILDREN_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5351</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_CHILDREN_name(int, java.lang.String[])} and {@link #dwarf_get_CHILDREN_name(int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_CHILDREN_name(int int1, PointerByReference charPtrPtr1);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_CHILDREN_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5351</i>
	 */
	int dwarf_get_CHILDREN_name(int int1, String charPtrPtr1[]);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_DEFAULTED_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5352</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_DEFAULTED_name(int, java.lang.String[])} and {@link #dwarf_get_DEFAULTED_name(int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_DEFAULTED_name(int int1, PointerByReference charPtrPtr1);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_DEFAULTED_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5352</i>
	 */
	int dwarf_get_DEFAULTED_name(int int1, String charPtrPtr1[]);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_DSC_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5353</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_DSC_name(int, java.lang.String[])} and {@link #dwarf_get_DSC_name(int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_DSC_name(int int1, PointerByReference charPtrPtr1);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_DSC_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5353</i>
	 */
	int dwarf_get_DSC_name(int int1, String charPtrPtr1[]);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_DS_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5354</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_DS_name(int, java.lang.String[])} and {@link #dwarf_get_DS_name(int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_DS_name(int int1, PointerByReference charPtrPtr1);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_DS_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5354</i>
	 */
	int dwarf_get_DS_name(int int1, String charPtrPtr1[]);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_EH_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5355</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_EH_name(int, java.lang.String[])} and {@link #dwarf_get_EH_name(int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_EH_name(int int1, PointerByReference charPtrPtr1);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_EH_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5355</i>
	 */
	int dwarf_get_EH_name(int int1, String charPtrPtr1[]);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_END_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5356</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_END_name(int, java.lang.String[])} and {@link #dwarf_get_END_name(int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_END_name(int int1, PointerByReference charPtrPtr1);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_END_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5356</i>
	 */
	int dwarf_get_END_name(int int1, String charPtrPtr1[]);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_FORM_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5357</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_FORM_name(int, java.lang.String[])} and {@link #dwarf_get_FORM_name(int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_FORM_name(int int1, PointerByReference charPtrPtr1);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_FORM_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5357</i>
	 */
	int dwarf_get_FORM_name(int int1, String charPtrPtr1[]);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_FRAME_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5358</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_FRAME_name(int, java.lang.String[])} and {@link #dwarf_get_FRAME_name(int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_FRAME_name(int int1, PointerByReference charPtrPtr1);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_FRAME_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5358</i>
	 */
	int dwarf_get_FRAME_name(int int1, String charPtrPtr1[]);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_GNUIKIND_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5359</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_GNUIKIND_name(int, java.lang.String[])} and {@link #dwarf_get_GNUIKIND_name(int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_GNUIKIND_name(int int1, PointerByReference charPtrPtr1);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_GNUIKIND_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5359</i>
	 */
	int dwarf_get_GNUIKIND_name(int int1, String charPtrPtr1[]);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_GNUIVIS_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5360</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_GNUIVIS_name(int, java.lang.String[])} and {@link #dwarf_get_GNUIVIS_name(int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_GNUIVIS_name(int int1, PointerByReference charPtrPtr1);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_GNUIVIS_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5360</i>
	 */
	int dwarf_get_GNUIVIS_name(int int1, String charPtrPtr1[]);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_ID_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5361</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_ID_name(int, java.lang.String[])} and {@link #dwarf_get_ID_name(int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_ID_name(int int1, PointerByReference charPtrPtr1);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_ID_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5361</i>
	 */
	int dwarf_get_ID_name(int int1, String charPtrPtr1[]);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_IDX_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5362</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_IDX_name(int, java.lang.String[])} and {@link #dwarf_get_IDX_name(int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_IDX_name(int int1, PointerByReference charPtrPtr1);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_IDX_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5362</i>
	 */
	int dwarf_get_IDX_name(int int1, String charPtrPtr1[]);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_INL_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5363</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_INL_name(int, java.lang.String[])} and {@link #dwarf_get_INL_name(int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_INL_name(int int1, PointerByReference charPtrPtr1);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_INL_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5363</i>
	 */
	int dwarf_get_INL_name(int int1, String charPtrPtr1[]);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_ISA_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5364</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_ISA_name(int, java.lang.String[])} and {@link #dwarf_get_ISA_name(int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_ISA_name(int int1, PointerByReference charPtrPtr1);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_ISA_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5364</i>
	 */
	int dwarf_get_ISA_name(int int1, String charPtrPtr1[]);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_LANG_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5365</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_LANG_name(int, java.lang.String[])} and {@link #dwarf_get_LANG_name(int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_LANG_name(int int1, PointerByReference charPtrPtr1);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_LANG_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5365</i>
	 */
	int dwarf_get_LANG_name(int int1, String charPtrPtr1[]);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_LLE_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5366</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_LLE_name(int, java.lang.String[])} and {@link #dwarf_get_LLE_name(int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_LLE_name(int int1, PointerByReference charPtrPtr1);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_LLE_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5366</i>
	 */
	int dwarf_get_LLE_name(int int1, String charPtrPtr1[]);
	/**
	 * dwarf_get_LLEX_name is likely just temporary. Not standard.<br>
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_LLEX_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5368</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_LLEX_name(int, java.lang.String[])} and {@link #dwarf_get_LLEX_name(int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_LLEX_name(int int1, PointerByReference charPtrPtr1);
	/**
	 * dwarf_get_LLEX_name is likely just temporary. Not standard.<br>
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_LLEX_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5368</i>
	 */
	int dwarf_get_LLEX_name(int int1, String charPtrPtr1[]);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_LNCT_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5369</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_LNCT_name(int, java.lang.String[])} and {@link #dwarf_get_LNCT_name(int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_LNCT_name(int int1, PointerByReference charPtrPtr1);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_LNCT_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5369</i>
	 */
	int dwarf_get_LNCT_name(int int1, String charPtrPtr1[]);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_LNE_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5370</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_LNE_name(int, java.lang.String[])} and {@link #dwarf_get_LNE_name(int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_LNE_name(int int1, PointerByReference charPtrPtr1);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_LNE_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5370</i>
	 */
	int dwarf_get_LNE_name(int int1, String charPtrPtr1[]);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_LNS_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5371</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_LNS_name(int, java.lang.String[])} and {@link #dwarf_get_LNS_name(int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_LNS_name(int int1, PointerByReference charPtrPtr1);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_LNS_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5371</i>
	 */
	int dwarf_get_LNS_name(int int1, String charPtrPtr1[]);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_MACINFO_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5372</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_MACINFO_name(int, java.lang.String[])} and {@link #dwarf_get_MACINFO_name(int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_MACINFO_name(int int1, PointerByReference charPtrPtr1);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_MACINFO_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5372</i>
	 */
	int dwarf_get_MACINFO_name(int int1, String charPtrPtr1[]);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_MACRO_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5373</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_MACRO_name(int, java.lang.String[])} and {@link #dwarf_get_MACRO_name(int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_MACRO_name(int int1, PointerByReference charPtrPtr1);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_MACRO_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5373</i>
	 */
	int dwarf_get_MACRO_name(int int1, String charPtrPtr1[]);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_OP_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5374</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_OP_name(int, java.lang.String[])} and {@link #dwarf_get_OP_name(int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_OP_name(int int1, PointerByReference charPtrPtr1);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_OP_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5374</i>
	 */
	int dwarf_get_OP_name(int int1, String charPtrPtr1[]);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_ORD_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5375</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_ORD_name(int, java.lang.String[])} and {@link #dwarf_get_ORD_name(int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_ORD_name(int int1, PointerByReference charPtrPtr1);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_ORD_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5375</i>
	 */
	int dwarf_get_ORD_name(int int1, String charPtrPtr1[]);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_RLE_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5376</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_RLE_name(int, java.lang.String[])} and {@link #dwarf_get_RLE_name(int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_RLE_name(int int1, PointerByReference charPtrPtr1);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_RLE_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5376</i>
	 */
	int dwarf_get_RLE_name(int int1, String charPtrPtr1[]);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_SECT_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5377</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_SECT_name(int, java.lang.String[])} and {@link #dwarf_get_SECT_name(int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_SECT_name(int int1, PointerByReference charPtrPtr1);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_SECT_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5377</i>
	 */
	int dwarf_get_SECT_name(int int1, String charPtrPtr1[]);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_TAG_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5378</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_TAG_name(int, java.lang.String[])} and {@link #dwarf_get_TAG_name(int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_TAG_name(int int1, PointerByReference charPtrPtr1);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_TAG_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5378</i>
	 */
	int dwarf_get_TAG_name(int int1, String charPtrPtr1[]);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_UT_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5379</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_UT_name(int, java.lang.String[])} and {@link #dwarf_get_UT_name(int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_UT_name(int int1, PointerByReference charPtrPtr1);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_UT_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5379</i>
	 */
	int dwarf_get_UT_name(int int1, String charPtrPtr1[]);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_VIRTUALITY_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5380</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_VIRTUALITY_name(int, java.lang.String[])} and {@link #dwarf_get_VIRTUALITY_name(int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_VIRTUALITY_name(int int1, PointerByReference charPtrPtr1);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_VIRTUALITY_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5380</i>
	 */
	int dwarf_get_VIRTUALITY_name(int int1, String charPtrPtr1[]);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_VIS_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5381</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_VIS_name(int, java.lang.String[])} and {@link #dwarf_get_VIS_name(int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_VIS_name(int int1, PointerByReference charPtrPtr1);
	/**
	 * val_in<br>
	 * Original signature : <code>int dwarf_get_VIS_name(unsigned int, const char**)</code><br>
	 * @param int1 s_out<br>
	 * <i>native declaration : line 5381</i>
	 */
	int dwarf_get_VIS_name(int int1, String charPtrPtr1[]);
	/**
	 * Convert local offset into global offset<br>
	 * attr<br>
	 * Original signature : <code>int dwarf_convert_to_global_offset(Dwarf_Attribute, Dwarf_Off, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5385</i><br>
	 * @deprecated use the safer methods {@link #dwarf_convert_to_global_offset(libdwarf.LibdwarfLibrary.Dwarf_Attribute, long, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_convert_to_global_offset(com.sun.jna.Pointer, long, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_convert_to_global_offset(Pointer Dwarf_Attribute1, long Dwarf_Off1, LongByReference Dwarf_OffPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Convert local offset into global offset<br>
	 * attr<br>
	 * Original signature : <code>int dwarf_convert_to_global_offset(Dwarf_Attribute, Dwarf_Off, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5385</i>
	 */
	int dwarf_convert_to_global_offset(LibdwarfLibrary.Dwarf_Attribute Dwarf_Attribute1, long Dwarf_Off1, LongBuffer Dwarf_OffPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Convert local offset into global offset<br>
	 * attr<br>
	 * Original signature : <code>int dwarf_convert_to_global_offset(Dwarf_Attribute, Dwarf_Off, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5385</i>
	 */
	int dwarf_convert_to_global_offset(Pointer Dwarf_Attribute1, long Dwarf_Off1, LongByReference Dwarf_OffPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Get both offsets (local and global)<br>
	 * die<br>
	 * Original signature : <code>int dwarf_die_offsets(Dwarf_Die, Dwarf_Off*, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5391</i><br>
	 * @deprecated use the safer methods {@link #dwarf_die_offsets(libdwarf.LibdwarfLibrary.Dwarf_Die, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_die_offsets(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_die_offsets(Pointer Dwarf_Die1, LongByReference Dwarf_OffPtr1, LongByReference Dwarf_OffPtr2, Pointer Dwarf_ErrorPtr1);
	/**
	 * Get both offsets (local and global)<br>
	 * die<br>
	 * Original signature : <code>int dwarf_die_offsets(Dwarf_Die, Dwarf_Off*, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5391</i>
	 */
	int dwarf_die_offsets(LibdwarfLibrary.Dwarf_Die Dwarf_Die1, LongBuffer Dwarf_OffPtr1, LongBuffer Dwarf_OffPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Get both offsets (local and global)<br>
	 * die<br>
	 * Original signature : <code>int dwarf_die_offsets(Dwarf_Die, Dwarf_Off*, Dwarf_Off*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5391</i>
	 */
	int dwarf_die_offsets(Pointer Dwarf_Die1, LongByReference Dwarf_OffPtr1, LongByReference Dwarf_OffPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Giving a section name, get its size and address<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_section_info_by_name(Dwarf_Debug, const char*, Dwarf_Addr*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5397</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_section_info_by_name(libdwarf.LibdwarfLibrary.Dwarf_Debug, java.lang.String, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_section_info_by_name(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_section_info_by_name(Pointer Dwarf_Debug1, Pointer charPtr1, LongByReference Dwarf_AddrPtr1, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Giving a section name, get its size and address<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_section_info_by_name(Dwarf_Debug, const char*, Dwarf_Addr*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5397</i>
	 */
	int dwarf_get_section_info_by_name(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, String charPtr1, LongBuffer Dwarf_AddrPtr1, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Giving a section name, get its size and address<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_section_info_by_name(Dwarf_Debug, const char*, Dwarf_Addr*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5397</i>
	 */
	int dwarf_get_section_info_by_name(Pointer Dwarf_Debug1, Pointer charPtr1, LongByReference Dwarf_AddrPtr1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Giving a section index, get its size and address<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_section_info_by_index(Dwarf_Debug, int, const char**, Dwarf_Addr*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5404</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_section_info_by_index(libdwarf.LibdwarfLibrary.Dwarf_Debug, int, java.lang.String[], java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_get_section_info_by_index(com.sun.jna.Pointer, int, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_section_info_by_index(Pointer Dwarf_Debug1, int int1, PointerByReference charPtrPtr1, LongByReference Dwarf_AddrPtr1, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * Giving a section index, get its size and address<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_section_info_by_index(Dwarf_Debug, int, const char**, Dwarf_Addr*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5404</i>
	 */
	int dwarf_get_section_info_by_index(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, int int1, String charPtrPtr1[], LongBuffer Dwarf_AddrPtr1, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Giving a section index, get its size and address<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_section_info_by_index(Dwarf_Debug, int, const char**, Dwarf_Addr*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5404</i>
	 */
	int dwarf_get_section_info_by_index(Pointer Dwarf_Debug1, int int1, PointerByReference charPtrPtr1, LongByReference Dwarf_AddrPtr1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Get section count, of object file sections.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_section_count(Dwarf_Debug)</code><br>
	 * <i>native declaration : line 5412</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_section_count(libdwarf.LibdwarfLibrary.Dwarf_Debug)} and {@link #dwarf_get_section_count(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int dwarf_get_section_count(Pointer Dwarf_Debug1);
	/**
	 * Get section count, of object file sections.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_get_section_count(Dwarf_Debug)</code><br>
	 * <i>native declaration : line 5412</i>
	 */
	int dwarf_get_section_count(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1);
	/**
	 * Get the version and offset size of a CU context.<br>
	 * This is useful as a precursor to<br>
	 * calling dwarf_get_form_class() at times.<br>
	 * die<br>
	 * Original signature : <code>int dwarf_get_version_of_die(Dwarf_Die, Dwarf_Half*, Dwarf_Half*)</code><br>
	 * <i>native declaration : line 5417</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_version_of_die(libdwarf.LibdwarfLibrary.Dwarf_Die, java.nio.ShortBuffer, java.nio.ShortBuffer)} and {@link #dwarf_get_version_of_die(com.sun.jna.Pointer, com.sun.jna.ptr.ShortByReference, com.sun.jna.ptr.ShortByReference)} instead
	 */
	@Deprecated 
	int dwarf_get_version_of_die(Pointer Dwarf_Die1, ShortByReference Dwarf_HalfPtr1, ShortByReference Dwarf_HalfPtr2);
	/**
	 * Get the version and offset size of a CU context.<br>
	 * This is useful as a precursor to<br>
	 * calling dwarf_get_form_class() at times.<br>
	 * die<br>
	 * Original signature : <code>int dwarf_get_version_of_die(Dwarf_Die, Dwarf_Half*, Dwarf_Half*)</code><br>
	 * <i>native declaration : line 5417</i>
	 */
	int dwarf_get_version_of_die(LibdwarfLibrary.Dwarf_Die Dwarf_Die1, ShortBuffer Dwarf_HalfPtr1, ShortBuffer Dwarf_HalfPtr2);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_discr_list(Dwarf_Debug, Dwarf_Small*, Dwarf_Unsigned, Dwarf_Dsc_Head*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5421</i><br>
	 * @deprecated use the safer methods {@link #dwarf_discr_list(libdwarf.LibdwarfLibrary.Dwarf_Debug, java.nio.ByteBuffer, long, com.sun.jna.ptr.PointerByReference, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_discr_list(com.sun.jna.Pointer, com.sun.jna.Pointer, long, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_discr_list(Pointer Dwarf_Debug1, Pointer Dwarf_SmallPtr1, long Dwarf_Unsigned1, Pointer Dwarf_Dsc_HeadPtr1, LongByReference Dwarf_UnsignedPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_discr_list(Dwarf_Debug, Dwarf_Small*, Dwarf_Unsigned, Dwarf_Dsc_Head*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5421</i>
	 */
	int dwarf_discr_list(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, ByteBuffer Dwarf_SmallPtr1, long Dwarf_Unsigned1, PointerByReference Dwarf_Dsc_HeadPtr1, LongBuffer Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_discr_list(Dwarf_Debug, Dwarf_Small*, Dwarf_Unsigned, Dwarf_Dsc_Head*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5421</i>
	 */
	int dwarf_discr_list(Pointer Dwarf_Debug1, Pointer Dwarf_SmallPtr1, long Dwarf_Unsigned1, PointerByReference Dwarf_Dsc_HeadPtr1, LongByReference Dwarf_UnsignedPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * NEW September 2016. Allows easy access to DW_AT_discr_list<br>
	 * entry. Callers must know which is the appropriate<br>
	 * one of the following two interfaces, though both<br>
	 * will work.<br>
	 * dsc<br>
	 * Original signature : <code>int dwarf_discr_entry_u(Dwarf_Dsc_Head, Dwarf_Unsigned, Dwarf_Half*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5432</i><br>
	 * @deprecated use the safer methods {@link #dwarf_discr_entry_u(libdwarf.LibdwarfLibrary.Dwarf_Dsc_Head, long, java.nio.ShortBuffer, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_discr_entry_u(com.sun.jna.Pointer, long, com.sun.jna.ptr.ShortByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_discr_entry_u(Pointer Dwarf_Dsc_Head1, long Dwarf_Unsigned1, ShortByReference Dwarf_HalfPtr1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, Pointer Dwarf_ErrorPtr1);
	/**
	 * NEW September 2016. Allows easy access to DW_AT_discr_list<br>
	 * entry. Callers must know which is the appropriate<br>
	 * one of the following two interfaces, though both<br>
	 * will work.<br>
	 * dsc<br>
	 * Original signature : <code>int dwarf_discr_entry_u(Dwarf_Dsc_Head, Dwarf_Unsigned, Dwarf_Half*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5432</i>
	 */
	int dwarf_discr_entry_u(LibdwarfLibrary.Dwarf_Dsc_Head Dwarf_Dsc_Head1, long Dwarf_Unsigned1, ShortBuffer Dwarf_HalfPtr1, LongBuffer Dwarf_UnsignedPtr1, LongBuffer Dwarf_UnsignedPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * NEW September 2016. Allows easy access to DW_AT_discr_list<br>
	 * entry. Callers must know which is the appropriate<br>
	 * one of the following two interfaces, though both<br>
	 * will work.<br>
	 * dsc<br>
	 * Original signature : <code>int dwarf_discr_entry_u(Dwarf_Dsc_Head, Dwarf_Unsigned, Dwarf_Half*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5432</i>
	 */
	int dwarf_discr_entry_u(Pointer Dwarf_Dsc_Head1, long Dwarf_Unsigned1, ShortByReference Dwarf_HalfPtr1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * NEW September 2016. Allows easy access to DW_AT_discr_list<br>
	 * entry.<br>
	 * dsc<br>
	 * Original signature : <code>int dwarf_discr_entry_s(Dwarf_Dsc_Head, Dwarf_Unsigned, Dwarf_Half*, Dwarf_Signed*, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5441</i><br>
	 * @deprecated use the safer methods {@link #dwarf_discr_entry_s(libdwarf.LibdwarfLibrary.Dwarf_Dsc_Head, long, java.nio.ShortBuffer, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_discr_entry_s(com.sun.jna.Pointer, long, com.sun.jna.ptr.ShortByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_discr_entry_s(Pointer Dwarf_Dsc_Head1, long Dwarf_Unsigned1, ShortByReference Dwarf_HalfPtr1, LongByReference Dwarf_SignedPtr1, LongByReference Dwarf_SignedPtr2, Pointer Dwarf_ErrorPtr1);
	/**
	 * NEW September 2016. Allows easy access to DW_AT_discr_list<br>
	 * entry.<br>
	 * dsc<br>
	 * Original signature : <code>int dwarf_discr_entry_s(Dwarf_Dsc_Head, Dwarf_Unsigned, Dwarf_Half*, Dwarf_Signed*, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5441</i>
	 */
	int dwarf_discr_entry_s(LibdwarfLibrary.Dwarf_Dsc_Head Dwarf_Dsc_Head1, long Dwarf_Unsigned1, ShortBuffer Dwarf_HalfPtr1, LongBuffer Dwarf_SignedPtr1, LongBuffer Dwarf_SignedPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * NEW September 2016. Allows easy access to DW_AT_discr_list<br>
	 * entry.<br>
	 * dsc<br>
	 * Original signature : <code>int dwarf_discr_entry_s(Dwarf_Dsc_Head, Dwarf_Unsigned, Dwarf_Half*, Dwarf_Signed*, Dwarf_Signed*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5441</i>
	 */
	int dwarf_discr_entry_s(Pointer Dwarf_Dsc_Head1, long Dwarf_Unsigned1, ShortByReference Dwarf_HalfPtr1, LongByReference Dwarf_SignedPtr1, LongByReference Dwarf_SignedPtr2, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New May 2017.  So users can find out what groups (dwo or COMDAT)<br>
	 * are in the object and how much to allocate so one can get the<br>
	 * group-section map data.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_sec_group_sizes(Dwarf_Debug, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5451</i><br>
	 * @deprecated use the safer methods {@link #dwarf_sec_group_sizes(libdwarf.LibdwarfLibrary.Dwarf_Debug, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_sec_group_sizes(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_sec_group_sizes(Pointer Dwarf_Debug1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, LongByReference Dwarf_UnsignedPtr4, Pointer Dwarf_ErrorPtr1);
	/**
	 * New May 2017.  So users can find out what groups (dwo or COMDAT)<br>
	 * are in the object and how much to allocate so one can get the<br>
	 * group-section map data.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_sec_group_sizes(Dwarf_Debug, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5451</i>
	 */
	int dwarf_sec_group_sizes(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, LongBuffer Dwarf_UnsignedPtr1, LongBuffer Dwarf_UnsignedPtr2, LongBuffer Dwarf_UnsignedPtr3, LongBuffer Dwarf_UnsignedPtr4, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New May 2017.  So users can find out what groups (dwo or COMDAT)<br>
	 * are in the object and how much to allocate so one can get the<br>
	 * group-section map data.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_sec_group_sizes(Dwarf_Debug, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5451</i>
	 */
	int dwarf_sec_group_sizes(Pointer Dwarf_Debug1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, LongByReference Dwarf_UnsignedPtr4, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New May 2017. Reveals the map between group numbers and section numbers.<br>
	 * Caller must allocate the arrays with space for 'map_entry_count'<br>
	 * values and this function fills in the array entries.<br>
	 * Output ordered by group number and section number.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_sec_group_map(Dwarf_Debug, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, const char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5463</i><br>
	 * @deprecated use the safer methods {@link #dwarf_sec_group_map(libdwarf.LibdwarfLibrary.Dwarf_Debug, long, java.nio.LongBuffer, java.nio.LongBuffer, java.lang.String[], com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_sec_group_map(com.sun.jna.Pointer, long, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_sec_group_map(Pointer Dwarf_Debug1, long Dwarf_Unsigned1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, PointerByReference charPtrPtr1, Pointer Dwarf_ErrorPtr1);
	/**
	 * New May 2017. Reveals the map between group numbers and section numbers.<br>
	 * Caller must allocate the arrays with space for 'map_entry_count'<br>
	 * values and this function fills in the array entries.<br>
	 * Output ordered by group number and section number.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_sec_group_map(Dwarf_Debug, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, const char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5463</i>
	 */
	int dwarf_sec_group_map(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1, long Dwarf_Unsigned1, LongBuffer Dwarf_UnsignedPtr1, LongBuffer Dwarf_UnsignedPtr2, String charPtrPtr1[], PointerByReference Dwarf_ErrorPtr1);
	/**
	 * New May 2017. Reveals the map between group numbers and section numbers.<br>
	 * Caller must allocate the arrays with space for 'map_entry_count'<br>
	 * values and this function fills in the array entries.<br>
	 * Output ordered by group number and section number.<br>
	 * dbg<br>
	 * Original signature : <code>int dwarf_sec_group_map(Dwarf_Debug, Dwarf_Unsigned, Dwarf_Unsigned*, Dwarf_Unsigned*, const char**, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5463</i>
	 */
	int dwarf_sec_group_map(Pointer Dwarf_Debug1, long Dwarf_Unsigned1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, PointerByReference charPtrPtr1, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dwarf_get_endian_copy_function new. December 2019.<br>
	 * dbg<br>
	 * Original signature : <code>dwarf_get_endian_copy_function_callback* dwarf_get_endian_copy_function(Dwarf_Debug)</code><br>
	 * <i>native declaration : line 5471</i><br>
	 * @deprecated use the safer methods {@link #dwarf_get_endian_copy_function(libdwarf.LibdwarfLibrary.Dwarf_Debug)} and {@link #dwarf_get_endian_copy_function(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	LibdwarfLibrary.dwarf_get_endian_copy_function_callback dwarf_get_endian_copy_function(Pointer Dwarf_Debug1);
	/**
	 * dwarf_get_endian_copy_function new. December 2019.<br>
	 * dbg<br>
	 * Original signature : <code>dwarf_get_endian_copy_function_callback* dwarf_get_endian_copy_function(Dwarf_Debug)</code><br>
	 * <i>native declaration : line 5471</i>
	 */
	LibdwarfLibrary.dwarf_get_endian_copy_function_callback dwarf_get_endian_copy_function(LibdwarfLibrary.Dwarf_Debug Dwarf_Debug1);
	/**
	 * These make the  LEB encoding routines visible to libdwarf<br>
	 * callers. Added November, 2012.<br>
	 * val<br>
	 * Original signature : <code>int dwarf_encode_leb128(Dwarf_Unsigned, int*, char*, int)</code><br>
	 * <i>native declaration : line 5475</i><br>
	 * @deprecated use the safer methods {@link #dwarf_encode_leb128(long, java.nio.IntBuffer, java.nio.ByteBuffer, int)} and {@link #dwarf_encode_leb128(long, com.sun.jna.ptr.IntByReference, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int dwarf_encode_leb128(long Dwarf_Unsigned1, IntByReference intPtr1, Pointer charPtr1, int int1);
	/**
	 * These make the  LEB encoding routines visible to libdwarf<br>
	 * callers. Added November, 2012.<br>
	 * val<br>
	 * Original signature : <code>int dwarf_encode_leb128(Dwarf_Unsigned, int*, char*, int)</code><br>
	 * <i>native declaration : line 5475</i>
	 */
	int dwarf_encode_leb128(long Dwarf_Unsigned1, IntBuffer intPtr1, ByteBuffer charPtr1, int int1);
	/**
	 * val<br>
	 * Original signature : <code>int dwarf_encode_signed_leb128(Dwarf_Signed, int*, char*, int)</code><br>
	 * <i>native declaration : line 5479</i><br>
	 * @deprecated use the safer methods {@link #dwarf_encode_signed_leb128(long, java.nio.IntBuffer, java.nio.ByteBuffer, int)} and {@link #dwarf_encode_signed_leb128(long, com.sun.jna.ptr.IntByReference, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int dwarf_encode_signed_leb128(long Dwarf_Signed1, IntByReference intPtr1, Pointer charPtr1, int int1);
	/**
	 * val<br>
	 * Original signature : <code>int dwarf_encode_signed_leb128(Dwarf_Signed, int*, char*, int)</code><br>
	 * <i>native declaration : line 5479</i>
	 */
	int dwarf_encode_signed_leb128(long Dwarf_Signed1, IntBuffer intPtr1, ByteBuffer charPtr1, int int1);
	/**
	 * Set libdwarf to reflect some application command line options.<br>
	 * options<br>
	 * Original signature : <code>void dwarf_record_cmdline_options(Dwarf_Cmdline_Options)</code><br>
	 * <i>native declaration : line 5498</i>
	 */
	void dwarf_record_cmdline_options(libdwarf.Dwarf_Cmdline_Options.ByValue Dwarf_Cmdline_Options1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_pro_get_string_stats(Dwarf_P_Debug, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5500</i><br>
	 * @deprecated use the safer methods {@link #dwarf_pro_get_string_stats(libdwarf.LibdwarfLibrary.Dwarf_P_Debug, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #dwarf_pro_get_string_stats(com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int dwarf_pro_get_string_stats(Pointer Dwarf_P_Debug1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, LongByReference Dwarf_UnsignedPtr4, LongByReference Dwarf_UnsignedPtr5, LongByReference Dwarf_UnsignedPtr6, Pointer Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_pro_get_string_stats(Dwarf_P_Debug, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5500</i>
	 */
	int dwarf_pro_get_string_stats(LibdwarfLibrary.Dwarf_P_Debug Dwarf_P_Debug1, LongBuffer Dwarf_UnsignedPtr1, LongBuffer Dwarf_UnsignedPtr2, LongBuffer Dwarf_UnsignedPtr3, LongBuffer Dwarf_UnsignedPtr4, LongBuffer Dwarf_UnsignedPtr5, LongBuffer Dwarf_UnsignedPtr6, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * dbg<br>
	 * Original signature : <code>int dwarf_pro_get_string_stats(Dwarf_P_Debug, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Unsigned*, Dwarf_Error*)</code><br>
	 * <i>native declaration : line 5500</i>
	 */
	int dwarf_pro_get_string_stats(Pointer Dwarf_P_Debug1, LongByReference Dwarf_UnsignedPtr1, LongByReference Dwarf_UnsignedPtr2, LongByReference Dwarf_UnsignedPtr3, LongByReference Dwarf_UnsignedPtr4, LongByReference Dwarf_UnsignedPtr5, LongByReference Dwarf_UnsignedPtr6, PointerByReference Dwarf_ErrorPtr1);
	/**
	 * Defined March 7 2020. Allows a caller to<br>
	 * avoid most tracking by the de_alloc_tree hash<br>
	 * table if called with v of zero.<br>
	 * Returns the value the flag was before this call.<br>
	 * Original signature : <code>int dwarf_set_de_alloc_flag(int)</code><br>
	 * <i>native declaration : line 5528</i>
	 */
	int dwarf_set_de_alloc_flag(int v);
	/**
	 * Original signature : <code>int dwarf_object_detector_path(const char*, char*, unsigned long, unsigned int*, unsigned int*, unsigned int*, Dwarf_Unsigned*, int*)</code><br>
	 * <i>native declaration : line 5530</i><br>
	 * @deprecated use the safer methods {@link #dwarf_object_detector_path(java.lang.String, java.nio.ByteBuffer, com.sun.jna.NativeLong, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.LongBuffer, java.nio.IntBuffer)} and {@link #dwarf_object_detector_path(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.NativeLong, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int dwarf_object_detector_path(Pointer path, Pointer outpath, NativeLong u1, IntByReference ftype, IntByReference endian, IntByReference offsetsize, LongByReference filesize, IntByReference errcode);
	/**
	 * Original signature : <code>int dwarf_object_detector_path(const char*, char*, unsigned long, unsigned int*, unsigned int*, unsigned int*, Dwarf_Unsigned*, int*)</code><br>
	 * <i>native declaration : line 5530</i>
	 */
	int dwarf_object_detector_path(String path, ByteBuffer outpath, NativeLong u1, IntBuffer ftype, IntBuffer endian, IntBuffer offsetsize, LongBuffer filesize, IntBuffer errcode);
	/**
	 * Original signature : <code>int dwarf_object_detector_fd(int, unsigned int*, unsigned int*, unsigned int*, Dwarf_Unsigned*, int*)</code><br>
	 * <i>native declaration : line 5539</i><br>
	 * @deprecated use the safer methods {@link #dwarf_object_detector_fd(int, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.LongBuffer, java.nio.IntBuffer)} and {@link #dwarf_object_detector_fd(int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int dwarf_object_detector_fd(int fd, IntByReference ftype, IntByReference endian, IntByReference offsetsize, LongByReference filesize, IntByReference errcode);
	/**
	 * Original signature : <code>int dwarf_object_detector_fd(int, unsigned int*, unsigned int*, unsigned int*, Dwarf_Unsigned*, int*)</code><br>
	 * <i>native declaration : line 5539</i>
	 */
	int dwarf_object_detector_fd(int fd, IntBuffer ftype, IntBuffer endian, IntBuffer offsetsize, LongBuffer filesize, IntBuffer errcode);
	//public static final GlobalStruct<libdwarf.Dwarf_Cmdline_Options.ByValue > dwarf_cmdline_options = new GlobalStruct<libdwarf.Dwarf_Cmdline_Options.ByValue >(LibdwarfLibrary.JNA_NATIVE_LIB, libdwarf.Dwarf_Cmdline_Options.ByValue.class, "dwarf_cmdline_options");
	public static class dwarf_elf_handle extends PointerType {
		public dwarf_elf_handle(Pointer address) {
			super(address);
		}
		public dwarf_elf_handle() {
			super();
		}
	};
	public static class Dwarf_Dsc_Head extends PointerType {
		public Dwarf_Dsc_Head(Pointer address) {
			super(address);
		}
		public Dwarf_Dsc_Head() {
			super();
		}
	};
	public static class Dwarf_Attribute extends PointerType {
		public Dwarf_Attribute(Pointer address) {
			super(address);
		}
		public Dwarf_Attribute() {
			super();
		}
	};
	public static class Dwarf_Die extends PointerType {
		public Dwarf_Die(Pointer address) {
			super(address);
		}
		public Dwarf_Die() {
			super();
		}
	};
	public static class Dwarf_Cie extends PointerType {
		public Dwarf_Cie(Pointer address) {
			super(address);
		}
		public Dwarf_Cie() {
			super();
		}
	};
	public static class Dwarf_Line_Context extends PointerType {
		public Dwarf_Line_Context(Pointer address) {
			super(address);
		}
		public Dwarf_Line_Context() {
			super();
		}
	};
	public static class Dwarf_P_Debug extends PointerType {
		public Dwarf_P_Debug(Pointer address) {
			super(address);
		}
		public Dwarf_P_Debug() {
			super();
		}
	};
	public static class Dwarf_Gnu_Index_Head extends PointerType {
		public Dwarf_Gnu_Index_Head(Pointer address) {
			super(address);
		}
		public Dwarf_Gnu_Index_Head() {
			super();
		}
	};
	public static class Dwarf_P_Expr extends PointerType {
		public Dwarf_P_Expr(Pointer address) {
			super(address);
		}
		public Dwarf_P_Expr() {
			super();
		}
	};
	public static class Dwarf_Func extends PointerType {
		public Dwarf_Func(Pointer address) {
			super(address);
		}
		public Dwarf_Func() {
			super();
		}
	};
	public static class Dwarf_Macro_Context extends PointerType {
		public Dwarf_Macro_Context(Pointer address) {
			super(address);
		}
		public Dwarf_Macro_Context() {
			super();
		}
	};
	public static class Dwarf_P_Fde extends PointerType {
		public Dwarf_P_Fde(Pointer address) {
			super(address);
		}
		public Dwarf_P_Fde() {
			super();
		}
	};
	public static class Dwarf_Error extends PointerType {
		public Dwarf_Error(Pointer address) {
			super(address);
		}
		public Dwarf_Error() {
			super();
		}
	};
	public static class Dwarf_Loc_Head_c extends PointerType {
		public Dwarf_Loc_Head_c(Pointer address) {
			super(address);
		}
		public Dwarf_Loc_Head_c() {
			super();
		}
	};
	public static class Dwarf_Dnames_Head extends PointerType {
		public Dwarf_Dnames_Head(Pointer address) {
			super(address);
		}
		public Dwarf_Dnames_Head() {
			super();
		}
	};
	public static class Dwarf_Global extends PointerType {
		public Dwarf_Global(Pointer address) {
			super(address);
		}
		public Dwarf_Global() {
			super();
		}
	};
	public static class Dwarf_Var extends PointerType {
		public Dwarf_Var(Pointer address) {
			super(address);
		}
		public Dwarf_Var() {
			super();
		}
	};
	public static class Dwarf_Line extends PointerType {
		public Dwarf_Line(Pointer address) {
			super(address);
		}
		public Dwarf_Line() {
			super();
		}
	};
	public static class Dwarf_Str_Offsets_Table extends PointerType {
		public Dwarf_Str_Offsets_Table(Pointer address) {
			super(address);
		}
		public Dwarf_Str_Offsets_Table() {
			super();
		}
	};
	public static class Dwarf_Rnglists_Head extends PointerType {
		public Dwarf_Rnglists_Head(Pointer address) {
			super(address);
		}
		public Dwarf_Rnglists_Head() {
			super();
		}
	};
	public static class Dwarf_Weak extends PointerType {
		public Dwarf_Weak(Pointer address) {
			super(address);
		}
		public Dwarf_Weak() {
			super();
		}
	};
	public static class Dwarf_Debug extends PointerType {
		public Dwarf_Debug(Pointer address) {
			super(address);
		}
		public Dwarf_Debug() {
			super();
		}
	};
	public static class Dwarf_Arange extends PointerType {
		public Dwarf_Arange(Pointer address) {
			super(address);
		}
		public Dwarf_Arange() {
			super();
		}
	};
	public static class Dwarf_Type extends PointerType {
		public Dwarf_Type(Pointer address) {
			super(address);
		}
		public Dwarf_Type() {
			super();
		}
	};
	public static class Dwarf_Abbrev extends PointerType {
		public Dwarf_Abbrev(Pointer address) {
			super(address);
		}
		public Dwarf_Abbrev() {
			super();
		}
	};
	public static class Dwarf_Fde extends PointerType {
		public Dwarf_Fde(Pointer address) {
			super(address);
		}
		public Dwarf_Fde() {
			super();
		}
	};
	public static class Dwarf_Locdesc_c extends PointerType {
		public Dwarf_Locdesc_c(Pointer address) {
			super(address);
		}
		public Dwarf_Locdesc_c() {
			super();
		}
	};
	public static class Dwarf_Xu_Index_Header extends PointerType {
		public Dwarf_Xu_Index_Header(Pointer address) {
			super(address);
		}
		public Dwarf_Xu_Index_Header() {
			super();
		}
	};
	public static class Dwarf_Gdbindex extends PointerType {
		public Dwarf_Gdbindex(Pointer address) {
			super(address);
		}
		public Dwarf_Gdbindex() {
			super();
		}
	};
	public static class Dwarf_P_Die extends PointerType {
		public Dwarf_P_Die(Pointer address) {
			super(address);
		}
		public Dwarf_P_Die() {
			super();
		}
	};
	public static class Dwarf_P_Attribute extends PointerType {
		public Dwarf_P_Attribute(Pointer address) {
			super(address);
		}
		public Dwarf_P_Attribute() {
			super();
		}
	};
}
